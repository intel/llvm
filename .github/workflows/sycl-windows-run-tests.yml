name: SYCL E2E

on:
  workflow_call:
    inputs:
      name:
        type: string
        required: True

      runner:
        type: string
        required: True

      target_devices:
        type: string
        required: False
      extra_cmake_args:
        type: string
        required: False
      tests_selector:
        description: |
          Two possible options: "e2e" and "cts".
        type: string
        default: "e2e"

      extra_lit_opts:
        description: |
          Extra options to be added to LIT_OPTS.
        type: string
        default: ''

      repo_ref:
        type: string
        required: False
        description: |
          Commit SHA or branch to checkout the intel/llvm repo.
      devops_ref:
        type: string
        required: False
        description: |
          Commit SHA or branch to checkout the devops directory.
      tests_ref:
        type: string
        required: False
        description: Commit SHA or branch to checkout e2e/cts tests.

      sycl_toolchain_artifact:
        type: string
        default: 'sycl_windows_default'
        required: False
      sycl_toolchain_archive:
        type: string
        default: ''
        required: False

      env:
        type: string
        default: '{}'
        required: False

      compiler:
        type: string
        required: false
        default: "cl"

      e2e_testing_mode:
        type: string
        default: "full"

      e2e_binaries_artifact:
        type: string
        default: ''
        required: False

      cts_testing_mode:
        description: |
          Testing mode to run SYCL-CTS in, can be either `full`, `build-only`
          or `run-only`. In `build-only` mode an artifact of the CTS binaries
          will be uploaded.
        type: string
        default: 'full'

      sycl_cts_artifact:
        type: string
        default: ''
        required: False
      artifact_retention_days:
        description: 'E2E/SYCL-CTS binaries artifact retention period.'
        type: string
        default: 1

permissions: read-all

jobs:
  run:
    name: ${{ inputs.name }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    environment: WindowsCILock
    env: ${{ fromJSON(inputs.env) }}
    steps:
    - name:  Detect hung tests
      if: always()
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/intel/llvm/refs/heads/sycl/devops/scripts/windows_detect_hung_tests.ps1" -OutFile "windows_detect_hung_tests.ps1" -Headers @{Authorization = "Bearer ${{ github.token }}"}
        powershell.exe -File windows_detect_hung_tests.ps1
        $exitCode = $LASTEXITCODE
        Remove-Item -Path "windows_detect_hung_tests.ps1"
        exit $exitCode
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          devops/actions
        ref: ${{ inputs.devops_ref|| inputs.repo_ref || github.sha }}
    - uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756
      with:
        arch: amd64
    - name: Setup oneAPI env
      uses: ./devops/actions/setup_windows_oneapi_env
      if: ${{ always() && !cancelled() && inputs.compiler == 'icx' }}
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Register cleanup after job is finished
      uses: ./devops/actions/cleanup
    - uses: actions/checkout@v4
      if: inputs.tests_selector == 'e2e'
      with:
        path: llvm
        ref: ${{ inputs.repo_ref || github.sha }}
        sparse-checkout: |
          llvm/utils/lit
          sycl/test-e2e          
    - name: Download compiler toolchain
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.sycl_toolchain_artifact }}
    - name: Extract SYCL toolchain
      shell: bash
      run: |
        mkdir install
        tar -xf ${{ inputs.sycl_toolchain_archive }} -C install
        rm ${{ inputs.sycl_toolchain_archive }}
    - name: Setup SYCL toolchain
      run: |
        echo "PATH=$env:GITHUB_WORKSPACE\\install\\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIB=$env:GITHUB_WORKSPACE\\install\\lib;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - run: |
        sycl-ls
    - run: |
        sycl-ls --verbose

    - name: Download E2E Binaries
      if: ${{ inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'run-only' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.e2e_binaries_artifact }}
    - name: Extract E2E Binaries
      if: ${{ inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'run-only' }}
      shell: bash
      run: |
        mkdir build-e2e
        tar -xf e2e_bin.tar.gz -C build-e2e

    - name: Configure E2E with Level Zero target
      if: inputs.tests_selector == 'e2e'
      shell: cmd
      run: |
        mkdir build-e2e
        cmake -GNinja -B build-e2e -S.\llvm\sycl\test-e2e -DSYCL_TEST_E2E_TARGETS="level_zero:gpu" -DCMAKE_CXX_COMPILER="clang++" -DLEVEL_ZERO_LIBS_DIR="D:\\github\\level-zero_win-sdk\\lib" -DLEVEL_ZERO_INCLUDE="D:\\github\\level-zero_win-sdk\\include" -DLLVM_LIT="..\\llvm\\llvm\\utils\\lit\\lit.py"

    - name: Keep track of files after configuring E2E step
      if: ${{ always() && inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'build-only' }}
      shell: bash
      run: ls build-e2e > e2econf_files.txt

    - name: Run End-to-End tests
      if: inputs.tests_selector == 'e2e'
      shell: bash {0}
      env:
        LIT_OPTS: -v --no-progress-bar --show-unsupported --show-pass --show-xfail --max-time ${{ inputs.e2e_testing_mode == 'run-only' && 1200 || 3600 }} --time-tests --param print_features=True --param test-mode=${{ inputs.e2e_testing_mode }} ${{ inputs.extra_lit_opts }}
      run: |
        # Run E2E tests.
        if [[ ${{inputs.compiler}} == 'icx' ]]; then
           export LIT_FILTER_OUT="compile_on_win_with_mdd"
        fi
        cmake --build build-e2e --target check-sycl-e2e > e2e.log 2>&1

        exit_code=$?
        cat e2e.log
        if [ $exit_code -ne 0 ]; then
          # This is duplicated between lin/win, updates must change both.
          awk '/^Failed Tests|Unexpectedly Passed Tests|Unresolved tests|Timed Out Tests|Testing Time/{flag=1}/FAILED: CMakeFiles/{flag=0}flag' e2e.log >> $GITHUB_STEP_SUMMARY
        fi
        exit $exit_code

    # Github CI doesn't support containers on Windows, so we cannot guarantee
    # that paths are the same between building and running systems. To avoid
    # CMake issues related to absolute paths we reconfigure the build-e2e
    # folder on the run system.
    - name: Remove E2E configuration files
      if: ${{ always() && inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'build-only' }}
      shell: bash
      run: |
        for FILE in $(cat e2econf_files.txt); do rm -r build-e2e/$FILE; done
        rm e2econf_files.txt

    - name: Pack E2E test binaries
      if: ${{ always() && !cancelled() && inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'build-only' }}
      shell: bash
      run: |
        tar -czf e2e_bin.tar.gz -C build-e2e .
    - name: Upload E2E test binaries
      if: ${{ always() && !cancelled() && inputs.tests_selector == 'e2e' && inputs.e2e_testing_mode == 'build-only' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.e2e_binaries_artifact }}
        path: e2e_bin.tar.gz
        retention-days: 3

    - name: Run SYCL CTS Tests
      if: inputs.tests_selector == 'cts'
      uses: ./devops/actions/run-tests/windows/cts
      with:
        ref: ${{ inputs.tests_ref || 'main' }}
        cts_exclude_ref: ${{ inputs.repo_ref }}
        extra_cmake_args: ${{ inputs.extra_cmake_args }}
        cts_testing_mode: ${{ inputs.cts_testing_mode }}
        sycl_cts_artifact: ${{ inputs.sycl_cts_artifact }}
        target_devices: ${{ inputs.target_devices }}
        retention-days: ${{ inputs.artifact_retention_days }}

    - name:  Detect hung tests
      if: always()
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/intel/llvm/refs/heads/sycl/devops/scripts/windows_detect_hung_tests.ps1" -OutFile "windows_detect_hung_tests.ps1" -Headers @{Authorization = "Bearer ${{ github.token }}"}
        powershell.exe -File windows_detect_hung_tests.ps1
        $exitCode = $LASTEXITCODE
        Remove-Item -Path "windows_detect_hung_tests.ps1"
        exit $exitCode
    - name: Cleanup
      shell: cmd
      if: always()
      run: |
        rmdir /q /s install
        if exist build-e2e rmdir /q /s build-e2e
