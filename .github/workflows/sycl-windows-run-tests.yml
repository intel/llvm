name: SYCL E2E

on:
  workflow_call:
    inputs:
      name:
        type: string
        required: True

      runner:
        type: string
        required: True

      target_devices:
        type: string
        required: False
      extra_cmake_args:
        type: string
        required: False
      tests_selector:
        description: |
          Two possible options: "e2e" and "cts".
        type: string
        default: "e2e"

      extra_lit_opts:
        description: |
          Extra options to be added to LIT_OPTS.
        type: string
        default: ''

      repo_ref:
        type: string
        required: False
        description: |
          Commit SHA or branch to checkout the intel/llvm repo.
      tests_ref:
        type: string
        required: False
        description: Commit SHA or branch to checkout e2e/cts tests.

      toolchain_artifact:
        type: string
        default: 'sycl_windows_default'
        required: False
      toolchain_artifact_filename:
        type: string
        default: ''
        required: False

      env:
        type: string
        default: '{}'
        required: False

      cxx:
        type: string
        required: false
        default: "cl"

      e2e_testing_mode:
        type: string
        default: "full"

      e2e_binaries_artifact:
        type: string
        default: ''
        required: False

      cts_testing_mode:
        description: |
          Testing mode to run SYCL-CTS in, can be either `full`, `build-only`
          or `run-only`. In `build-only` mode an artifact of the CTS binaries
          will be uploaded.
        type: string
        default: 'full'

      sycl_cts_artifact:
        type: string
        default: ''
        required: False
      artifact_retention_days:
        description: 'E2E/SYCL-CTS binaries artifact retention period.'
        type: string
        default: 1

permissions: read-all

jobs:
  run:
    name: ${{ inputs.name }}
    runs-on: ${{ fromJSON(inputs.runner) }}
    environment: WindowsCILock
    env: ${{ fromJSON(inputs.env) }}
    steps:
    - name:  Detect hung tests
      if: always()
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/intel/llvm/refs/heads/sycl/devops/scripts/windows_detect_hung_tests.ps1" -OutFile "windows_detect_hung_tests.ps1" -Headers @{Authorization = "Bearer ${{ github.token }}"}
        powershell.exe -File windows_detect_hung_tests.ps1
        $exitCode = $LASTEXITCODE
        Remove-Item -Path "windows_detect_hung_tests.ps1"
        exit $exitCode
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          devops/actions
          sycl/cts_exclude_filter
    - uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756
      with:
        arch: amd64
    - name: Setup oneAPI env
      uses: ./devops/actions/setup_windows_oneapi_env
      if: ${{ always() && !cancelled() && inputs.cxx == 'icx' }}
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Register cleanup after job is finished
      uses: ./devops/actions/cleanup
    - uses: actions/checkout@v4
      if: inputs.tests_selector == 'e2e'
      with:
        path: llvm
        ref: ${{ inputs.repo_ref || github.sha }}
        sparse-checkout: |
          llvm/utils/lit
          sycl/test-e2e          
    - name: Download compiler toolchain
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.toolchain_artifact }}
    - name: Extract SYCL toolchain
      shell: bash
      run: |
        mkdir install
        tar -xf ${{ inputs.toolchain_artifact_filename }} -C install
        rm ${{ inputs.toolchain_artifact_filename }}
    - name: Setup SYCL toolchain
      run: |
        echo "PATH=$env:GITHUB_WORKSPACE\\install\\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "LIB=$env:GITHUB_WORKSPACE\\install\\lib;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - run: |
        sycl-ls
    - run: |
        sycl-ls --verbose

    - name: Run E2E Tests
      if: inputs.tests_selector == 'e2e'
      uses: ./devops/actions/run-tests/windows/e2e
      timeout-minutes: 60
      with:
        ref: ${{ inputs.tests_ref || inputs.repo_ref || github.sha }}
        binaries_artifact: ${{ inputs.e2e_binaries_artifact }}
        testing_mode: ${{ inputs.e2e_testing_mode }}
        extra_cmake_args: ${{ inputs.extra_cmake_args }}
        target_devices: ${{ inputs.target_devices }}
        extra_lit_opts: ${{ inputs.extra_lit_opts }}
        retention-days: ${{ inputs.artifact_retention_days }}
        cxx: ${{ inputs.cxx }}

    - name: Run SYCL CTS Tests
      if: inputs.tests_selector == 'cts'
      uses: ./devops/actions/run-tests/windows/cts
      with:
        ref: ${{ inputs.tests_ref || 'main' }}
        extra_cmake_args: ${{ inputs.extra_cmake_args }}
        cts_testing_mode: ${{ inputs.cts_testing_mode }}
        sycl_cts_artifact: ${{ inputs.sycl_cts_artifact }}
        target_devices: ${{ inputs.target_devices }}
        retention-days: ${{ inputs.artifact_retention_days }}

    - name:  Detect hung tests
      if: always()
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/intel/llvm/refs/heads/sycl/devops/scripts/windows_detect_hung_tests.ps1" -OutFile "windows_detect_hung_tests.ps1" -Headers @{Authorization = "Bearer ${{ github.token }}"}
        powershell.exe -File windows_detect_hung_tests.ps1
        $exitCode = $LASTEXITCODE
        Remove-Item -Path "windows_detect_hung_tests.ps1"
        exit $exitCode
    - name: Cleanup
      shell: cmd
      if: always()
      run: |
        rmdir /q /s install
        if exist build-e2e rmdir /q /s build-e2e
