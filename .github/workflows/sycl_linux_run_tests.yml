name: SYCL E2E

on:
  workflow_call:
    inputs:
      name:
        type: string
        required: True

      runner:
        type: string
        required: True
      image:
        type: string
        required: True
      image_options:
        type: string
        required: True

      target_devices:
        type: string
        required: True
      extra_cmake_args:
        description: |
          If empty, then HIP_PLATFORM and AMD_ARCH would be automatically added
          if inputs.target_devices contains 'ext_oneapi_hip'
        type: string
        required: False
      tests_selector:
        description: |
          Two possible options: "e2e" and "cts".
        type: string
        default: "e2e"

      ref:
        type: string
        required: True
      merge_ref:
        description: |
          Commit-ish to merge post-checkout if non-empty. Must be reachable from
          the default_branch input paramter.
        type: string
        default: 'FETCH_HEAD'
        required: False

      sycl_toolchain_artifact:
        type: string
        default: ''
        required: False
      sycl_toolchain_archive:
        type: string
        default: ''
        required: False
      sycl_toolchain_decompress_command:
        type: string
        default: ''
        required: False

      reset_gpu:
        type: string
        required: False
      install_drivers:
        type: string
        required: False
      env:
        type: string
        default: '{}'
        required: False

  workflow_dispatch:
    inputs:
      runner:
        type: choice
        options:
          - '["Linux", "gen12"]'
          - '["amdgpu"]'
          - 'aws_cuda'
      image:
        description: |
          Use option ending with ":build" for AMDGPU/CUDA, ":latest" for the rest.
        type: choice
        options:
          - 'ghcr.io/intel/llvm/sycl_ubuntu2204_nightly:build'
          - 'ghcr.io/intel/llvm/sycl_ubuntu2204_nightly:latest'
      image_options:
        description: |
          Please select the option with "--device=/dev/kfd" for AMDGPU and with
          "--gpus all" for CUDA.
        type: choice
        options:
          - '-u 1001 --device=/dev/dri --privileged --cap-add SYS_ADMIN'
          - '-u 1001 --device=/dev/dri --device=/dev/kfd --privileged --cap-add SYS_ADMIN'
          - '-u 1001 --gpus all'
      target_devices:
        type: choice
        options:
          - 'opencl:cpu'
          - 'opencl:gpu'
          - 'opencl:acc'
          - 'ext_oneapi_level_zero:gpu'
          - 'ext_oneapi_hip:gpu'
          - 'ext_oneapi_cuda:gpu'
          - 'ext_intel_esimd_emulator:gpu'
      tests_selector:
        type: choice
        options:
          - e2e
          - cts

      env:
        description: |
          Suggested variables: for E2E tests - LIT_FILTER, LIT_FILTER_OUT.
          LIT_OPTS won't work as we redefine it as part of this workflow.

          For SYCL CTS - CTS_TEST_ARGS that will be passed as an argument to the
          test_all executable.

          Format: '{"VAR1":"VAL1","VAR2":"VAL2",...}'
        default: '{"LIT_FILTER":"Basic"}'

      install_drivers:
        type: choice
        options:
          - false
          - true

jobs:
  aws-start:
    if: ${{ inputs.runner == 'aws_cuda' }}
    runs-on: ubuntu-20.04
    environment: aws
    outputs:
      label: ${{ steps.aws_action_arg.outputs.LABEL }}
      arg: ${{ steps.aws_action_arg.outputs.ARG }}
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: devops/actions/aws-ec2
      - run: npm install ./devops/actions/aws-ec2
      - id: aws_action_arg
        run: |
          LABEL=aws_cuda-${{ inputs.tests_selector }}-${{ github.run_id }}-${{ github.run_attempt }}
          echo LABEL="$LABEL" >> $GITHUB_OUTPUT
          echo ARG="[{\"runs-on\":\"$LABEL\",\"aws-ami\":\"ami-01cb0573cb039ab24\",\"aws-type\":[\"g5.2xlarge\",\"g5.4xlarge\"],\"aws-disk\":\"/dev/sda1:64\",\"aws-spot\":\"false\"}]" >> $GITHUB_OUTPUT
      - uses: ./devops/actions/aws-ec2
        with:
          mode: start
          runs-on-list: ${{ steps.aws_action_arg.outputs.ARG }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  run:
    needs: [aws-start]
    if: |
      always() && !cancelled()
      && (needs.aws-start.result == 'success'
          || needs.aws-start.result == 'skipped')
    name: ${{ inputs.name }}
    runs-on: ${{ needs.aws-start.outputs.label || fromJSON(inputs.runner) }}
    container:
      image: ${{ inputs.image }}
      options: ${{ inputs.image_options }}
    env: ${{ fromJSON(inputs.env) }}
    steps:
    - name: Reset GPU
      if: inputs.reset_gpu == 'true'
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}
        sparse-checkout: |
          devops
    - name: Register cleanup after job is finished
      uses: ./devops/actions/cleanup
    - name: Checkout E2E tests
      if: inputs.tests_selector == 'e2e'
      uses: ./devops/actions/cached_checkout
      with:
        path: llvm
        ref: ${{ inputs.ref || github.sha }}
        merge_ref: ${{ inputs.merge_ref }}
        cache_path: "/__w/repo_cache/"
    - name: Checkout SYCL CTS tests
      if: inputs.tests_selector == 'cts'
      uses: ./devops/actions/cached_checkout
      with:
        path: khronos_sycl_cts
        repository: 'KhronosGroup/SYCL-CTS'
        ref: 'SYCL-2020'
        default_branch: 'SYCL-2020'
        cache_path: "/__w/repo_cache/"
    - name: SYCL CTS GIT submodules init
      if: inputs.tests_selector == 'cts'
      run: |
        git -C khronos_sycl_cts submodule update --init
    - name: Install drivers
      if: inputs.install_drivers == 'true'
      run: |
        # TODO install into image
        sudo apt install -yq jq
        sudo cp devops/scripts/get_release.py /opt/
        sudo -E devops/scripts/install_drivers.sh llvm/devops/dependencies.json --all
    - name: Install drivers (deprecated CI interface)
      if: env.compute_runtime_tag != '' && inputs.install_drivers != 'true'
      run: |
        if [ -e /opt/install_drivers.sh ]; then
          # TODO pack this script into container
          sudo cp devops/scripts/get_release.py /opt/
          sudo -E /opt/install_drivers.sh --all
        fi
    - name: Source OneAPI TBB vars.sh
      shell: bash
      run: |
        # https://github.com/actions/runner/issues/1964 prevents us from using
        # the ENTRYPOINT in the image.
        env | sort > env_before
        if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
          source /runtimes/oneapi-tbb/env/vars.sh;
        elif [ -e /opt/runtimes/oneapi-tbb/env/vars.sh ]; then
          source /opt/runtimes/oneapi-tbb/env/vars.sh;
        else
          echo "no TBB vars in /opt/runtimes or /runtimes";
        fi
        env | sort > env_after
        comm -13 env_before env_after >> $GITHUB_ENV
        rm env_before env_after
    - name: Download SYCL toolchain
      if: inputs.sycl_toolchain_artifact != ''
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.sycl_toolchain_artifact }}
    - name: Extract/Setup SYCL toolchain
      if: inputs.sycl_toolchain_artifact != ''
      run: |
        mkdir toolchain
        tar -I '${{ inputs.sycl_toolchain_decompress_command }}' -xf ${{ inputs.sycl_toolchain_archive }} -C toolchain
        rm -f ${{ inputs.sycl_toolchain_archive }}
        echo PATH=$PWD/toolchain/bin/:$PATH >> $GITHUB_ENV
        echo LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH >> $GITHUB_ENV
    - run: which clang++ sycl-ls
    - run: sycl-ls --verbose
    - run: SYCL_PI_TRACE=-1 sycl-ls

    - name: Deduce E2E CMake options
      if: inputs.tests_selector == 'e2e'
      id: cmake_opts
      shell: bash
      env:
        CMAKE_EXTRA_ARGS: ${{ inputs.extra_cmake_args }}
      run: |
        if [ -n "$CMAKE_EXTRA_ARGS" ]; then
          echo "opts=$CMAKE_EXTRA_ARGS" >> $GITHUB_OUTPUT
        else
          if [ "${{ contains(inputs.target_devices, 'ext_oneapi_hip')  }}" == "true" ]; then
            echo 'opts=-DHIP_PLATFORM="AMD" -DAMD_ARCH="gfx1031"' >> $GITHUB_OUTPUT
          else
            echo 'opts=' >> $GITHUB_OUTPUT
          fi
        fi
    - name: Configure E2E tests
      if: inputs.tests_selector == 'e2e'
      run: |
        cmake -GNinja -B./build-e2e -S./llvm/sycl/test-e2e -DSYCL_TEST_E2E_TARGETS="${{ inputs.target_devices }}" -DCMAKE_CXX_COMPILER="$(which clang++)" -DLLVM_LIT="$PWD/llvm/llvm/utils/lit/lit.py" ${{ steps.cmake_opts.outputs.opts }}
    - name: SYCL End-to-end tests
      if: inputs.tests_selector == 'e2e'
      env:
        LIT_OPTS: -v --no-progress-bar --show-unsupported --show-pass --show-xfail --max-time 3600 --time-tests
      run: |
        ninja -C build-e2e check-sycl-e2e

    - name: Build SYCL CTS tests
      if: inputs.tests_selector == 'cts'
      env:
        CMAKE_EXTRA_ARGS: ${{ inputs.extra_cmake_args }}
      run: |
        cmake -GNinja -B./build-cts -S./khronos_sycl_cts -DCMAKE_CXX_COMPILER=$(which clang++) \
        -DSYCL_IMPLEMENTATION=DPCPP \
        -DSYCL_CTS_EXCLUDE_TEST_CATEGORIES="$PWD/devops/cts_exclude_filter" \
        -DSYCL_CTS_ENABLE_OPENCL_INTEROP_TESTS=OFF \
        -DSYCL_CTS_MEASURE_BUILD_TIMES=ON \
        -DDPCPP_INSTALL_DIR="$$(dirname (which clang++))/.." \
        $CMAKE_EXTRA_ARGS
        ninja -C build-cts
    - name: Run SYCL CTS tests
      if: inputs.tests_selector == 'cts'
      env:
        ONEAPI_DEVICE_SELECTOR: ${{ inputs.target_devices }}
      run: |
        ./build-cts/bin/test_all --list-devices
        ./build-cts/bin/test_all $CTS_TEST_ARGS

  aws-stop:
    needs: [aws-start, run]
    if: ${{ always() && inputs.runner == 'aws_cuda' }}
    runs-on: ubuntu-20.04
    environment: aws
    outputs:
      label: ${{ steps.aws_action_arg.outputs.LABEL }}
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: devops/actions/aws-ec2
      - run: npm install ./devops/actions/aws-ec2
      - uses: ./devops/actions/aws-ec2
        with:
          mode: stop
          runs-on-list: ${{ needs.aws-start.outputs.arg }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
