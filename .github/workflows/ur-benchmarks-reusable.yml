name: Benchmarks Reusable

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  bench-run:
    name: Build SYCL, Run Benchmarks
    strategy:
      matrix:
        adapter: [
          {str_name: "level_zero",
          sycl_config: ""
          }
        ]
        build_type: [Release]
        compiler: [{c: clang, cxx: clang++}]

    runs-on: "PVC_PERF"

    steps:
    - name: Checkout SYCL
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        path: sycl-repo

    # TODO: As long as we didn't merge this workflow into main, we should allow both scripts location
    - name: Establish bench scripts location
      run: |
        if [ -d "${{github.workspace}}/sycl-repo/devops/scripts/benchmarks" ]; then
          echo "Bench scripts are in devops/scripts"
          echo "BENCH_SCRIPTS_DIR=${{github.workspace}}/sycl-repo/devops/scripts/benchmarks" >> $GITHUB_ENV
        elif [ -d "${{github.workspace}}/sycl-repo/unified-runtime/scripts/benchmarks" ]; then
          echo "Bench scripts are in unified-runtime/scripts"
          echo "BENCH_SCRIPTS_DIR=${{github.workspace}}/sycl-repo/unified-runtime/scripts/benchmarks" >> $GITHUB_ENV
        else
          echo "Bench scripts are absent...?"
          exit 1
        fi

    - name: Create virtual environment
      run: python -m venv .venv

    - name: Activate virtual environment and install pip packages
      run: |
        source .venv/bin/activate
        pip install -r ${BENCH_SCRIPTS_DIR}/requirements.txt

    - name: Configure SYCL
      run: >
        python3 sycl-repo/buildbot/configure.py
        -t ${{matrix.build_type}}
        -o ${{github.workspace}}/sycl_build
        --cmake-gen "Ninja"
        --cmake-opt="-DLLVM_INSTALL_UTILS=ON"
        --cmake-opt="-DSYCL_PI_TESTS=OFF"
        --cmake-opt=-DCMAKE_C_COMPILER_LAUNCHER=ccache
        --cmake-opt=-DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        ${{matrix.adapter.sycl_config}}

    - name: Build SYCL
      run: cmake --build ${{github.workspace}}/sycl_build -j $(nproc)

    # We need a complete installed UR for compute-benchmarks.
    - name: Configure UR
      run: >
        cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -S${{github.workspace}}/sycl-repo/unified-runtime
        -B${{github.workspace}}/ur_build
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/ur_install
        -DUR_BUILD_TESTS=OFF
        -DUR_BUILD_ADAPTER_L0=ON
        -DUR_BUILD_ADAPTER_L0_V2=ON
        -DUMF_DISABLE_HWLOC=ON

    - name: Build UR
      run: cmake --build ${{github.workspace}}/ur_build -j $(nproc)

    - name: Install UR
      run: cmake --install ${{github.workspace}}/ur_build

    - name: Compute core range
      run: |
        # Compute the core range for the first NUMA node; second node is for UMF jobs.
        # Skip the first 4 cores - the kernel is likely to schedule more work on these.
        CORES="$(lscpu | awk '
          /NUMA node0 CPU|On-line CPU/ {line=$0}
          END {
            split(line, a, " ")
            split(a[4], b, ",")
            sub(/^0/, "4", b[1])
            print b[1]
          }')"
        echo "Selected core: $CORES"
        echo "CORES=$CORES" >> $GITHUB_ENV

        ZE_AFFINITY_MASK=0
        echo "ZE_AFFINITY_MASK=$ZE_AFFINITY_MASK" >> $GITHUB_ENV

    - name: Run benchmarks
      working-directory: ${{ github.workspace }}
      id: benchmarks
      run: >
        source .venv/bin/activate &&
        taskset -c "${{ env.CORES }}" ${BENCH_SCRIPTS_DIR}/main.py
        ~/llvm_bench_workdir
        --sycl ${{ github.workspace }}/sycl_build
        --adapter ${{ matrix.adapter.str_name }}
        --compare baseline
        --compute-runtime ${{ inputs.compute_runtime_commit }}
        --build-igc
