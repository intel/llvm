name: sycl-bench build and test workflow

on:
  workflow_call:
    inputs:
      repository_owner:
        type: string
        required: false
        default: 'unisa-hpc'
      ref:
        type: string
        required: false

      build_image:
        type: string
        required: false
        default: 'ghcr.io/intel/llvm/ubuntu2204_build:latest'
      build_cache_root:
        type: string
        required: false
      build_cache_suffix:
        type: string
        required: false
        default: 'default'
      build_configure_extra_args:
        type: string
        required: false
      build_sycl_impl:
        type: string
        required: false
        default: 'LLVM'
      build_benchmarks_list:
        description: 'List of benchmarks to build'
        type: string
        required: false
        default: 'all'

      sycl_toolchain_artifact:
        type: string
        required: true
      sycl_toolchain_archive:
        type: string
        required: true
      sycl_toolchain_decompress_command:
        type: string
        required: true

      artifact_archive_name:
        type: string
        required: false
        default: 'sycl_bench.tar.zst'
      retention-days:
        description: 'Artifacts retention period'
        type: string
        default: 10

jobs:
  build:
    runs-on: [Linux, build]
    container:
      image: ${{ inputs.build_image }}
      options: -u 1001:1001
    outputs:
      build_conclusion: ${{ steps.build.conclusion }}
      artifact_decompress_command: ${{ steps.artifact_info.outputs.DECOMPRESS }}
    env:
      CCACHE_DIR: ${{ inputs.build_cache_root }}/build_cache_${{ inputs.build_cache_suffix }}
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Install Ninja
        uses: llvm/actions/install-ninja@main
      - name: Download SYCL toolchain [workflow_call]
        uses: actions/github-script@v6
        with:
          script: |
            const name = '${{ inputs.sycl_toolchain_artifact }}'
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == name
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/` + name + '.zip', Buffer.from(download.data));
      - name: Unzip artifact [workflow_call]
        run: |
          unzip ${{ inputs.sycl_toolchain_artifact }}.zip
          rm ${{ inputs.sycl_toolchain_artifact }}.zip
      - name: Extract/Setup SYCL toolchain
        run: |
          mkdir toolchain
          tar -I '${{ inputs.sycl_toolchain_decompress_command }}' -xf ${{ inputs.sycl_toolchain_archive }} -C toolchain
          rm -f ${{ inputs.sycl_toolchain_archive }}
          echo PATH=$PWD/toolchain/bin/:$PATH >> $GITHUB_ENV
          echo LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH >> $GITHUB_ENV
          which clang++ sycl-ls
          sycl-ls --verbose
          SYCL_PI_TRACE=-1 sycl-ls
      - name: Checkout sycl-bench
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository_owner }}/sycl-bench
          ref: ${{ inputs.ref }}
      - name: Configure sycl-bench
        run: |
          cmake -GNinja -B "sycl-mlir/build" -DCMAKE_CXX_COMPILER=clang++ \
            -DSYCL_IMPL=${{ inputs.build_sycl_impl }} ${{ inputs.build_configure_extra_args }} \
            -DCMAKE_CXX_LAUNCHER=ccache
      - name: Build sycl-bench
        id: build
        run: |
          cmake --build build --target join(' ', ${{ inputs.build_benchmarks_list }})
      - name: Deduce artifact archive params
        id: artifact_info
        if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
        run: |
          NAME="${{inputs.artifact_archive_name}}"
          if [ -z "$NAME" ]; then
            NAME=llvm_sycl.tar.zst
          fi
          echo ARCHIVE_NAME="$NAME" >> $GITHUB_OUTPUT
          if [ "${NAME}" != "${NAME%.tar.gz}" ]; then
            echo COMPRESS="gzip" >> $GITHUB_OUTPUT
            echo DECOMPRESS="gunzip" >> $GITHUB_OUTPUT
          elif [ "${NAME}" != "${NAME%.tar.zst}" ]; then
            echo COMPRESS="zstd -9" >> $GITHUB_OUTPUT
            echo DECOMPRESS="zstd" >> $GITHUB_OUTPUT
          else
            echo "Unsupported extension"
            exit 1
          fi
      - name: Pack benchmarks
        if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
        run: |
          tar -I '${{ steps.artifact_info.outputs.COMPRESS }}' -cf ${{ steps.artifact_info.outputs.ARCHIVE_NAME }} -C $GITHUB_WORKSPACE/build/install .
      - name: Upload toolchain
        if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: sycl_linux_${{ inputs.build_artifact_suffix }}
          path: ${{ steps.artifact_info.outputs.ARCHIVE_NAME }}
          retention-days: ${{ inputs.retention-days }}
