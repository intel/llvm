name: Reusable SYCL Linux build and test workflow

on:
  workflow_call:
    inputs:
      cc:
        type: string
        required: false
        default: "gcc"
      cxx:
        type: string
        required: false
        default: "g++"
      build_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"
      build_ref:
        type: string
        required: false
      build_cache_root:
        type: string
        required: true
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 8G
      build_configure_extra_args:
        type: string
        required: false
        default: "--hip --cuda --enable-esimd-emulator"
      build_artifact_suffix:
        type: string
        required: true
      intel_drivers_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_intel_drivers:unstable"
      lts_config:
        type: string
        required: false
        default: ""
      lts_cmake_extra_args:
        type: string
        required: false
        default: ""
      amdgpu_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"
      lts_ref:
        type: string
        required: false
        default: 'intel'
      max_parallel:
        type: number
        required: false
        default: 4

jobs:
  build:
    name: Build + LIT
    runs-on: [Linux, build]
    container:
      image: ${{ inputs.build_image }}
      options: -u 1001:1001
    steps:
    # GHA requires relative paths for actions. Copy actions from container root
    # to CWD.
    - run: cp -r /actions .
    # Cleanup will be run after all actions are completed.
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - uses: ./actions/cached_checkout
      with:
        path: src
        ref: ${{ inputs.build_ref || github.ref }}
        cache_path: "/__w/repo_cache/"
    - name: Configure
      env:
        CC: ${{ inputs.cc }}
        CXX: ${{ inputs.cxx }}
        CACHE_ROOT: ${{ inputs.build_cache_root }}
        CACHE_SUFFIX: ${{ inputs.build_cache_suffix }}
        CACHE_SIZE: ${{ inputs.build_cache_size }}
        ARGS: ${{ inputs.build_configure_extra_args }}
        CUDA_LIB_PATH: "/usr/local/cuda/lib64/stubs"
      run: |
        mkdir -p $CACHE_ROOT/build_cache_$CACHE_SUFFIX
        mkdir -p $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        python3 $GITHUB_WORKSPACE/src/buildbot/configure.py -w $GITHUB_WORKSPACE \
          -s $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t Release \
          --ci-defaults $ARGS \
          --cmake-opt="-DLLVM_CCACHE_BUILD=ON" \
          --cmake-opt="-DLLVM_CCACHE_DIR=$CACHE_ROOT/build_cache_$CACHE_SUFFIX" \
          --cmake-opt="-DLLVM_CCACHE_MAXSIZE=$CACHE_SIZE" \
          --cmake-opt="-DLLVM_INSTALL_UTILS=ON" \
          --cmake-opt="-DSYCL_PI_TESTS=OFF"
    - name: Compile
      id: build
      run: cmake --build $GITHUB_WORKSPACE/build
    # TODO allow to optionally disable in-tree checks
    - name: check-llvm
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-llvm
    - name: check-clang
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        export XDG_CACHE_HOME=$GITHUB_WORKSPACE/os_cache
        cmake --build $GITHUB_WORKSPACE/build --target check-clang
    - name: check-sycl
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        # TODO consider moving this to Dockerfile
        export LD_LIBRARY_PATH=/usr/local/cuda/compat/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        cmake --build $GITHUB_WORKSPACE/build --target check-sycl
    - name: check-llvm-spirv
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-llvm-spirv
    - name: check-xptifw
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-xptifw
    - name: check-libclc
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-libclc
    - name: Install
      # TODO replace utility installation with a single CMake target
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target deploy-sycl-toolchain
        cmake --build $GITHUB_WORKSPACE/build --target utils/FileCheck/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/count/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/not/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/lit/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/llvm-lit/install
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-format
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-tidy
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-size
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-cov
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-profdata
        cmake --build $GITHUB_WORKSPACE/build --target install-compiler-rt
        # TODO this should be resolved in CMakeLists.txt
        cmake --build $GITHUB_WORKSPACE/build --target install-lld || echo "skipped"

    - name: Pack toolchain
      run: tar -cJf llvm_sycl.tar.xz -C $GITHUB_WORKSPACE/build/install .
    - name: Pack LIT
      run: tar -cJf lit.tar.xz -C $GITHUB_WORKSPACE/src/llvm/utils/lit .
    - name: Upload toolchain
      uses: actions/upload-artifact@v2
      with:
        name: sycl_linux_${{ inputs.build_artifact_suffix }}
        path: llvm_sycl.tar.xz
    - name: Upload LIT
      uses: actions/upload-artifact@v2
      with:
        name: sycl_lit_${{ inputs.build_artifact_suffix }}
        path: lit.tar.xz

  # This job generates matrix of tests for LLVM Test Suite
  resolve_matrix:
    name: Resolve Test Matrix
    runs-on: ubuntu-latest
    outputs:
      lts: ${{ steps.work.outputs.lts }}
    steps:
    - name: Download scripts
      run: |
        wget raw.githubusercontent.com/intel/llvm/${{ github.sha }}/devops/scripts/generate_test_matrix.js
        wget raw.githubusercontent.com/intel/llvm/${{ github.sha }}/devops/test_configs.json
    - id: work
      uses: actions/github-script@v6
      name: Generate matrix
      env:
        GHA_INPUTS: ${{ toJSON(inputs) }}
      with:
        script: |
          const script = require('./generate_test_matrix.js');
          script({core, process});

  llvm_test_suite:
    needs: [build, resolve_matrix]
    if: ${{ inputs.lts_config != '' }}
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        include: ${{ fromJSON(needs.resolve_matrix.outputs.lts) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    container:
      image: ${{ matrix.image }}
      options: ${{ matrix.container_options }}
    steps:
    - name: Reset GPU
      if: ${{ contains(matrix.config, 'gen9') }}
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - run: cp -r /actions .
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    # FIXME cached_checkout fails here, but works everywhere else
    - uses: actions/checkout@v2
      with:
        path: llvm
    # TODO should this action be packed into container as well?
    - uses: ./llvm/devops/actions/llvm_test_suite
      name: Run LLVM Test Suite
      with:
        test_ref: ${{ inputs.lts_ref }}
        sycl_artifact: sycl_linux_${{ inputs.build_artifact_suffix }}
        sycl_archive: llvm_sycl.tar.xz
        lit_artifact: sycl_lit_${{ inputs.build_artifact_suffix }}
        lit_archive: lit.tar.xz
        check_sycl_all: ${{ matrix.check_sycl_all }}
        results_name_suffix: ${{ matrix.config }}_${{ inputs.build_artifact_suffix }}
        cmake_args: '${{ matrix.cmake_args }} ${{ inputs.lts_cmake_extra_args }}'

