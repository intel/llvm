name: Reusable SYCL Linux build and test workflow

on:
  workflow_call:
    inputs:
      cc:
        type: string
        required: false
        default: "gcc"
      cxx:
        type: string
        required: false
        default: "g++"
      build_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"
      build_ref:
        type: string
        required: false
      build_cache_root:
        type: string
        required: true
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 8G
      build_configure_extra_args:
        type: string
        required: false
        default: "--hip --cuda --enable-esimd-emulator"
      build_artifact_suffix:
        type: string
        required: true
      lts_matrix:
        type: string
        required: false
        default: "[]"
      lts_aws_matrix:
        type: string
        required: false
        default: "[]"
      lts_cmake_extra_args:
        type: string
        required: false
        default: ""
      lts_ref:
        type: string
        required: false
        default: 'intel'
      max_parallel:
        type: number
        required: false
        default: 4
      cts_matrix:
        type: string
        required: false
        default: ""
      cts_cmake_extra_args:
        type: string
        required: false
        default: ""
      cts_ref:
        type: string
        required: false
        default: 'SYCL-2020'

jobs:
  build:
    name: Build + LIT
    runs-on: [Linux, build]
    container:
      image: ${{ inputs.build_image }}
      options: -u 1001:1001
    steps:
    # GHA requires relative paths for actions. Copy actions from container root
    # to CWD.
    - run: cp -r /actions .
    # Cleanup will be run after all actions are completed.
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - uses: ./actions/cached_checkout
      with:
        path: src
        ref: ${{ inputs.build_ref || github.ref }}
        cache_path: "/__w/repo_cache/"
        default_branch: sycl-mlir
    - name: Configure
      env:
        CC: ${{ inputs.cc }}
        CXX: ${{ inputs.cxx }}
        CACHE_ROOT: ${{ inputs.build_cache_root }}
        CACHE_SUFFIX: ${{ inputs.build_cache_suffix }}
        CACHE_SIZE: ${{ inputs.build_cache_size }}
        ARGS: ${{ inputs.build_configure_extra_args }}
        CUDA_LIB_PATH: "/usr/local/cuda/lib64/stubs"
      run: |
        mkdir -p $CACHE_ROOT/build_cache_$CACHE_SUFFIX
        mkdir -p $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        python3 $GITHUB_WORKSPACE/src/buildbot/configure.py -w $GITHUB_WORKSPACE \
          -s $GITHUB_WORKSPACE/src -o $GITHUB_WORKSPACE/build -t Release \
          --ci-defaults $ARGS \
          --cmake-opt="-DLLVM_CCACHE_BUILD=ON" \
          --cmake-opt="-DLLVM_CCACHE_DIR=$CACHE_ROOT/build_cache_$CACHE_SUFFIX" \
          --cmake-opt="-DLLVM_CCACHE_MAXSIZE=$CACHE_SIZE" \
          --cmake-opt="-DLLVM_INSTALL_UTILS=ON" \
          --cmake-opt="-DSYCL_PI_TESTS=OFF"
    - name: Compile
      id: build
      run: cmake --build $GITHUB_WORKSPACE/build --target deploy-sycl-toolchain
    # TODO allow to optionally disable in-tree checks
    - name: check-mlir-sycl
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-mlir-sycl
    - name: check-cgeist
      shell: bash
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
          source /runtimes/oneapi-tbb/env/vars.sh;
        fi
        cmake --build $GITHUB_WORKSPACE/build --target check-cgeist
    - name: check-polygeist-opt
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target check-polygeist-opt
    - name: Install
      # TODO replace utility installation with a single CMake target
      run: |
        cmake --build $GITHUB_WORKSPACE/build --target deploy-sycl-toolchain
        cmake --build $GITHUB_WORKSPACE/build --target utils/FileCheck/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/count/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/not/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/lit/install
        cmake --build $GITHUB_WORKSPACE/build --target utils/llvm-lit/install
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-format
        cmake --build $GITHUB_WORKSPACE/build --target install-clang-tidy
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-size
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-cov
        cmake --build $GITHUB_WORKSPACE/build --target install-llvm-profdata
        cmake --build $GITHUB_WORKSPACE/build --target install-compiler-rt

    - name: Pack toolchain
      run: tar -cJf llvm_sycl.tar.xz -C $GITHUB_WORKSPACE/build/install .
    - name: Pack LIT
      run: tar -cJf lit.tar.xz -C $GITHUB_WORKSPACE/src/llvm/utils/lit .
    - name: Upload toolchain
      uses: actions/upload-artifact@v3
      with:
        name: sycl_linux_${{ inputs.build_artifact_suffix }}
        path: llvm_sycl.tar.xz
    - name: Upload LIT
      uses: actions/upload-artifact@v3
      with:
        name: sycl_lit_${{ inputs.build_artifact_suffix }}
        path: lit.tar.xz

  aws-start:
    name: Start AWS
    needs: build
    if: ${{ inputs.lts_aws_matrix != '[]' }}
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Setup script
        run: |
          mkdir -p ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/action.yml   -P ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/aws-ec2.js   -P ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/package.json -P ./aws-ec2
          npm install ./aws-ec2
      - name: Start AWS EC2 runners
        uses: ./aws-ec2
        with:
          runs-on-list: ${{ inputs.lts_aws_matrix }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  llvm_test_suite:
    needs: [build, aws-start]
    if: ${{ !failure() && inputs.lts_matrix != '[]' }}
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        include: ${{ fromJSON(inputs.lts_matrix) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    env: ${{ matrix.env }}
    container:
      image: ${{ matrix.image }}
      options: ${{ matrix.container_options }}
    steps:
    - name: Reset GPU
      if: ${{ contains(matrix.config, 'gen9') }}
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - run: cp -r /actions .
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - name: Install drivers
      if: env.compute_runtime_tag != ''
      run: |
        if [ -e /opt/install_drivers.sh ]; then
          # TODO pack this script into container
          wget raw.githubusercontent.com/intel/llvm/${{ github.sha }}/devops/scripts/get_release.py
          sudo mv get_release.py /opt/
          sudo -E /opt/install_drivers.sh --all
        fi
    # FIXME cached_checkout fails here, but works everywhere else
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        path: llvm
    # TODO should this action be packed into container as well?
    - uses: ./llvm/devops/actions/llvm_test_suite
      name: Run LLVM Test Suite
      with:
        test_ref: ${{ inputs.lts_ref }}
        sycl_artifact: sycl_linux_${{ inputs.build_artifact_suffix }}
        sycl_archive: llvm_sycl.tar.xz
        lit_artifact: sycl_lit_${{ inputs.build_artifact_suffix }}
        lit_archive: lit.tar.xz
        check_sycl_all: ${{ matrix.check_sycl_all }}
        results_name_suffix: ${{ matrix.config }}_${{ inputs.build_artifact_suffix }}
        cmake_args: '${{ matrix.cmake_args }} ${{ inputs.lts_cmake_extra_args }}'
  
  khronos_sycl_cts:
    needs: build
    if: ${{ inputs.cts_matrix != '' }}
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        include: ${{ fromJSON(inputs.cts_matrix) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    env: ${{ matrix.env }}
    container:
      image: ${{ matrix.image }}
      options: ${{ matrix.container_options }}
    steps:
    - name: Reset GPU
      if: ${{ contains(matrix.config, 'gen9') }}
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - run: cp -r /actions .
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - name: Install drivers
      if: env.compute_runtime_tag != ''
      run: |
        if [ -e /opt/install_drivers.sh ]; then
          # TODO pack this script into container
          wget raw.githubusercontent.com/intel/llvm/${{ github.sha }}/devops/scripts/get_release.py
          sudo mv get_release.py /opt/
          sudo -E /opt/install_drivers.sh --all
        fi
    # FIXME cached_checkout fails here, but works everywhere else
    # TODO: figure out if we remove this action
    - uses: actions/checkout@v3
      with:
        path: llvm
    # TODO should this action be packed into container as well?
    - uses: ./llvm/devops/actions/khronos_cts_test
      name: Run Khronos SYCL CTS
      with:
        test_ref: ${{ inputs.cts_ref }}
        sycl_artifact: sycl_linux_${{ inputs.build_artifact_suffix }}
        sycl_archive: llvm_sycl.tar.xz
        sycl_device_filter: ${{ matrix.sycl_device_filter }}
        cmake_args: '${{ matrix.cmake_args }} ${{ inputs.cts_cmake_extra_args }}'

  aws-stop:
    name: Stop AWS
    needs: [ aws-start, llvm_test_suite ]
    if: ${{ always() && inputs.lts_aws_matrix != '[]' }}
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Setup script
        run: |
          mkdir -p ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/action.yml   -P ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/aws-ec2.js   -P ./aws-ec2
          wget raw.githubusercontent.com/intel/llvm/sycl/devops/actions/aws-ec2/package.json -P ./aws-ec2
          npm install ./aws-ec2
      - name: Stop AWS EC2 runners
        uses: ./aws-ec2
        with:
          runs-on-list: ${{ inputs.lts_aws_matrix }}
          mode: stop
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
