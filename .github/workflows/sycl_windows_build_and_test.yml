name: SYCL Windows Test

on:
  workflow_call:
    inputs:
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_ref:
        type: string
        required: false
      lts_matrix:
        type: string
        required: false
        default: "[]"
      lts_cmake_extra_args:
        type: string
        required: false
        default: ""
      check_llvm:
        type: string
        required: false
        default: 'true'
      check_clang:
        type: string
        required: false
        default: 'true'
      check_sycl:
        type: string
        required: false
        default: 'true'
      check_llvm_spirv:
        type: string
        required: false
        default: 'true'
      check_xptifw:
        type: string
        required: false
        default: 'true'
      check_libclc:
        type: string
        required: false
        default: 'true'
      check_libdevice:
        type: string
        required: false
        default: 'true'

jobs:
  build:
    name: Build + LIT
    runs-on: [Windows, build]
    strategy:
      matrix:
        include: ${{ fromJSON(inputs.lts_matrix) }}
    # TODO use cached checkout
    steps:
    - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
      with:
        arch: amd64
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "SCCACHE_DIR=D:\github\_work\cache\${{ inputs.build_cache_suffix }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: actions/checkout@v3
      with:
        path: src
        ref: ${{ inputs.build_ref || github.sha }}
        fetch-depth: 1
    - name: Register cleanup after job is finished
      uses: ./src/devops/actions/cleanup
    - name: Configure
      shell: cmd
      # TODO switch to clang-cl and lld when this is fixed https://github.com/oneapi-src/level-zero/issues/83
      run: |
        mkdir build
        mkdir install
        IF NOT EXIST D:\github\_work\cache MKDIR D:\github\_work\cache
        IF NOT EXIST D:\github\_work\cache\${{inputs.build_cache_suffix}} MKDIR D:\github\_work\cache\${{inputs.build_cache_suffix}}
        python.exe src/buildbot/configure.py -o build ^
          --ci-defaults ^
          --cmake-opt="-DCMAKE_C_COMPILER=cl" ^
          --cmake-opt="-DCMAKE_CXX_COMPILER=cl" ^
          --cmake-opt="-DCMAKE_INSTALL_PREFIX=%GITHUB_WORKSPACE%\install" ^
          --cmake-opt="-DCMAKE_CXX_COMPILER_LAUNCHER=sccache" ^
          --cmake-opt="-DCMAKE_C_COMPILER_LAUNCHER=sccache" ^
          --cmake-opt="-DLLVM_INSTALL_UTILS=ON"
    - name: Build
      id: build
      shell: bash
      run: |
        cmake --build build --target sycl-toolchain
    - name: check-llvm
      shell: bash
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_llvm == 'true' }}
      run: |
        cmake --build build --target check-llvm
    - name: check-clang
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_clang == 'true' }}
      shell: bash
      run: |
        cmake --build build --target check-clang
    - name: check-sycl
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_sycl == 'true' }}
      shell: bash
      run: |
        cmake --build build --target check-sycl
    - name: check-llvm-spirv
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_llvm_spirv == 'true' }}
      shell: bash
      run: |
        cmake --build build --target check-llvm-spirv
    - name: check-xptifw
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_xptifw == 'true' }}
      shell: bash
      run: |
        cmake --build build --target check-xptifw
    - name: check-libdevice
      if: ${{ always() && !cancelled() && steps.build.outcome == 'success' && inputs.check_libdevice == 'true' }}
      shell: bash
      run: |
        cmake --build build --target check-libdevice
    - name: Install
      shell: bash
      # TODO replace utility installation with a single CMake target
      run: |
        cmake --build build --target deploy-sycl-toolchain
        cmake --build build --target utils/FileCheck/install
        cmake --build build --target utils/count/install
        cmake --build build --target utils/not/install
        cmake --build build --target utils/lit/install
        cmake --build build --target utils/llvm-lit/install
        cmake --build build --target install-llvm-size
        cmake --build build --target install-llvm-cov
        cmake --build build --target install-llvm-profdata
        cmake --build build --target install-compiler-rt
    - name: Pack toolchain
      shell: bash
      run: |
        tar -czf llvm_sycl.tar.gz -C install .
    - name: Upload toolchain
      uses: actions/upload-artifact@v3
      with:
        name: sycl_windows_default
        path: llvm_sycl.tar.gz

  e2e-tests:
    needs: build
    if: ${{ inputs.lts_matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.lts_matrix) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    env: ${{ matrix.env }}
    steps:
    - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
      with:
        arch: amd64
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # TODO: use cached_checkout
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: ${{ inputs.build_ref || github.sha }}
        path: llvm
    - name: Register cleanup after job is finished
      uses: ./llvm/devops/actions/cleanup
    - uses: ./llvm/devops/actions/e2e-tests-win
      name: Run SYCL End-to-End tests
      with:
        sycl_artifact: sycl_windows_default
        targets: ${{ matrix.targets }}
        cmake_args: '${{ matrix.cmake_args }} ${{ inputs.lts_cmake_extra_args }}'
