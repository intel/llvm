name: SYCL Windows Test

on:
  workflow_call:
    inputs:
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_ref:
        type: string
        required: false
      changes:
        type: string
        description: 'Filter matches for the changed files in the PR'
        default: '[llvm, clang, sycl, llvm_spirv, xptifw, libclc, libdevice]'
        required: false
      artifact_archive_name:
        type: string
        default: llvm_sycl.tar.gz
      retention-days:
        description: 'Artifacts retention period'
        type: string
        default: 3

jobs:
  build:
    name: Build + LIT
    runs-on: [Windows, build]
    # TODO use cached checkout
    outputs:
      build_conclusion: ${{ steps.build.conclusion }}
    steps:
    - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
      with:
        arch: amd64
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "SCCACHE_DIR=D:\github\_work\cache\${{ inputs.build_cache_suffix }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: actions/checkout@v3
      with:
        path: src
        ref: ${{ inputs.build_ref || github.sha }}
        fetch-depth: 1
    - name: Register cleanup after job is finished
      uses: ./src/devops/actions/cleanup
    - name: Configure
      shell: cmd
      # TODO switch to clang-cl and lld when this is fixed https://github.com/oneapi-src/level-zero/issues/83
      run: |
        mkdir build
        mkdir install
        IF NOT EXIST D:\github\_work\cache MKDIR D:\github\_work\cache
        IF NOT EXIST D:\github\_work\cache\${{inputs.build_cache_suffix}} MKDIR D:\github\_work\cache\${{inputs.build_cache_suffix}}
        python.exe src/buildbot/configure.py -o build ^
          --ci-defaults ^
          --cmake-opt="-DCMAKE_C_COMPILER=cl" ^
          --cmake-opt="-DCMAKE_CXX_COMPILER=cl" ^
          --cmake-opt="-DCMAKE_INSTALL_PREFIX=%GITHUB_WORKSPACE%\install" ^
          --cmake-opt="-DCMAKE_CXX_COMPILER_LAUNCHER=sccache" ^
          --cmake-opt="-DCMAKE_C_COMPILER_LAUNCHER=sccache" ^
          --cmake-opt="-DLLVM_INSTALL_UTILS=ON"
    - name: Build
      id: build
      shell: bash
      run: |
        cmake --build build --target sycl-toolchain
    - name: check-llvm
      if: always() && !cancelled() && contains(inputs.changes, 'llvm')
      run: |
        cmake --build build --target check-llvm
    - name: check-clang
      if: always() && !cancelled() && contains(inputs.changes, 'clang')
      run: |
        cmake --build build --target check-clang
    - name: check-sycl
      if: always() && !cancelled() && contains(inputs.changes, 'sycl')
      run: |
        cmake --build build --target check-sycl
    - name: check-llvm-spirv
      if: always() && !cancelled() && contains(inputs.changes, 'llvm_spirv')
      run: |
        cmake --build build --target check-llvm-spirv
    - name: check-xptifw
      if: always() && !cancelled() && contains(inputs.changes, 'xptifw')
      run: |
        cmake --build build --target check-xptifw
    - name: check-libdevice
      if: always() && !cancelled() && contains(inputs.changes, 'libdevice')
      run: |
        cmake --build build --target check-libdevice
    - name: Install
      if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
      shell: bash
      # TODO replace utility installation with a single CMake target
      run: |
        cmake --build build --target deploy-sycl-toolchain
        cmake --build build --target utils/FileCheck/install
        cmake --build build --target utils/count/install
        cmake --build build --target utils/not/install
        cmake --build build --target utils/lit/install
        cmake --build build --target utils/llvm-lit/install
        cmake --build build --target install-llvm-size
        cmake --build build --target install-llvm-cov
        cmake --build build --target install-llvm-profdata
        cmake --build build --target install-compiler-rt
    - name: Pack toolchain
      if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
      shell: bash
      run: |
        tar -czf ${{ inputs.artifact_archive_name }} -C install .
    - name: Upload toolchain
      if: ${{ always() && !cancelled() && steps.build.conclusion == 'success' }}
      uses: actions/upload-artifact@v3
      with:
        name: sycl_windows_default
        path: ${{ inputs.artifact_archive_name }}
        retention-days: ${{ inputs.retention-days }}

  e2e-tests:
    needs: build
    # Continue if build was successful.
    if: ${{ always() && needs.build.outputs.build_conclusion == 'success' }}
    name: SYCL E2E on Windows
    runs-on: [Windows, gen12]
    steps:
    - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
      with:
        arch: amd64
    - name: Set env
      run: |
        git config --system core.longpaths true
        git config --global core.autocrlf false
        echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # TODO: use cached_checkout
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: ${{ inputs.build_ref || github.sha }}
        path: llvm
    - name: Register cleanup after job is finished
      uses: ./llvm/devops/actions/cleanup
    - name: Download compiler toolchain
      uses: actions/download-artifact@v3
      with:
        name: sycl_windows_default
    - name: Extract SYCL toolchain
      shell: bash
      run: |
        mkdir install
        tar -xf ${{ inputs.artifact_archive_name }} -C install
        rm ${{ inputs.artifact_archive_name }}
    - name: Setup SYCL toolchain
      run: |
        echo "PATH=$env:GITHUB_WORKSPACE\\install\\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - run: |
        sycl-ls
    - run: |
        sycl-ls --verbose
    - name: Configure E2E with Level Zero target
      shell: cmd
      run: |
        mkdir build-e2e
        cmake -GNinja -B build-e2e -S.\llvm\sycl\test-e2e -DSYCL_TEST_E2E_TARGETS="ext_oneapi_level_zero:gpu" -DCMAKE_CXX_COMPILER="clang++" -DLEVEL_ZERO_LIBS_DIR="D:\github\level-zero_win-sdk\lib" -DLLVM_LIT="..\llvm\llvm\utils\lit\lit.py"
    - name: Run End-to-End tests
      shell: bash
      run: |
        # Run E2E tests.
        export LIT_OPTS="-v --no-progress-bar --show-unsupported --max-time 3600 --time-tests"
        cmake --build build-e2e --target check-sycl-e2e
    - name: Cleanup
      shell: cmd
      if: always()
      run: |
        rmdir /q /s install
        rmdir /q /s build-e2e
