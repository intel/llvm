name: SYCL Benchmarking

on:
  workflow_call:
    inputs:
      name:
        type: string
      runner:
        type: string
        required: True
      image:
        type: string
        required: True
      image_options:
        type: string
        required: True

      target_devices:
        type: string
        required: True

      ref:
        type: string
        required: True
      merge_ref:
        description: |
          Commit-ish to merge post-checkout if non-empty. Must be reachable from
          the default_branch input paramter.
        type: string
        default: 'FETCH_HEAD'
        required: False

      sycl_toolchain_artifact:
        type: string
        default: ''
        required: False
      sycl_toolchain_archive:
        type: string
        default: ''
        required: False
      sycl_toolchain_decompress_command:
        type: string
        default: ''
        required: False

      env:
        type: string
        default: '{}'
        required: False

      cache_results:
        type: boolean
        default: false
        required: false

  workflow_dispatch:
    inputs:
      runner:
        type: choice
        options:
          - '["Linux", "gen12"]'
          - '["amdgpu"]'
          - '["Linux", "arc"]'
      image:
        description: |
          Use option ending with ":build" for AMDGPU, ":latest" for the rest.
        type: choice
        options:
          - 'ghcr.io/intel/llvm/sycl_ubuntu2204_nightly:latest'
          - 'ghcr.io/intel/llvm/sycl_ubuntu2204_nightly:build'
      image_options:
        description: |
          Use option with "--device=/dev/kfd" for AMDGPU, without it for the rest.
        type: choice
        options:
          - '-u 1001 --device=/dev/dri --privileged --cap-add SYS_ADMIN'
          - '-u 1001 --device=/dev/dri --device=/dev/kfd --privileged --cap-add SYS_ADMIN'
      target_devices:
        type: choice
        options:
          - 'opencl:cpu'
          - 'opencl:gpu'
          - 'opencl:fpga'
          - 'ext_oneapi_level_zero:gpu'
          - 'ext_oneapi_hip:gpu'
      env:
        description: |
          Format: '{"VAR1":"VAL1","VAR2":"VAL2",...}'

          Special variables:
          * RESET_GPU       -- set to "1" to reset Intel GPUs
          * INSTALL_DRIVERS -- set to "1" to install drivers
          * USE_DEV_IGC     -- set to "1" to use dev igc
        default: '{}'

      sycl_toolchain_artifact:
        type: string
        default: ''
        required: False
      sycl_toolchain_archive:
        type: string
        default: ''
        required: False
      sycl_toolchain_decompress_command:
        type: string
        default: ''
        required: False

      cache_results:
        type: boolean
        default: false
        required: false

permissions:
  contents: read

jobs:
  check_build:
    name: Build (if no sycl artifact provided)
    uses: ./.github/workflows/sycl-linux-build.yml
    with:
      build_ref: ${{ github.sha }}
      merge_ref: ''
      build_cache_root: "/__w/"
      build_artifact_suffix: "default_benchmark"
      build_cache_suffix: "default_benchmark"
      build_image: ${{ inputs.image }}
      skip_build: ${{ inputs.sycl_toolchain_archive != '' }}
      skip_reason: "SYCL toolchain artifact already provided, no build necessary"

  run_benchmarks:
    name: ${{ inputs.name }}
    needs: [ check_build ]
    runs-on: ${{ fromJSON(inputs.runner) }}
    container:
      image: ${{ inputs.image }}
      options: ${{ inputs.image_options }}
    env: ${{ fromJSON(inputs.env) }}
    permissions:
      contents: write
    steps:
    - name: Reset GPU
      if: env.RESET_GPU == '1'
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        sparse-checkout: |
          devops
    - name: Register cleanup after job is finished
      uses: ./devops/actions/cleanup
    - name: Install drivers
      if: env.INSTALL_DRIVERS == '1'
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        if [ "$USE_DEV_IGC" = "1" ]; then
            # If libllvm14 is already installed (dev igc docker), still return true.
            sudo apt-get install -yqq libllvm14 || true;
        fi
        sudo -E bash devops/scripts/install_drivers.sh llvm/devops/dependencies.json ${{ env.USE_DEV_IGC == '1' && 'llvm/devops/dependencies-igc-dev.json --use-dev-igc' || '' }} --all
    - name: Source OneAPI TBB vars.sh
      shell: bash
      run: |
        # https://github.com/actions/runner/issues/1964 prevents us from using
        # the ENTRYPOINT in the image.
        env | sort > env_before
        if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
          source /runtimes/oneapi-tbb/env/vars.sh;
        elif [ -e /opt/runtimes/oneapi-tbb/env/vars.sh ]; then
          source /opt/runtimes/oneapi-tbb/env/vars.sh;
        else
          echo "no TBB vars in /opt/runtimes or /runtimes";
        fi
        env | sort > env_after
        comm -13 env_before env_after >> $GITHUB_ENV
        rm env_before env_after

    - name: Download SYCL toolchain
      if: github.event_name != 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.sycl_toolchain_artifact || 'sycl_linux_benchmark_ver' }}
    - name: Download SYCL toolchain [workflow_run]
      if: github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      with:
        script: |
          const name = '${{ inputs.sycl_toolchain_artifact || 'sycl_linux_benchmark_ver' }}'
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == name
          })[0];
          let download = await github.rest.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/` + name + '.zip', Buffer.from(download.data));
    - name: Unzip artifact [workflow_run]
      if: github.event_name == 'workflow_run'
      run: |
        unzip ${{ inputs.sycl_toolchain_artifact || 'sycl_linux_benchmark_ver' }}.zip
        rm ${{ inputs.sycl_toolchain_artifact || 'sycl_linux_benchmark_ver' }}.zip
    - name: Extract/Setup SYCL toolchain
      run: |
        mkdir toolchain
        tar -I '${{ inputs.sycl_toolchain_decompress_command || needs.check_build.outputs.artifact_decompress_command }}' \
            -xf ${{ inputs.sycl_toolchain_archive || needs.check_build.outputs.artifact_archive_name }} -C toolchain
        rm -f ${{ inputs.sycl_toolchain_archive || needs.check_build.outputs.artifact_archive_name }}
        echo PATH=$PWD/toolchain/bin/:$PATH >> $GITHUB_ENV
        echo LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH >> $GITHUB_ENV
    - run: which clang++ sycl-ls
    - run: sycl-ls --verbose
    - run: SYCL_UR_TRACE=1 sycl-ls
    - run: |
          if [ -f /usr/local/lib/igc/IGCTAG.txt ]; then
            cat /usr/local/lib/igc/IGCTAG.txt
          fi

    # - name: Install deps
    #   if: success()
    #   run: |
    #     sudo apt install -y ssh
    - name: Run compute-benchmarks
      id: run_benchmarks
      if: success()
      run: |
        whereis clang++
        whereis sycl-ls
        clang++ --version
        ls
        export CMPLR_ROOT=$PWD/toolchain
        ./devops/scripts/benchmarking/benchmark.sh ${{ inputs.cache_results == true && '-s' }}
    - name: Push compute-benchmarks
      if: inputs.cache_results == true && success()
      env:
        SSH_KEY: ${{secrets.ACTIONS_DEPLOY_KEY}}
      run: |
        mkdir -p .ssh
        echo "$SSH_KEY" > .ssh/id_rsa
        chmod 600 .ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add -k .ssh/id_rsa
        cd llvm-ci-perf-results
        git config --global user.name "iclsrc"
        git config --global user.email "ia.compiler.tools.git@intel.com"
        git add .
        git commit -m "Update results"
        git push
    # - name: Upload sycl-bench microbenchmark results
    #   if: inputs.tests_selector == 'benchmark' && steps.run_benchmarks.outcome == 'success'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: sycl_benchmark_res_${{ steps.run_benchmarks.outputs.TIMESTAMP }}
    #     path: ${{ steps.run_benchmarks.outputs.BENCHMARK_RESULTS }}
    #     retention-days: 7

  test_aggregate:
    name: Testing sycl-benchmark-aggregate.yml (DELETE AFTER)
    uses: ./.github/workflows/sycl-benchmark-aggregate.yml
    permissions:
      contents: write