"{\"results\": [{\"label\": \"api_overhead_benchmark_l0 SubmitKernel out of order\", \"value\": 11.547, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0\", \"--test=SubmitKernel\", \"--csv\", \"--noHeaders\", \"--Ioq=0\", \"--DiscardEvents=0\", \"--MeasureCompletion=0\", \"--iterations=100000\", \"--Profiling=0\", \"--NumKernels=10\", \"--KernelExecTime=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSubmitKernel(api=l0 Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.617,11.547,3.17%,10.931,44.927,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SubmitKernel\", \"stddev\": 0.3682589, \"name\": \"api_overhead_benchmark_l0 SubmitKernel out of order\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures CPU time overhead of submitting out-of-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time.\"}, {\"label\": \"api_overhead_benchmark_l0 SubmitKernel in order\", \"value\": 11.587, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_l0\", \"--test=SubmitKernel\", \"--csv\", \"--noHeaders\", \"--Ioq=1\", \"--DiscardEvents=0\", \"--MeasureCompletion=0\", \"--iterations=100000\", \"--Profiling=0\", \"--NumKernels=10\", \"--KernelExecTime=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSubmitKernel(api=l0 Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),11.640,11.587,4.30%,10.791,118.754,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SubmitKernel\", \"stddev\": 0.50052, \"name\": \"api_overhead_benchmark_l0 SubmitKernel in order\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures CPU time overhead of submitting in-order kernels through Level Zero API. Uses immediate command lists with 10 minimal kernels to isolate submission overhead from execution time.\"}, {\"label\": \"api_overhead_benchmark_sycl SubmitKernel out of order\", \"value\": 23.526, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl\", \"--test=SubmitKernel\", \"--csv\", \"--noHeaders\", \"--Ioq=0\", \"--DiscardEvents=0\", \"--MeasureCompletion=0\", \"--iterations=100000\", \"--Profiling=0\", \"--NumKernels=10\", \"--KernelExecTime=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSubmitKernel(api=sycl Profiling=0 Ioq=0 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),23.684,23.526,6.78%,22.498,501.340,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SubmitKernel\", \"stddev\": 1.6057752, \"name\": \"api_overhead_benchmark_sycl SubmitKernel out of order\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures CPU time overhead of submitting out-of-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.\"}, {\"label\": \"api_overhead_benchmark_sycl SubmitKernel in order\", \"value\": 24.372, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl\", \"--test=SubmitKernel\", \"--csv\", \"--noHeaders\", \"--Ioq=1\", \"--DiscardEvents=0\", \"--MeasureCompletion=0\", \"--iterations=100000\", \"--Profiling=0\", \"--NumKernels=10\", \"--KernelExecTime=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSubmitKernel(api=sycl Profiling=0 Ioq=1 DiscardEvents=0 NumKernels=10 KernelExecTime=1 MeasureCompletion=0),24.592,24.372,3.05%,23.513,84.252,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SubmitKernel\", \"stddev\": 0.750056, \"name\": \"api_overhead_benchmark_sycl SubmitKernel in order\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures CPU time overhead of submitting in-order kernels through SYCL API.Uses 10 simple kernels with minimal execution time to isolate API overhead from kernel execution time.\"}, {\"label\": \"memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024\", \"value\": 253.333, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl\", \"--test=QueueInOrderMemcpy\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--IsCopyOnly=0\", \"--sourcePlacement=Device\", \"--destinationPlacement=Device\", \"--size=1024\", \"--count=100\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Device destinationPlacement=Device size=1KB count=100),254.931,253.333,2.60%,249.131,779.513,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"\", \"stddev\": 6.6282060000000005, \"name\": \"memory_benchmark_sycl QueueInOrderMemcpy from Device to Device, size 1024\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL in-order queue memory copy performance for copy and command submission from Device to Device with 1024 bytes, executed 100 times per iteration.\"}, {\"label\": \"memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024\", \"value\": 134.795, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl\", \"--test=QueueInOrderMemcpy\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--IsCopyOnly=0\", \"--sourcePlacement=Host\", \"--destinationPlacement=Device\", \"--size=1024\", \"--count=100\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nQueueInOrderMemcpy(api=sycl IsCopyOnly=0 sourcePlacement=Host destinationPlacement=Device size=1KB count=100),135.962,134.795,1.92%,132.693,210.572,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"\", \"stddev\": 2.6104703999999996, \"name\": \"memory_benchmark_sycl QueueInOrderMemcpy from Host to Device, size 1024\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL in-order queue memory copy performance for copy and command submission from Host to Device with 1024 bytes, executed 100 times per iteration.\"}, {\"label\": \"memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024\", \"value\": 5.646, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl\", \"--test=QueueMemcpy\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--sourcePlacement=Device\", \"--destinationPlacement=Device\", \"--size=1024\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nQueueMemcpy(api=sycl sourcePlacement=Device destinationPlacement=Device size=1KB),5.746,5.646,12.74%,5.230,63.452,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"\", \"stddev\": 0.7320404000000001, \"name\": \"memory_benchmark_sycl QueueMemcpy from Device to Device, size 1024\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures general SYCL queue memory copy performance from Device to Device with 1024 bytes per operation.\"}, {\"label\": \"memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240\", \"value\": 3.191, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/memory_benchmark_sycl\", \"--test=StreamMemory\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--type=Triad\", \"--size=10240\", \"--memoryPlacement=Device\", \"--useEvents=0\", \"--contents=Zeros\", \"--multiplier=1\", \"--vectorSize=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nStreamMemory(api=sycl type=Triad size=10KB useEvents=0 contents=Zeros memoryPlacement=Device multiplier=1 vectorSize=1),3.171,3.191,3.81%,0.705,3.525,[CPU],[GB/s]\\n\", \"passed\": true, \"unit\": \"GB/s\", \"explicit_group\": \"\", \"stddev\": 0.1208151, \"name\": \"memory_benchmark_sycl StreamMemory, placement Device, type Triad, size 10240\", \"lower_is_better\": false, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures Device memory bandwidth using Triad pattern with 10240 bytes. Higher values (GB/s) indicate better performance.\"}, {\"label\": \"api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024\", \"value\": 2.11, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl\", \"--test=ExecImmediateCopyQueue\", \"--csv\", \"--noHeaders\", \"--iterations=100000\", \"--ioq=0\", \"--IsCopyOnly=1\", \"--MeasureCompletionTime=0\", \"--src=Device\", \"--dst=Device\", \"--size=1024\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Device dst=Device size=1KB ioq=0),2.123,2.110,8.04%,1.887,21.729,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"\", \"stddev\": 0.17068919999999999, \"name\": \"api_overhead_benchmark_sycl ExecImmediateCopyQueue out of order from Device to Device, size 1024\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL out-of-order queue overhead for copy-only from Device to Device memory with 1024 bytes. Tests immediate execution overheads.\"}, {\"label\": \"api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024\", \"value\": 1.658, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/api_overhead_benchmark_sycl\", \"--test=ExecImmediateCopyQueue\", \"--csv\", \"--noHeaders\", \"--iterations=100000\", \"--ioq=1\", \"--IsCopyOnly=1\", \"--MeasureCompletionTime=0\", \"--src=Host\", \"--dst=Host\", \"--size=1024\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nExecImmediateCopyQueue(api=sycl IsCopyOnly=1 MeasureCompletionTime=0 src=Host dst=Host size=1KB ioq=1),1.677,1.658,9.34%,1.565,20.166,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"\", \"stddev\": 0.1566318, \"name\": \"api_overhead_benchmark_sycl ExecImmediateCopyQueue in order from Device to Host, size 1024\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL in-order queue overhead for copy-only from Device to Host memory with 1024 bytes. Tests immediate execution overheads.\"}, {\"label\": \"miscellaneous_benchmark_sycl VectorSum\", \"value\": 859.782, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/miscellaneous_benchmark_sycl\", \"--test=VectorSum\", \"--csv\", \"--noHeaders\", \"--iterations=1000\", \"--numberOfElementsX=512\", \"--numberOfElementsY=256\", \"--numberOfElementsZ=256\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nVectorSum(api=sycl numberOfElementsX=512 numberOfElementsY=256 numberOfElementsZ=256),859.091,859.782,0.48%,822.144,868.986,[GPU],bw [GB/s]\\n\", \"passed\": true, \"unit\": \"bw GB/s\", \"explicit_group\": \"\", \"stddev\": 4.1236368, \"name\": \"miscellaneous_benchmark_sycl VectorSum\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures performance of vector addition across 3D grid (512x256x256 elements) using SYCL.\"}, {\"label\": \"graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5\", \"value\": 29.268, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=5\", \"--withGraphs=0\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=sycl numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),29.219,29.268,5.64%,27.316,150.651,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 5\", \"stddev\": 1.6479516, \"name\": \"graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:5\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100\", \"value\": 312.915, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_sycl\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=100\", \"--withGraphs=0\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=sycl numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),314.759,312.915,2.39%,306.106,843.095,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 100\", \"stddev\": 7.522740100000001, \"name\": \"graph_api_benchmark_sycl SinKernelGraph graphs:0, numKernels:100\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures SYCL performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5\", \"value\": 25.818, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=5\", \"--withGraphs=0\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=l0 numKernels=5 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),25.845,25.818,5.13%,24.015,139.305,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 5\", \"stddev\": 1.3258485, \"name\": \"graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:5\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures L0 performance when executing 5 sin kernels without graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5\", \"value\": 28.973, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=5\", \"--withGraphs=1\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=l0 numKernels=5 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),29.028,28.973,4.63%,28.106,147.851,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 5\", \"stddev\": 1.3439964, \"name\": \"graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:5\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures L0 performance when executing 5 sin kernels using graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100\", \"value\": 242.919, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=100\", \"--withGraphs=0\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=l0 numKernels=100 withGraphs=0 withCopyOffload=1 immediateAppendCmdList=0),243.132,242.919,1.63%,238.517,595.543,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 100\", \"stddev\": 3.9630515999999996, \"name\": \"graph_api_benchmark_l0 SinKernelGraph graphs:0, numKernels:100\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures L0 performance when executing 100 sin kernels without graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100\", \"value\": 246.544, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/graph_api_benchmark_l0\", \"--test=SinKernelGraph\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--numKernels=100\", \"--withGraphs=1\", \"--withCopyOffload=1\", \"--immediateAppendCmdList=0\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nSinKernelGraph(api=l0 numKernels=100 withGraphs=1 withCopyOffload=1 immediateAppendCmdList=0),246.604,246.544,1.25%,244.496,524.467,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"SinKernelGraph 100\", \"stddev\": 3.0825500000000003, \"name\": \"graph_api_benchmark_l0 SinKernelGraph graphs:1, numKernels:100\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"Measures L0 performance when executing 100 sin kernels using graphs. Tests overhead and benefits of graph-based execution.\"}, {\"label\": \"ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256\", \"value\": 5.794, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl\", \"--test=EmptyKernel\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--wgs=256\", \"--wgc=256\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nEmptyKernel(api=sycl wgc=256 wgs=256),5.836,5.794,17.24%,5.153,99.370,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"EmptyKernel 1000 256\", \"stddev\": 1.0061264, \"name\": \"ulls_benchmark_sycl EmptyKernel wgc:1000, wgs:256\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"\"}, {\"label\": \"ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256\", \"value\": 4.309, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0\", \"--test=EmptyKernel\", \"--csv\", \"--noHeaders\", \"--iterations=10000\", \"--wgs=256\", \"--wgc=256\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nEmptyKernel(api=l0 wgc=256 wgs=256),4.303,4.309,6.37%,3.764,20.716,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"EmptyKernel 1000 256\", \"stddev\": 0.27410110000000004, \"name\": \"ulls_benchmark_l0 EmptyKernel wgc:1000, wgs:256\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"\"}, {\"label\": \"ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200\", \"value\": 0.662, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/ulls_benchmark_sycl\", \"--test=KernelSwitch\", \"--csv\", \"--noHeaders\", \"--iterations=1000\", \"--count=8\", \"--kernelTime=200\", \"--barrier=0\", \"--hostVisible=0\", \"--ioq=1\", \"--ctrBasedEvents=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nKernelSwitch(api=sycl count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),0.662,0.662,9.62%,0.525,1.211,[CPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"KernelSwitch 8 200\", \"stddev\": 0.0636844, \"name\": \"ulls_benchmark_sycl KernelSwitch count 8 kernelTime 200\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"\"}, {\"label\": \"ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200\", \"value\": 1.051, \"command\": [\"/__w/llvm/llvm/llvm_test_workdir/compute-benchmarks-build/bin/ulls_benchmark_l0\", \"--test=KernelSwitch\", \"--csv\", \"--noHeaders\", \"--iterations=1000\", \"--count=8\", \"--kernelTime=200\", \"--barrier=0\", \"--hostVisible=0\", \"--ioq=1\", \"--ctrBasedEvents=1\"], \"env\": {}, \"stdout\": \"TestCase,Mean,Median,StdDev,Min,Max,Type\\nKernelSwitch(api=l0 count=8 kernelTime=200 barrier=0 hostVisible=0 ioq=1 ctrBasedEvents=1),1.059,1.051,4.10%,0.982,1.165,[GPU],[us]\\n\", \"passed\": true, \"unit\": \"\\u03bcs\", \"explicit_group\": \"KernelSwitch 8 200\", \"stddev\": 0.04341899999999999, \"name\": \"ulls_benchmark_l0 KernelSwitch count 8 kernelTime 200\", \"lower_is_better\": true, \"suite\": \"Compute Benchmarks\", \"description\": \"\"}], \"name\": \"baseline\", \"git_hash\": \"70c393f\", \"github_repo\": \"intel/llvm\", \"date\": \"2025-03-13T14:28:05.840014+00:00\"}"