# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import platform
import lit.formats

from lit.llvm import llvm_config

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'cgeist'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(not llvm_config.use_lit_shell)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.c', '.cpp', '.cu', '.mlir']

# excludes: A list of directories or files to exclude from the testsuite even
# if they match the suffixes pattern.
#config.excludes = ['Inputs']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
config.test_exec_root = os.path.join(config.mlir_clang_obj_root, 'test')

# Tweak the PATH to include the tools dir.
llvm_config.with_environment('PATH', config.llvm_tools_dir, append_path=True)
llvm_config.with_environment('PATH', config.polygeist_tools_dir, append_path=True)

import tempfile
lit_tmp = tempfile.mkdtemp(prefix="lit_tmp_")
os.environ.update({
  'TMPDIR': lit_tmp,
  'TMP': lit_tmp,
  'TEMP': lit_tmp,
  'TEMPDIR': lit_tmp,
})

# Propagate some variables from the host environment.
llvm_config.with_system_environment(
    ['HOME', 'INCLUDE', 'LIB', 'TMP', 'TEMP'])

llvm_config.use_default_substitutions()

# For each occurrence of a tool name, replace it with the full path to
# the build directory holding that tool.  We explicitly specify the directories
# to search to ensure that we get the tools just built and not some random
# tools that might happen to be in the user's PATH.

tool_dirs = [config.llvm_tools_dir]
tools = [ 'opt', 'clang' ]
llvm_config.add_tool_substitutions(tools, tool_dirs)
tool_dirs = [config.polygeist_tools_dir]
tools = [ 'cgeist' ]
llvm_config.add_tool_substitutions(tools, tool_dirs)

import subprocess

resource_dir = subprocess.check_output([config.llvm_tools_dir + "/clang", "-print-resource-dir"]).decode('utf-8').strip()

if platform.system() == "Linux":
    config.available_features.add('linux')
    llvm_config.with_system_environment('LD_LIBRARY_PATH')
    llvm_config.with_environment('LD_LIBRARY_PATH', config.sycl_libs_dir, append_path=True)
config.substitutions.append(('%sycl_libs_dir',  config.sycl_libs_dir))

config.substitutions.append(('%stdinclude', '-resource-dir=' + resource_dir + " -I " + config.test_source_root + "/polybench/utilities"))
config.substitutions.append(('%resourcedir', '-resource-dir=' + resource_dir))
config.substitutions.append(('%polyexec', config.test_source_root + '/polybench/utilities/polybench.c -D POLYBENCH_TIME -D POLYBENCH_NO_FLUSH_CACHE -D MINI_DATASET'))
config.substitutions.append(('%polyverify', config.test_source_root + '/polybench/utilities/polybench.c -D POLYBENCH_DUMP_ARRAYS -D POLYBENCH_NO_FLUSH_CACHE -D MINI_DATASET'))
