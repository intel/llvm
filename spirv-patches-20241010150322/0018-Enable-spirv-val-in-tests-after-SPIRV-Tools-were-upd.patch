From d3e72db7e0d74f4786a8073ee23af63c85a243e1 Mon Sep 17 00:00:00 2001
From: Viktoria Maximova <viktoria.maksimova@intel.com>
Date: Thu, 10 Oct 2024 17:25:45 +0200
Subject: [PATCH 18/18] Enable `spirv-val` in tests after SPIRV-Tools were
 updated in CI (#2749)


Original commit:
https://github.com/KhronosGroup/SPIRV-LLVM-Translator/commit/d3e72db7e0d74f4
---
 .../builtin_printf.ll                                          | 3 +--
 .../SPV_INTEL_fpga_cluster_attributes/function_attributes.ll   | 2 +-
 test/extensions/KHR/SPV_KHR_shader_clock/shader_clock.cl       | 2 +-
 test/extensions/KHR/SPV_KHR_untyped_pointers/infinite-phi.ll   | 3 +--
 test/extensions/KHR/SPV_KHR_untyped_pointers/store.ll          | 3 +--
 .../KHR/SPV_KHR_untyped_pointers/untyped_ptr_access_chain.ll   | 3 +--
 .../KHR/SPV_KHR_untyped_pointers/untyped_ptr_type.ll           | 3 +--
 test/llvm-intrinsics/lifetime.ll                               | 3 +--
 test/transcoding/BuiltinPrintf.cl                              | 3 +--
 test/transcoding/Printf.cl                                     | 3 +--
 test/transcoding/multiple_user_semantic.ll                     | 3 +--
 11 files changed, 11 insertions(+), 20 deletions(-)

diff --git a/test/extensions/EXT/SPV_EXT_relaxed_printf_string_address_space/builtin_printf.ll b/test/extensions/EXT/SPV_EXT_relaxed_printf_string_address_space/builtin_printf.ll
index 346d2e39e9e5..5605b696f391 100644
--- a/test/extensions/EXT/SPV_EXT_relaxed_printf_string_address_space/builtin_printf.ll
+++ b/test/extensions/EXT/SPV_EXT_relaxed_printf_string_address_space/builtin_printf.ll
@@ -18,8 +18,7 @@
 ; RUN: llvm-spirv -spirv-text %t.bc -o %t.spt --spirv-ext=+SPV_EXT_relaxed_printf_string_address_space
 ; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
 ; RUN: llvm-spirv %t.bc -o %t.spv --spirv-ext=+SPV_EXT_relaxed_printf_string_address_space
-; Change TODO to RUN when spirv-val allows non-constant printf formats
-; TODO: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 
 
 ; CHECK-WO-EXT: RequiresExtension: Feature requires the following SPIR-V extension:
diff --git a/test/extensions/INTEL/SPV_INTEL_fpga_cluster_attributes/function_attributes.ll b/test/extensions/INTEL/SPV_INTEL_fpga_cluster_attributes/function_attributes.ll
index 3071ac063393..86918a190ae9 100644
--- a/test/extensions/INTEL/SPV_INTEL_fpga_cluster_attributes/function_attributes.ll
+++ b/test/extensions/INTEL/SPV_INTEL_fpga_cluster_attributes/function_attributes.ll
@@ -1,7 +1,7 @@
 ; RUN: llvm-as %s -o %t.bc
 ; RUN: llvm-spirv --spirv-ext=+SPV_INTEL_fpga_cluster_attributes -spirv-text -o - %t.bc | FileCheck --check-prefix CHECK-SPIRV %s
 ; RUN: llvm-spirv --spirv-ext=+SPV_INTEL_fpga_cluster_attributes %t.bc -o %t.spv
-; spirv-val %t.spv
+; RUN: spirv-val %t.spv
 ; RUN: llvm-spirv -r --spirv-ext=+SPV_INTEL_fpga_cluster_attributes %t.spv -o %t.rev.bc
 ; RUN: llvm-dis %t.rev.bc -o - | FileCheck --check-prefix CHECK-LLVM %s 
 
diff --git a/test/extensions/KHR/SPV_KHR_shader_clock/shader_clock.cl b/test/extensions/KHR/SPV_KHR_shader_clock/shader_clock.cl
index e3587a3d465a..bcb2268fc3dd 100644
--- a/test/extensions/KHR/SPV_KHR_shader_clock/shader_clock.cl
+++ b/test/extensions/KHR/SPV_KHR_shader_clock/shader_clock.cl
@@ -2,7 +2,7 @@
 // RUN: %clang_cc1 -triple spir-unknown-unknown -O1 -cl-std=CL2.0 -fdeclare-opencl-builtins -finclude-default-header -emit-llvm-bc %s -o %t.bc
 // RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_shader_clock -o %t.spv
 // RUN: spirv-dis %t.spv -o - | FileCheck %s --check-prefix=CHECK-SPIRV
-// TODO: spirv-val %t.spv
+// RUN: spirv-val %t.spv
 // RUN: llvm-spirv -r %t.spv -o %t.rev.bc
 // RUN: llvm-dis < %t.rev.bc | FileCheck %s --check-prefix=CHECK-LLVM
 // RUN: llvm-spirv -r --spirv-target-env=SPV-IR %t.spv -o %t.rev.bc
diff --git a/test/extensions/KHR/SPV_KHR_untyped_pointers/infinite-phi.ll b/test/extensions/KHR/SPV_KHR_untyped_pointers/infinite-phi.ll
index 83b1248a8a01..0fe27873b543 100644
--- a/test/extensions/KHR/SPV_KHR_untyped_pointers/infinite-phi.ll
+++ b/test/extensions/KHR/SPV_KHR_untyped_pointers/infinite-phi.ll
@@ -1,7 +1,6 @@
 ; RUN: llvm-as %s -o %t.bc
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -o %t.spv
-; TODO: enable back once spirv-tools are updated.
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -spirv-text -o %t.spt
 ; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
 
diff --git a/test/extensions/KHR/SPV_KHR_untyped_pointers/store.ll b/test/extensions/KHR/SPV_KHR_untyped_pointers/store.ll
index c42396d2f0af..88ad1f2addc3 100644
--- a/test/extensions/KHR/SPV_KHR_untyped_pointers/store.ll
+++ b/test/extensions/KHR/SPV_KHR_untyped_pointers/store.ll
@@ -4,8 +4,7 @@
 
 ; RUN: llvm-as %s -o %t.bc
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -o %t.spv
-; TODO: enable back once spirv-tools are updated.
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -spirv-text -o %t.spt
 ; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
diff --git a/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_access_chain.ll b/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_access_chain.ll
index 5fd5a37f583e..349c3db999e5 100644
--- a/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_access_chain.ll
+++ b/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_access_chain.ll
@@ -7,8 +7,7 @@
 
 ; RUN: llvm-as %s -o %t.bc
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -o %t.spv
-; TODO: enable back once spirv-tools are updated.
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -spirv-text -o %t.spt
 ; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
diff --git a/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_type.ll b/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_type.ll
index a568ed9ce9c2..4ca85742fca4 100644
--- a/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_type.ll
+++ b/test/extensions/KHR/SPV_KHR_untyped_pointers/untyped_ptr_type.ll
@@ -1,8 +1,7 @@
 ; RUN: llvm-as %s -o %t.bc
 ; RUN: llvm-spirv %t.bc -o %t.spv --spirv-ext=+SPV_KHR_untyped_pointers
 
-; TODO: enable back once spirv-tools are updated
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 
 ; RUN: llvm-spirv %t.spv -o %t.spt --to-text
 ; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
diff --git a/test/llvm-intrinsics/lifetime.ll b/test/llvm-intrinsics/lifetime.ll
index 02be01749bec..c1fd8b939a14 100644
--- a/test/llvm-intrinsics/lifetime.ll
+++ b/test/llvm-intrinsics/lifetime.ll
@@ -8,8 +8,7 @@
 
 ; Verify that we have valid SPV and the same output LLVM IR when using untyped pointers.
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -o %t.spv
-; TODO: enable back once spirv-tools are updated.
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 ; RUN: llvm-spirv -r %t.spv -o %t.spv.bc
 ; RUN: llvm-dis < %t.spv.bc | FileCheck %s --check-prefix=CHECK-LLVM
 
diff --git a/test/transcoding/BuiltinPrintf.cl b/test/transcoding/BuiltinPrintf.cl
index 31016a85b6a1..e5605b2ac930 100644
--- a/test/transcoding/BuiltinPrintf.cl
+++ b/test/transcoding/BuiltinPrintf.cl
@@ -3,8 +3,7 @@
 // RUN: %clang_cc1 -triple spir-unknown-unknown -emit-llvm-bc %s -o %t.bc
 // RUN: llvm-spirv %t.bc -spirv-text -o - | FileCheck %s --check-prefix=CHECK-SPIRV
 // RUN: llvm-spirv %t.bc -o %t.spv
-// Change TODO to RUN when spirv-val allows array of 8-bit ints for format
-// TODO: spirv-val %t.spv
+// RUN: spirv-val %t.spv
 // RUN: llvm-spirv -r %t.spv -o %t.rev.bc
 // RUN: llvm-dis < %t.rev.bc | FileCheck %s --check-prefix=CHECK-LLVM
 
diff --git a/test/transcoding/Printf.cl b/test/transcoding/Printf.cl
index b36585303bb3..72e8721bd352 100644
--- a/test/transcoding/Printf.cl
+++ b/test/transcoding/Printf.cl
@@ -3,8 +3,7 @@
 // RUN: %clang_cc1 -triple spir-unknown-unknown -emit-llvm-bc %s -o %t.bc -finclude-default-header
 // RUN: llvm-spirv %t.bc -spirv-text -o - | FileCheck %s --check-prefix=CHECK-SPIRV
 // RUN: llvm-spirv %t.bc -o %t.spv
-// Change TODO to RUN when spirv-val allows array of 8-bit ints for format
-// TODO: spirv-val %t.spv
+// RUN: spirv-val %t.spv
 // RUN: llvm-spirv -r %t.spv -o %t.rev.bc
 // RUN: llvm-dis < %t.rev.bc | FileCheck %s --check-prefix=CHECK-LLVM
 
diff --git a/test/transcoding/multiple_user_semantic.ll b/test/transcoding/multiple_user_semantic.ll
index 2c8e0acf5053..50a20525a654 100644
--- a/test/transcoding/multiple_user_semantic.ll
+++ b/test/transcoding/multiple_user_semantic.ll
@@ -9,8 +9,7 @@
 ; RUN: llvm-dis < %t.rev.bc | FileCheck %s --check-prefix=CHECK-LLVM
 
 ; RUN: llvm-spirv %t.bc --spirv-ext=+SPV_KHR_untyped_pointers -o %t.spv
-; TODO: enable back once spirv-tools are updated.
-; R/UN: spirv-val %t.spv
+; RUN: spirv-val %t.spv
 ; RUN: llvm-spirv -r %t.spv -o %t.rev.bc
 ; RUN: llvm-dis < %t.rev.bc | FileCheck %s --check-prefix=CHECK-LLVM
 
-- 
2.39.1

