// TODO: previously code generation and ESIMD lowering was
// a part of the same %clang_cc1 invocation, but now it is
// separate. So, we can split this test into 2, where one
// will be testing code generation and the second ESIMD lowering.
//
// RUN: %clang_cc1 -fsycl-is-device \
// RUN:   -internal-isystem %S/Inputs -triple spir64-unknown-unknown-sycldevice \
// RUN:   -disable-llvm-passes -emit-llvm %s -o %t
// RUN: sycl-post-link -split-esimd -lower-esimd -O0 -S %t -o %t.table
// RUN: FileCheck %s -input-file=%t_esimd_0.ll

// This test checks
// 1) proper metadata generation for accessors used in ESIMD
// kernels:
//   - Proper 'kernel_arg_accessor_ptr' metadata is generated by the FE for
//     ESIMD kernels
//   - Pointers originating from accessors are marked with 'buffer_t' and proper
//     argument kind.
// 2) __init_esimd function is used to initialize the accessor rather than
//    __init.

#include "sycl.hpp"

using namespace cl::sycl;

void test(int val) {
  queue q;
  q.submit([&](handler &h) {
    cl::sycl::accessor<int, 1, cl::sycl::access::mode::read_write> accessorA;
    cl::sycl::accessor<int, 1, cl::sycl::access::mode::read> accessorB;

    h.single_task<class esimd_kernel>(
        [=]() __attribute__((sycl_explicit_simd)) {
          accessorA.use(val);
          accessorB.use();
        });
  });

  // --- Name
  // CHECK-LABEL: define {{.*}}spir_kernel void @"_ZTSZZ4testiENK3$_0clERN2cl4sycl7handlerEE12esimd_kernel"(
  // --- Signature
  // CHECK:   i32 addrspace(1)* "VCArgumentDesc"="buffer_t" "VCArgumentIOKind"="0" "VCArgumentKind"="2" %_arg_,
  // CHECK:   i32 "VCArgumentDesc" "VCArgumentIOKind"="0" "VCArgumentKind"="0" %_arg_1,
  // CHECK:   i32 addrspace(1)* "VCArgumentDesc"="buffer_t" "VCArgumentIOKind"="0" "VCArgumentKind"="2" %_arg_3)
  // --- Attributes
  // CHECK: {{.*}} !kernel_arg_accessor_ptr ![[ACC_PTR_ATTR:[0-9]+]] !sycl_explicit_simd !{{[0-9]+}} {{.*}}{
  // --- init_esimd call is expected instead of __init:
  // CHECK:   call spir_func void @{{.*}}__init_esimd{{.*}}(%"{{.*}}sycl::accessor" addrspace(4)* {{[^,]*}} %{{[0-9]+}}, i32 addrspace(1)* %{{[0-9]+}})
  // CHECK-LABEL: }
  // CHECK: ![[ACC_PTR_ATTR]] = !{i1 true, i1 false, i1 true}
}
