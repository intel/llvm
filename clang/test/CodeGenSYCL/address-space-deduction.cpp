// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -triple spir64 -fsycl-is-device -disable-llvm-passes -emit-llvm %s -o - | FileCheck %s

// Validates SYCL deduction rules compliance.
// See clang/docs/SYCLSupport.rst#address-space-handling for the details.


// CHECK-LABEL: @_Z4testv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[PPTR:%.*]] = alloca i32 addrspace(4)*, align 8
// CHECK-NEXT:    [[IS_I_PTR:%.*]] = alloca i8, align 1
// CHECK-NEXT:    [[VAR23:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[CP:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[ARR:%.*]] = alloca [42 x i32], align 4
// CHECK-NEXT:    [[CPP:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[APTR:%.*]] = alloca i32 addrspace(4)*, align 8
// CHECK-NEXT:    [[STR:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[PHI_STR:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[SELECT_NULL:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[SELECT_STR_TRIVIAL1:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[SELECT_STR_TRIVIAL2:%.*]] = alloca i8 addrspace(4)*, align 8
// CHECK-NEXT:    [[I_ASCAST:%.*]] = addrspacecast i32* [[I]] to i32 addrspace(4)*
// CHECK-NEXT:    [[PPTR_ASCAST:%.*]] = addrspacecast i32 addrspace(4)** [[PPTR]] to i32 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[IS_I_PTR_ASCAST:%.*]] = addrspacecast i8* [[IS_I_PTR]] to i8 addrspace(4)*
// CHECK-NEXT:    [[VAR23_ASCAST:%.*]] = addrspacecast i32* [[VAR23]] to i32 addrspace(4)*
// CHECK-NEXT:    [[CP_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[CP]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[ARR_ASCAST:%.*]] = addrspacecast [42 x i32]* [[ARR]] to [42 x i32] addrspace(4)*
// CHECK-NEXT:    [[CPP_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[CPP]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[APTR_ASCAST:%.*]] = addrspacecast i32 addrspace(4)** [[APTR]] to i32 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[STR_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[STR]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[PHI_STR_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[PHI_STR]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[SELECT_NULL_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[SELECT_NULL]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[SELECT_STR_TRIVIAL1_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[SELECT_STR_TRIVIAL1]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[SELECT_STR_TRIVIAL2_ASCAST:%.*]] = addrspacecast i8 addrspace(4)** [[SELECT_STR_TRIVIAL2]] to i8 addrspace(4)* addrspace(4)*
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[I]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP0]]) #[[ATTR2:[0-9]+]]
// CHECK-NEXT:    store i32 0, i32 addrspace(4)* [[I_ASCAST]], align 4, !tbaa [[TBAA4:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast i32 addrspace(4)** [[PPTR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP1]]) #[[ATTR2]]
// CHECK-NEXT:    store i32 addrspace(4)* [[I_ASCAST]], i32 addrspace(4)* addrspace(4)* [[PPTR_ASCAST]], align 8, !tbaa [[TBAA8:![0-9]+]]
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 1, i8* [[IS_I_PTR]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP2:%.*]] = load i32 addrspace(4)*, i32 addrspace(4)* addrspace(4)* [[PPTR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 addrspace(4)* [[TMP2]], [[I_ASCAST]]
// CHECK-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHECK-NEXT:    store i8 [[FROMBOOL]], i8 addrspace(4)* [[IS_I_PTR_ASCAST]], align 1, !tbaa [[TBAA10:![0-9]+]]
// CHECK-NEXT:    [[TMP3:%.*]] = load i32 addrspace(4)*, i32 addrspace(4)* addrspace(4)* [[PPTR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    store i32 66, i32 addrspace(4)* [[TMP3]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP4:%.*]] = bitcast i32* [[VAR23]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP4]]) #[[ATTR2]]
// CHECK-NEXT:    store i32 23, i32 addrspace(4)* [[VAR23_ASCAST]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP5:%.*]] = bitcast i8 addrspace(4)** [[CP]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP5]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32 addrspace(4)* [[VAR23_ASCAST]] to i8 addrspace(4)*
// CHECK-NEXT:    store i8 addrspace(4)* [[TMP6]], i8 addrspace(4)* addrspace(4)* [[CP_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP7:%.*]] = load i8 addrspace(4)*, i8 addrspace(4)* addrspace(4)* [[CP_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    store i8 41, i8 addrspace(4)* [[TMP7]], align 1, !tbaa [[TBAA12:![0-9]+]]
// CHECK-NEXT:    [[TMP8:%.*]] = bitcast [42 x i32]* [[ARR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 168, i8* [[TMP8]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP9:%.*]] = bitcast i8 addrspace(4)** [[CPP]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP9]]) #[[ATTR2]]
// CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [42 x i32], [42 x i32] addrspace(4)* [[ARR_ASCAST]], i64 0, i64 0
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32 addrspace(4)* [[ARRAYDECAY]] to i8 addrspace(4)*
// CHECK-NEXT:    store i8 addrspace(4)* [[TMP10]], i8 addrspace(4)* addrspace(4)* [[CPP_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP11:%.*]] = load i8 addrspace(4)*, i8 addrspace(4)* addrspace(4)* [[CPP_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    store i8 43, i8 addrspace(4)* [[TMP11]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[TMP12:%.*]] = bitcast i32 addrspace(4)** [[APTR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP12]]) #[[ATTR2]]
// CHECK-NEXT:    [[ARRAYDECAY1:%.*]] = getelementptr inbounds [42 x i32], [42 x i32] addrspace(4)* [[ARR_ASCAST]], i64 0, i64 0
// CHECK-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32 addrspace(4)* [[ARRAYDECAY1]], i64 10
// CHECK-NEXT:    store i32 addrspace(4)* [[ADD_PTR]], i32 addrspace(4)* addrspace(4)* [[APTR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP13:%.*]] = load i32 addrspace(4)*, i32 addrspace(4)* addrspace(4)* [[APTR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[ARRAYDECAY2:%.*]] = getelementptr inbounds [42 x i32], [42 x i32] addrspace(4)* [[ARR_ASCAST]], i64 0, i64 0
// CHECK-NEXT:    [[ADD_PTR3:%.*]] = getelementptr inbounds i32, i32 addrspace(4)* [[ARRAYDECAY2]], i64 168
// CHECK-NEXT:    [[CMP4:%.*]] = icmp ult i32 addrspace(4)* [[TMP13]], [[ADD_PTR3]]
// CHECK-NEXT:    br i1 [[CMP4]], label [[IF_THEN:%.*]], label [[IF_END:%.*]]
// CHECK:       if.then:
// CHECK-NEXT:    [[TMP14:%.*]] = load i32 addrspace(4)*, i32 addrspace(4)* addrspace(4)* [[APTR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    store i32 44, i32 addrspace(4)* [[TMP14]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    br label [[IF_END]]
// CHECK:       if.end:
// CHECK-NEXT:    [[TMP15:%.*]] = bitcast i8 addrspace(4)** [[STR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP15]]) #[[ATTR2]]
// CHECK-NEXT:    store i8 addrspace(4)* getelementptr inbounds ([14 x i8], [14 x i8] addrspace(4)* addrspacecast ([14 x i8] addrspace(1)* @.str to [14 x i8] addrspace(4)*), i64 0, i64 0), i8 addrspace(4)* addrspace(4)* [[STR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP16:%.*]] = load i8 addrspace(4)*, i8 addrspace(4)* addrspace(4)* [[STR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8 addrspace(4)* [[TMP16]], i64 0
// CHECK-NEXT:    [[TMP17:%.*]] = load i8, i8 addrspace(4)* [[ARRAYIDX]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CONV:%.*]] = sext i8 [[TMP17]] to i32
// CHECK-NEXT:    store i32 [[CONV]], i32 addrspace(4)* [[I_ASCAST]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[TMP18:%.*]] = bitcast i8 addrspace(4)** [[PHI_STR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP18]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32 addrspace(4)* [[I_ASCAST]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[CMP5:%.*]] = icmp sgt i32 [[TMP19]], 2
// CHECK-NEXT:    br i1 [[CMP5]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
// CHECK:       cond.true:
// CHECK-NEXT:    [[TMP20:%.*]] = load i8 addrspace(4)*, i8 addrspace(4)* addrspace(4)* [[STR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    br label [[COND_END:%.*]]
// CHECK:       cond.false:
// CHECK-NEXT:    br label [[COND_END]]
// CHECK:       cond.end:
// CHECK-NEXT:    [[COND:%.*]] = phi i8 addrspace(4)* [ [[TMP20]], [[COND_TRUE]] ], [ getelementptr inbounds ([21 x i8], [21 x i8] addrspace(4)* addrspacecast ([21 x i8] addrspace(1)* @.str.1 to [21 x i8] addrspace(4)*), i64 0, i64 0), [[COND_FALSE]] ]
// CHECK-NEXT:    store i8 addrspace(4)* [[COND]], i8 addrspace(4)* addrspace(4)* [[PHI_STR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast i8 addrspace(4)** [[SELECT_NULL]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP21]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32 addrspace(4)* [[I_ASCAST]], align 4, !tbaa [[TBAA4]]
// CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[TMP22]], 2
// CHECK-NEXT:    [[TMP23:%.*]] = zext i1 [[CMP6]] to i64
// CHECK-NEXT:    [[COND7:%.*]] = select i1 [[CMP6]], i8 addrspace(4)* getelementptr inbounds ([24 x i8], [24 x i8] addrspace(4)* addrspacecast ([24 x i8] addrspace(1)* @.str.2 to [24 x i8] addrspace(4)*), i64 0, i64 0), i8 addrspace(4)* null
// CHECK-NEXT:    store i8 addrspace(4)* [[COND7]], i8 addrspace(4)* addrspace(4)* [[SELECT_NULL_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP24:%.*]] = bitcast i8 addrspace(4)** [[SELECT_STR_TRIVIAL1]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP24]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP25:%.*]] = load i8 addrspace(4)*, i8 addrspace(4)* addrspace(4)* [[STR_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    store i8 addrspace(4)* [[TMP25]], i8 addrspace(4)* addrspace(4)* [[SELECT_STR_TRIVIAL1_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP26:%.*]] = bitcast i8 addrspace(4)** [[SELECT_STR_TRIVIAL2]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 8, i8* [[TMP26]]) #[[ATTR2]]
// CHECK-NEXT:    store i8 addrspace(4)* getelementptr inbounds ([21 x i8], [21 x i8] addrspace(4)* addrspacecast ([21 x i8] addrspace(1)* @.str.1 to [21 x i8] addrspace(4)*), i64 0, i64 0), i8 addrspace(4)* addrspace(4)* [[SELECT_STR_TRIVIAL2_ASCAST]], align 8, !tbaa [[TBAA8]]
// CHECK-NEXT:    [[TMP27:%.*]] = bitcast i8 addrspace(4)** [[SELECT_STR_TRIVIAL2]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP27]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP28:%.*]] = bitcast i8 addrspace(4)** [[SELECT_STR_TRIVIAL1]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP28]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP29:%.*]] = bitcast i8 addrspace(4)** [[SELECT_NULL]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP29]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP30:%.*]] = bitcast i8 addrspace(4)** [[PHI_STR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP30]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP31:%.*]] = bitcast i8 addrspace(4)** [[STR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP31]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP32:%.*]] = bitcast i32 addrspace(4)** [[APTR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP32]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP33:%.*]] = bitcast i8 addrspace(4)** [[CPP]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP33]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP34:%.*]] = bitcast [42 x i32]* [[ARR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 168, i8* [[TMP34]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP35:%.*]] = bitcast i8 addrspace(4)** [[CP]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP35]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP36:%.*]] = bitcast i32* [[VAR23]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP36]]) #[[ATTR2]]
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 1, i8* [[IS_I_PTR]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP37:%.*]] = bitcast i32 addrspace(4)** [[PPTR]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 8, i8* [[TMP37]]) #[[ATTR2]]
// CHECK-NEXT:    [[TMP38:%.*]] = bitcast i32* [[I]] to i8*
// CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP38]]) #[[ATTR2]]
// CHECK-NEXT:    ret void
//
__attribute__((sycl_device)) void test() {

  static const int foo = 0x42;


  int i = 0;
  int *pptr = &i;
  bool is_i_ptr = (pptr == &i);
  *pptr = foo;

  int var23 = 23;
  char *cp = (char *)&var23;
  *cp = 41;

  int arr[42];
  char *cpp = (char *)arr;
  *cpp = 43;

  int *aptr = arr + 10;
  if (aptr < arr + sizeof(arr))
    *aptr = 44;

  const char *str = "Hello, world!";

  i = str[0];

  const char *phi_str = i > 2 ? str : "Another hello world!";
  (void)phi_str;




  const char *select_null = i > 2 ? "Yet another Hello world" : nullptr;
  (void)select_null;

  const char *select_str_trivial1 = true ? str : "Another hello world!";
  (void)select_str_trivial1;

  const char *select_str_trivial2 = false ? str : "Another hello world!";
  (void)select_str_trivial2;
}
