//===--------- ur_level_zero_common.cpp - Level Zero Adapter ----------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===-----------------------------------------------------------------===//

#include "ur_level_zero_common.hpp"

ur_result_t ze2urResult(ze_result_t ZeResult) {
  if (ZeResult == ZE_RESULT_SUCCESS)
    return UR_RESULT_SUCCESS;

  switch (ZeResult) {
  case ZE_RESULT_ERROR_DEVICE_LOST:
    return UR_RESULT_ERROR_DEVICE_LOST;
  case ZE_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
    return UR_RESULT_ERROR_INVALID_OPERATION;
  case ZE_RESULT_ERROR_NOT_AVAILABLE:
    return UR_RESULT_ERROR_INVALID_OPERATION;
  case ZE_RESULT_ERROR_UNINITIALIZED:
    return UR_RESULT_ERROR_INVALID_PLATFORM;
  case ZE_RESULT_ERROR_INVALID_ARGUMENT:
    return UR_RESULT_ERROR_INVALID_ARGUMENT;
  case ZE_RESULT_ERROR_INVALID_NULL_POINTER:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_INVALID_SIZE:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_UNSUPPORTED_SIZE:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT:
    return UR_RESULT_ERROR_INVALID_EVENT;
  case ZE_RESULT_ERROR_INVALID_ENUMERATION:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_UNSUPPORTED_ENUMERATION:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT:
    return UR_RESULT_ERROR_INVALID_VALUE;
  case ZE_RESULT_ERROR_INVALID_NATIVE_BINARY:
    return UR_RESULT_ERROR_INVALID_BINARY;
  case ZE_RESULT_ERROR_INVALID_KERNEL_NAME:
    return UR_RESULT_ERROR_INVALID_KERNEL_NAME;
  case ZE_RESULT_ERROR_INVALID_FUNCTION_NAME:
    return UR_RESULT_ERROR_INVALID_FUNCTION_NAME;
  case ZE_RESULT_ERROR_OVERLAPPING_REGIONS:
    return UR_RESULT_ERROR_INVALID_OPERATION;
  case ZE_RESULT_ERROR_INVALID_GROUP_SIZE_DIMENSION:
    return UR_RESULT_ERROR_INVALID_WORK_GROUP_SIZE;
  case ZE_RESULT_ERROR_MODULE_BUILD_FAILURE:
    return UR_RESULT_ERROR_MODULE_BUILD_FAILURE;
  case ZE_RESULT_ERROR_OUT_OF_DEVICE_MEMORY:
    return UR_RESULT_ERROR_OUT_OF_DEVICE_MEMORY;
  case ZE_RESULT_ERROR_OUT_OF_HOST_MEMORY:
    return UR_RESULT_ERROR_OUT_OF_HOST_MEMORY;
  default:
    return UR_RESULT_ERROR_UNKNOWN;
  }
}
