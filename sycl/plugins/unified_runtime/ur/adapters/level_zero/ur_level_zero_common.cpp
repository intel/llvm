//===--------- ur_level_zero_common.cpp - Level Zero Adapter ----------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===-----------------------------------------------------------------===//

#include "ur_level_zero_common.hpp"

std::unordered_map<ze_result_t, ur_result_t> Ze2UrErrorMapping = {
    {ZE_RESULT_SUCCESS, UR_RESULT_SUCCESS},
    {ZE_RESULT_ERROR_DEVICE_LOST, UR_RESULT_ERROR_DEVICE_LOST},
    {ZE_RESULT_ERROR_INSUFFICIENT_PERMISSIONS,
     UR_RESULT_ERROR_INVALID_OPERATION},
    {ZE_RESULT_ERROR_NOT_AVAILABLE, UR_RESULT_ERROR_INVALID_OPERATION},
    {ZE_RESULT_ERROR_UNINITIALIZED, UR_RESULT_ERROR_INVALID_PLATFORM},
    {ZE_RESULT_ERROR_INVALID_ARGUMENT, UR_RESULT_ERROR_INVALID_ARGUMENT},
    {ZE_RESULT_ERROR_INVALID_NULL_POINTER, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_INVALID_SIZE, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_UNSUPPORTED_SIZE, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_UNSUPPORTED_ALIGNMENT, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT,
     UR_RESULT_ERROR_INVALID_EVENT},
    {ZE_RESULT_ERROR_INVALID_ENUMERATION, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_UNSUPPORTED_ENUMERATION, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT, UR_RESULT_ERROR_INVALID_VALUE},
    {ZE_RESULT_ERROR_INVALID_NATIVE_BINARY, UR_RESULT_ERROR_INVALID_BINARY},
    {ZE_RESULT_ERROR_INVALID_KERNEL_NAME, UR_RESULT_ERROR_INVALID_KERNEL_NAME},
    {ZE_RESULT_ERROR_INVALID_FUNCTION_NAME,
     UR_RESULT_ERROR_INVALID_FUNCTION_NAME},
    {ZE_RESULT_ERROR_OVERLAPPING_REGIONS, UR_RESULT_ERROR_INVALID_OPERATION},
    {ZE_RESULT_ERROR_INVALID_GROUP_SIZE_DIMENSION,
     UR_RESULT_ERROR_INVALID_WORK_GROUP_SIZE},
    {ZE_RESULT_ERROR_MODULE_BUILD_FAILURE,
     UR_RESULT_ERROR_MODULE_BUILD_FAILURE},
    {ZE_RESULT_ERROR_OUT_OF_DEVICE_MEMORY,
     UR_RESULT_ERROR_OUT_OF_DEVICE_MEMORY},
    {ZE_RESULT_ERROR_OUT_OF_HOST_MEMORY, UR_RESULT_ERROR_OUT_OF_HOST_MEMORY}};

ur_result_t ze2urResult(ze_result_t ZeResult) {
  auto It = Ze2UrErrorMapping.find(ZeResult);
  if (It == Ze2UrErrorMapping.end()) {
    return UR_RESULT_ERROR_UNKNOWN;
  }
  return It->second;
}
