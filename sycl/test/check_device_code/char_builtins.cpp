// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// RUN: %clangxx -I %sycl_include -fno-discard-value-names -fsigned-char -O3 -S -emit-llvm -fno-sycl-instrument-device-code -Xclang -disable-lifetime-markers -fsycl-device-only %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-SCHAR
// RUN: %clangxx -I %sycl_include -fno-discard-value-names -fno-signed-char -O3 -S -emit-llvm -fno-sycl-instrument-device-code -Xclang -disable-lifetime-markers -fsycl-device-only %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-UCHAR

// Note: we've used update_cc_test_checks but because the mangling of multi_ptr
// differs on different hosts, the check has been updated not to rely on the
// specific numeric suffix, e.g., %"class.sycl::_V1::multi_ptr{{.*}}".

#include <sycl/sycl.hpp>

template <typename T>
SYCL_EXTERNAL void test_builtins(
    T *out, T x, T y, sycl::vec<T, 4> *out2, sycl::vec<float, 4> f2,
    sycl::nd_item<2> item,
    sycl::multi_ptr<T, sycl::access::address_space::global_space> ptr_global,
    sycl::multi_ptr<T, sycl::access::address_space::local_space> ptr_local) {
  out[0] = sycl::min(x, y);
  out[1] = sycl::max(x, y);
  out[2] = sycl::clz(x);
  out[3] = sycl::ctz(x);
  out[4] = sycl::abs(x);
  out[5] = sycl::hadd(x, y);
  out[6] = sycl::rhadd(x, y);

  out2[0] = f2.template convert<T>();

  size_t num_elem = 4;
  const auto group = item.get_group();
  group.async_work_group_copy(ptr_local, ptr_global, num_elem);
}

// CHECK-SCHAR-LABEL: define dso_local spir_func void @_Z18test_char_builtinsPcccPN4sycl3_V13vecIcLi4EEENS2_IfLi4EEENS1_7nd_itemILi2EEENS1_9multi_ptrIcLNS1_6access13address_spaceE1ELNS9_9decoratedE2EEENS8_IcLSA_3ELSB_2EEE(
// CHECK-SCHAR-SAME: ptr addrspace(4) noundef writeonly captures(none) initializes((0, 7)) [[OUT:%.*]], i8 noundef signext [[X:%.*]], i8 noundef signext [[Y:%.*]], ptr addrspace(4) noundef writeonly captures(none) initializes((0, 4)) [[OUT2:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::vec") align 16 captures(none) [[F2:%.*]], ptr noundef readnone byval(%"class.sycl::_V1::nd_item") align 1 captures(none) [[ITEM:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_GLOBAL:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_LOCAL:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !sycl_fixed_targets [[META6:![0-9]+]] {
// CHECK-SCHAR-NEXT:  [[ENTRY:.*:]]
// CHECK-SCHAR-NEXT:    [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD:%.*]] = load <4 x float>, ptr [[F2]], align 16
// CHECK-SCHAR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[PTR_GLOBAL]], align 8, !tbaa [[TBAA7:![0-9]+]]
// CHECK-SCHAR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[PTR_LOCAL]], align 8, !tbaa [[TBAA7]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I_I:%.*]] = tail call spir_func noundef signext i8 @_Z17__spirv_ocl_s_minaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3:[0-9]+]]
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I_I]], ptr addrspace(4) [[OUT]], align 1, !tbaa [[TBAA12:![0-9]+]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I30_I:%.*]] = tail call spir_func noundef signext i8 @_Z17__spirv_ocl_s_maxaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 1
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I30_I]], ptr addrspace(4) [[ARRAYIDX2_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I31_I:%.*]] = tail call spir_func noundef signext i8 @_Z15__spirv_ocl_clza(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 2
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I31_I]], ptr addrspace(4) [[ARRAYIDX4_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I32_I:%.*]] = tail call spir_func noundef signext i8 @_Z15__spirv_ocl_ctza(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX6_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 3
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I32_I]], ptr addrspace(4) [[ARRAYIDX6_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I33_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_s_absa(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX8_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 4
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I33_I]], ptr addrspace(4) [[ARRAYIDX8_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I34_I:%.*]] = tail call spir_func noundef signext i8 @_Z18__spirv_ocl_s_haddaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX10_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 5
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I34_I]], ptr addrspace(4) [[ARRAYIDX10_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I35_I:%.*]] = tail call spir_func noundef signext i8 @_Z19__spirv_ocl_s_rhaddaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    [[ARRAYIDX12_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 6
// CHECK-SCHAR-NEXT:    store i8 [[CALL_I_I35_I]], ptr addrspace(4) [[ARRAYIDX12_I]], align 1, !tbaa [[TBAA12]]
// CHECK-SCHAR-NEXT:    [[CALL_I_I_I_I:%.*]] = tail call spir_func noundef <4 x i8> @_Z31__spirv_ConvertFToS_Rschar4_rteDv4_f(<4 x float> noundef [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD]]) #[[ATTR3]]
// CHECK-SCHAR-NEXT:    store <4 x i8> [[CALL_I_I_I_I]], ptr addrspace(4) [[OUT2]], align 4
// CHECK-SCHAR-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP0]] to ptr addrspace(1)
// CHECK-SCHAR-NEXT:    [[TMP3:%.*]] = inttoptr i64 [[TMP1]] to ptr addrspace(3)
// CHECK-SCHAR-NEXT:    [[CALL3_I_I_I:%.*]] = tail call spir_func target("spirv.Event") @_Z22__spirv_GroupAsyncCopyiPU3AS3aPU3AS1Kamm9ocl_event(i32 noundef 2, ptr addrspace(3) noundef [[TMP3]], ptr addrspace(1) noundef [[TMP2]], i64 noundef 4, i64 noundef 1, target("spirv.Event") zeroinitializer) #[[ATTR4:[0-9]+]], !noalias [[META13:![0-9]+]]
// CHECK-SCHAR-NEXT:    ret void
//
// CHECK-UCHAR-LABEL: define dso_local spir_func void @_Z18test_char_builtinsPcccPN4sycl3_V13vecIcLi4EEENS2_IfLi4EEENS1_7nd_itemILi2EEENS1_9multi_ptrIcLNS1_6access13address_spaceE1ELNS9_9decoratedE2EEENS8_IcLSA_3ELSB_2EEE(
// CHECK-UCHAR-SAME: ptr addrspace(4) noundef writeonly captures(none) initializes((0, 7)) [[OUT:%.*]], i8 noundef zeroext [[X:%.*]], i8 noundef zeroext [[Y:%.*]], ptr addrspace(4) noundef writeonly captures(none) initializes((0, 4)) [[OUT2:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::vec") align 16 captures(none) [[F2:%.*]], ptr noundef readnone byval(%"class.sycl::_V1::nd_item") align 1 captures(none) [[ITEM:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_GLOBAL:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_LOCAL:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !sycl_fixed_targets [[META6:![0-9]+]] {
// CHECK-UCHAR-NEXT:  [[ENTRY:.*:]]
// CHECK-UCHAR-NEXT:    [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD:%.*]] = load <4 x float>, ptr [[F2]], align 16
// CHECK-UCHAR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[PTR_GLOBAL]], align 8, !tbaa [[TBAA7:![0-9]+]]
// CHECK-UCHAR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[PTR_LOCAL]], align 8, !tbaa [[TBAA7]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_minhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3:[0-9]+]]
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I_I]], ptr addrspace(4) [[OUT]], align 1, !tbaa [[TBAA12:![0-9]+]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I30_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_maxhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 1
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I30_I]], ptr addrspace(4) [[ARRAYIDX2_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I31_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z15__spirv_ocl_clzh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 2
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I31_I]], ptr addrspace(4) [[ARRAYIDX4_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I32_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z15__spirv_ocl_ctzh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX6_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 3
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I32_I]], ptr addrspace(4) [[ARRAYIDX6_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I33_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_absh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX8_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 4
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I33_I]], ptr addrspace(4) [[ARRAYIDX8_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I34_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z18__spirv_ocl_u_haddhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX10_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 5
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I34_I]], ptr addrspace(4) [[ARRAYIDX10_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I35_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z19__spirv_ocl_u_rhaddhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    [[ARRAYIDX12_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 6
// CHECK-UCHAR-NEXT:    store i8 [[CALL_I_I35_I]], ptr addrspace(4) [[ARRAYIDX12_I]], align 1, !tbaa [[TBAA12]]
// CHECK-UCHAR-NEXT:    [[CALL_I_I_I_I:%.*]] = tail call spir_func noundef <4 x i8> @_Z31__spirv_ConvertFToU_Ruchar4_rteDv4_f(<4 x float> noundef [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD]]) #[[ATTR3]]
// CHECK-UCHAR-NEXT:    store <4 x i8> [[CALL_I_I_I_I]], ptr addrspace(4) [[OUT2]], align 4
// CHECK-UCHAR-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP0]] to ptr addrspace(1)
// CHECK-UCHAR-NEXT:    [[TMP3:%.*]] = inttoptr i64 [[TMP1]] to ptr addrspace(3)
// CHECK-UCHAR-NEXT:    [[CALL3_I_I_I:%.*]] = tail call spir_func target("spirv.Event") @_Z22__spirv_GroupAsyncCopyiPU3AS3hPU3AS1Khmm9ocl_event(i32 noundef 2, ptr addrspace(3) noundef [[TMP3]], ptr addrspace(1) noundef [[TMP2]], i64 noundef 4, i64 noundef 1, target("spirv.Event") zeroinitializer) #[[ATTR4:[0-9]+]], !noalias [[META13:![0-9]+]]
// CHECK-UCHAR-NEXT:    ret void
//
SYCL_EXTERNAL void test_char_builtins(
    char *out, char x, char y, sycl::vec<char, 4> *out2, sycl::vec<float, 4> f2,
    sycl::nd_item<2> item,
    sycl::multi_ptr<char, sycl::access::address_space::global_space> ptr_global,
    sycl::multi_ptr<char, sycl::access::address_space::local_space> ptr_local) {
  test_builtins(out, x, y, out2, f2, item, ptr_global, ptr_local);
}

// CHECK-LABEL: define dso_local spir_func void @_Z19test_schar_builtinsPaaaPN4sycl3_V13vecIaLi4EEENS2_IfLi4EEENS1_7nd_itemILi2EEENS1_9multi_ptrIaLNS1_6access13address_spaceE1ELNS9_9decoratedE2EEENS8_IaLSA_3ELSB_2EEE(
// CHECK-SAME: ptr addrspace(4) noundef writeonly captures(none) initializes((0, 7)) [[OUT:%.*]], i8 noundef signext [[X:%.*]], i8 noundef signext [[Y:%.*]], ptr addrspace(4) noundef writeonly captures(none) initializes((0, 4)) [[OUT2:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::vec") align 16 captures(none) [[F2:%.*]], ptr noundef readnone byval(%"class.sycl::_V1::nd_item") align 1 captures(none) [[ITEM:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_GLOBAL:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_LOCAL:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !sycl_fixed_targets [[META6:![0-9]+]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD:%.*]] = load <4 x float>, ptr [[F2]], align 16
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[PTR_GLOBAL]], align 8, !tbaa [[TBAA7:![0-9]+]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[PTR_LOCAL]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[CALL_I_I_I:%.*]] = tail call spir_func noundef signext i8 @_Z17__spirv_ocl_s_minaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3:[0-9]+]]
// CHECK-NEXT:    store i8 [[CALL_I_I_I]], ptr addrspace(4) [[OUT]], align 1, !tbaa [[TBAA12:![0-9]+]]
// CHECK-NEXT:    [[CALL_I_I30_I:%.*]] = tail call spir_func noundef signext i8 @_Z17__spirv_ocl_s_maxaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 1
// CHECK-NEXT:    store i8 [[CALL_I_I30_I]], ptr addrspace(4) [[ARRAYIDX2_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I31_I:%.*]] = tail call spir_func noundef signext i8 @_Z15__spirv_ocl_clza(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 2
// CHECK-NEXT:    store i8 [[CALL_I_I31_I]], ptr addrspace(4) [[ARRAYIDX4_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I32_I:%.*]] = tail call spir_func noundef signext i8 @_Z15__spirv_ocl_ctza(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX6_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 3
// CHECK-NEXT:    store i8 [[CALL_I_I32_I]], ptr addrspace(4) [[ARRAYIDX6_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I33_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_s_absa(i8 noundef signext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX8_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 4
// CHECK-NEXT:    store i8 [[CALL_I_I33_I]], ptr addrspace(4) [[ARRAYIDX8_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I34_I:%.*]] = tail call spir_func noundef signext i8 @_Z18__spirv_ocl_s_haddaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX10_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 5
// CHECK-NEXT:    store i8 [[CALL_I_I34_I]], ptr addrspace(4) [[ARRAYIDX10_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I35_I:%.*]] = tail call spir_func noundef signext i8 @_Z19__spirv_ocl_s_rhaddaa(i8 noundef signext [[X]], i8 noundef signext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX12_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 6
// CHECK-NEXT:    store i8 [[CALL_I_I35_I]], ptr addrspace(4) [[ARRAYIDX12_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I_I_I:%.*]] = tail call spir_func noundef <4 x i8> @_Z31__spirv_ConvertFToS_Rschar4_rteDv4_f(<4 x float> noundef [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD]]) #[[ATTR3]]
// CHECK-NEXT:    store <4 x i8> [[CALL_I_I_I_I]], ptr addrspace(4) [[OUT2]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP0]] to ptr addrspace(1)
// CHECK-NEXT:    [[TMP3:%.*]] = inttoptr i64 [[TMP1]] to ptr addrspace(3)
// CHECK-NEXT:    [[CALL3_I_I_I:%.*]] = tail call spir_func target("spirv.Event") @_Z22__spirv_GroupAsyncCopyiPU3AS3aPU3AS1Kamm9ocl_event(i32 noundef 2, ptr addrspace(3) noundef [[TMP3]], ptr addrspace(1) noundef [[TMP2]], i64 noundef 4, i64 noundef 1, target("spirv.Event") zeroinitializer) #[[ATTR4:[0-9]+]], !noalias [[META18:![0-9]+]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL void test_schar_builtins(
    signed char *out, signed char x, signed char y,
    sycl::vec<signed char, 4> *out2, sycl::vec<float, 4> f2,
    sycl::nd_item<2> item,
    sycl::multi_ptr<signed char, sycl::access::address_space::global_space>
        ptr_global,
    sycl::multi_ptr<signed char, sycl::access::address_space::local_space>
        ptr_local) {
  test_builtins(out, x, y, out2, f2, item, ptr_global, ptr_local);
}

// CHECK-LABEL: define dso_local spir_func void @_Z19test_schar_builtinsPhhhPN4sycl3_V13vecIhLi4EEENS2_IfLi4EEENS1_7nd_itemILi2EEENS1_9multi_ptrIhLNS1_6access13address_spaceE1ELNS9_9decoratedE2EEENS8_IhLSA_3ELSB_2EEE(
// CHECK-SAME: ptr addrspace(4) noundef writeonly captures(none) initializes((0, 7)) [[OUT:%.*]], i8 noundef zeroext [[X:%.*]], i8 noundef zeroext [[Y:%.*]], ptr addrspace(4) noundef writeonly captures(none) initializes((0, 4)) [[OUT2:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::vec") align 16 captures(none) [[F2:%.*]], ptr noundef readnone byval(%"class.sycl::_V1::nd_item") align 1 captures(none) [[ITEM:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_GLOBAL:%.*]], ptr noundef readonly byval(%"class.sycl::_V1::multi_ptr{{.*}}") align 8 captures(none) [[PTR_LOCAL:%.*]]) local_unnamed_addr #[[ATTR0]] !sycl_fixed_targets [[META6]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD:%.*]] = load <4 x float>, ptr [[F2]], align 16
// CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[PTR_GLOBAL]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[PTR_LOCAL]], align 8, !tbaa [[TBAA7]]
// CHECK-NEXT:    [[CALL_I_I_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_minhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    store i8 [[CALL_I_I_I]], ptr addrspace(4) [[OUT]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I30_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_maxhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 1
// CHECK-NEXT:    store i8 [[CALL_I_I30_I]], ptr addrspace(4) [[ARRAYIDX2_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I31_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z15__spirv_ocl_clzh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 2
// CHECK-NEXT:    store i8 [[CALL_I_I31_I]], ptr addrspace(4) [[ARRAYIDX4_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I32_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z15__spirv_ocl_ctzh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX6_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 3
// CHECK-NEXT:    store i8 [[CALL_I_I32_I]], ptr addrspace(4) [[ARRAYIDX6_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I33_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z17__spirv_ocl_u_absh(i8 noundef zeroext [[X]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX8_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 4
// CHECK-NEXT:    store i8 [[CALL_I_I33_I]], ptr addrspace(4) [[ARRAYIDX8_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I34_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z18__spirv_ocl_u_haddhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX10_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 5
// CHECK-NEXT:    store i8 [[CALL_I_I34_I]], ptr addrspace(4) [[ARRAYIDX10_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I35_I:%.*]] = tail call spir_func noundef zeroext i8 @_Z19__spirv_ocl_u_rhaddhh(i8 noundef zeroext [[X]], i8 noundef zeroext [[Y]]) #[[ATTR3]]
// CHECK-NEXT:    [[ARRAYIDX12_I:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(4) [[OUT]], i64 6
// CHECK-NEXT:    store i8 [[CALL_I_I35_I]], ptr addrspace(4) [[ARRAYIDX12_I]], align 1, !tbaa [[TBAA12]]
// CHECK-NEXT:    [[CALL_I_I_I_I:%.*]] = tail call spir_func noundef <4 x i8> @_Z31__spirv_ConvertFToU_Ruchar4_rteDv4_f(<4 x float> noundef [[AGG_TMP_SROA_0_SROA_0_0_COPYLOAD]]) #[[ATTR3]]
// CHECK-NEXT:    store <4 x i8> [[CALL_I_I_I_I]], ptr addrspace(4) [[OUT2]], align 4
// CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP0]] to ptr addrspace(1)
// CHECK-NEXT:    [[TMP3:%.*]] = inttoptr i64 [[TMP1]] to ptr addrspace(3)
// CHECK-NEXT:    [[CALL3_I_I_I:%.*]] = tail call spir_func target("spirv.Event") @_Z22__spirv_GroupAsyncCopyiPU3AS3hPU3AS1Khmm9ocl_event(i32 noundef 2, ptr addrspace(3) noundef [[TMP3]], ptr addrspace(1) noundef [[TMP2]], i64 noundef 4, i64 noundef 1, target("spirv.Event") zeroinitializer) #[[ATTR4]], !noalias [[META23:![0-9]+]]
// CHECK-NEXT:    ret void
//
SYCL_EXTERNAL void test_schar_builtins(
    unsigned char *out, unsigned char x, unsigned char y,
    sycl::vec<unsigned char, 4> *out2, sycl::vec<float, 4> f2,
    sycl::nd_item<2> item,
    sycl::multi_ptr<unsigned char, sycl::access::address_space::global_space>
        ptr_global,
    sycl::multi_ptr<unsigned char, sycl::access::address_space::local_space>
        ptr_local) {
  test_builtins(out, x, y, out2, f2, item, ptr_global, ptr_local);
}
//.
// CHECK: [[META6]] = !{}
// CHECK: [[TBAA7]] = !{[[META8:![0-9]+]], [[META8]], i64 0}
// CHECK: [[META8]] = !{!"p1 omnipotent char", [[META9:![0-9]+]], i64 0}
// CHECK: [[META9]] = !{!"any pointer", [[META10:![0-9]+]], i64 0}
// CHECK: [[META10]] = !{!"omnipotent char", [[META11:![0-9]+]], i64 0}
// CHECK: [[META11]] = !{!"Simple C++ TBAA"}
// CHECK: [[TBAA12]] = !{[[META10]], [[META10]], i64 0}
// CHECK: [[META18]] = !{[[META19:![0-9]+]], [[META21:![0-9]+]]}
// CHECK: [[META19]] = distinct !{[[META19]], [[META20:![0-9]+]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIaEENSt9enable_ifIXntsr6detail7is_boolIT_EE5valueENS0_12device_eventEE4typeENS0_9multi_ptrIS5_LNS0_6access13address_spaceE3ELNSA_9decoratedE2EEENS9_IS5_LSB_1ELSC_2EEEmm: %agg.result"}
// CHECK: [[META20]] = distinct !{[[META20]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIaEENSt9enable_ifIXntsr6detail7is_boolIT_EE5valueENS0_12device_eventEE4typeENS0_9multi_ptrIS5_LNS0_6access13address_spaceE3ELNSA_9decoratedE2EEENS9_IS5_LSB_1ELSC_2EEEmm"}
// CHECK: [[META21]] = distinct !{[[META21]], [[META22:![0-9]+]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIaEENS0_12device_eventENS0_9multi_ptrIT_LNS0_6access13address_spaceE3ELNS7_9decoratedE2EEENS5_IS6_LS8_1ELS9_2EEEm: %agg.result"}
// CHECK: [[META22]] = distinct !{[[META22]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIaEENS0_12device_eventENS0_9multi_ptrIT_LNS0_6access13address_spaceE3ELNS7_9decoratedE2EEENS5_IS6_LS8_1ELS9_2EEEm"}
// CHECK: [[META23]] = !{[[META24:![0-9]+]], [[META26:![0-9]+]]}
// CHECK: [[META24]] = distinct !{[[META24]], [[META25:![0-9]+]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIhEENSt9enable_ifIXntsr6detail7is_boolIT_EE5valueENS0_12device_eventEE4typeENS0_9multi_ptrIS5_LNS0_6access13address_spaceE3ELNSA_9decoratedE2EEENS9_IS5_LSB_1ELSC_2EEEmm: %agg.result"}
// CHECK: [[META25]] = distinct !{[[META25]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIhEENSt9enable_ifIXntsr6detail7is_boolIT_EE5valueENS0_12device_eventEE4typeENS0_9multi_ptrIS5_LNS0_6access13address_spaceE3ELNSA_9decoratedE2EEENS9_IS5_LSB_1ELSC_2EEEmm"}
// CHECK: [[META26]] = distinct !{[[META26]], [[META27:![0-9]+]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIhEENS0_12device_eventENS0_9multi_ptrIT_LNS0_6access13address_spaceE3ELNS7_9decoratedE2EEENS5_IS6_LS8_1ELS9_2EEEm: %agg.result"}
// CHECK: [[META27]] = distinct !{[[META27]], !"_ZNK4sycl3_V15groupILi2EE21async_work_group_copyIhEENS0_12device_eventENS0_9multi_ptrIT_LNS0_6access13address_spaceE3ELNS7_9decoratedE2EEENS5_IS6_LS8_1ELS9_2EEEm"}
//.
