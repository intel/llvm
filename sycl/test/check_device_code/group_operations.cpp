// RUN: %clangxx -I %sycl_include -S -emit-llvm -fsycl-device-only -ffp-model=precise -Xclang -no-enable-noundef-analysis %s -o - | FileCheck %s

#include <sycl/sycl.hpp>

using namespace sycl;

template <typename T, template <typename> class O, typename G>
[[gnu::always_inline]] void group_operations(G g) {
  T res;
  res = reduce_over_group(g, T{1}, O<T>{});
  res = inclusive_scan_over_group(g, T{1}, O<T>{});
  res = exclusive_scan_over_group(g, T{1}, O<T>{});
}

template <typename T, typename G>
[[gnu::always_inline]] void binary_operations(G g) {
  if constexpr (!detail::is_floating_point<T>::value) {
    group_operations<T, bit_and>(g);
    group_operations<T, bit_or>(g);
    group_operations<T, bit_xor>(g);
  }
  group_operations<T, maximum>(g);
  group_operations<T, minimum>(g);
  group_operations<T, multiplies>(g);
  group_operations<T, plus>(g);
}

template <typename T, typename G>
[[gnu::always_inline]] void signed_unsigned(G g) {
  binary_operations<T>(g);
  group_broadcast(g, T{1});
  group_broadcast(g, T{1}, typename G::linear_id_type{1});
  group_broadcast(g, T{1}, typename G::id_type{2});

  if constexpr (!detail::is_floating_point<T>::value) {
    binary_operations<detail::make_unsigned_t<T>>(g);
    group_broadcast(g, detail::make_unsigned_t<T>{1});
    group_broadcast(g, detail::make_unsigned_t<T>{1},
                    typename G::linear_id_type{1});
    group_broadcast(g, detail::make_unsigned_t<T>{1}, typename G::id_type{2});
  }
}

template <typename G> [[gnu::always_inline]] void test(G g) {
  signed_unsigned<int8_t>(g);
  signed_unsigned<int16_t>(g);
  signed_unsigned<int32_t>(g);
  signed_unsigned<int64_t>(g);
  signed_unsigned<half>(g);
  signed_unsigned<float>(g);
  signed_unsigned<double>(g);
}

SYCL_EXTERNAL void test_group(group<> g) { test(g); }

// int8_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 2)

// uint8_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 2)

// int16_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 2)

// uint16_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 2)

// int32_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastii{{m|y}}(i32 2, i32 1, i64 2)

// uint32_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 2, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 1, i64 2)

// int64_t (Linux: long, Windows: long long)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}{{m|y}}(i32 2, i64 1, i64 0)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}{{m|y}}(i32 2, i64 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}{{m|y}}(i32 2, i64 1, i64 2)

// uint64_t (Linux: unsigned long, Windows: unsigned long long)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 2, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 2, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 2, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}{{m|y}}(i32 2, i64 1, i64 0)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}{{m|y}}(i32 2, i64 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}{{m|y}}(i32 2, i64 1, i64 2)

// half (15360 = 0xH3C00 = 1)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 2, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 2, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 2, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 2, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 2, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 2, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 2, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 2, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 2, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 2, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 2, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 2, i32 2, half 0xH3C00)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 15360, i64 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 15360, i64 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastij{{m|y}}(i32 2, i32 15360, i64 2)

// float
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 2, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 2, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 2, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 2, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 2, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 2, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 2, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 2, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 2, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 2, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 2, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 2, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastif{{m|y}}(i32 2, float 1.000000e+00, i64 0)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastif{{m|y}}(i32 2, float 1.000000e+00, i64 1)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastif{{m|y}}(i32 2, float 1.000000e+00, i64 2)

// double
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 2, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 2, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 2, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 2, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 2, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 2, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 2, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 2, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 2, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 2, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 2, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 2, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastid{{m|y}}(i32 2, double 1.000000e+00, i64 0)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastid{{m|y}}(i32 2, double 1.000000e+00, i64 1)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastid{{m|y}}(i32 2, double 1.000000e+00, i64 2)

SYCL_EXTERNAL void test_sub_group(sub_group g) { test(g); }

// int8_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 2)

// uint8_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 2)

// int16_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 2)

// uint16_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 2)

// int32_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMaxiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupSMiniii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiii(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastiij(i32 3, i32 1, i32 2)

// uint32_t
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseAndKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseOrKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBitwiseXorKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMaxiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupUMiniij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIMulKHRiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 0, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupIAddiij(i32 3, i32 2, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 1, i32 2)

// int64_t (Linux: long, Windows: long long)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMaxii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupSMinii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{l|x}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}j(i32 3, i64 1, i32 0)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}j(i32 3, i64 1, i32 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{l|x}}j(i32 3, i64 1, i32 2)

// uint64_t (Linux: unsigned long, Windows: unsigned long long)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseAndKHRii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseOrKHRii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBitwiseXorKHRii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMaxii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupUMinii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIMulKHRii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 3, i32 0, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 3, i32 1, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupIAddii{{m|y}}(i32 3, i32 2, i64 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}j(i32 3, i64 1, i32 0)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}j(i32 3, i64 1, i32 1)
// CHECK: call spir_func i64 @_Z[[#]]__spirv_GroupBroadcasti{{m|y}}j(i32 3, i64 1, i32 2)

// half (15360 = 0xH3C00 = 1)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 3, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 3, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMaxiiDF16_(i32 3, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 3, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 3, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMiniiDF16_(i32 3, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 3, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 3, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFMulKHRiiDF16_(i32 3, i32 2, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 3, i32 0, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 3, i32 1, half 0xH3C00)
// CHECK: call spir_func half @_Z[[#]]__spirv_GroupFAddiiDF16_(i32 3, i32 2, half 0xH3C00)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 15360, i32 0)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 15360, i32 1)
// CHECK: call spir_func i32 @_Z[[#]]__spirv_GroupBroadcastijj(i32 3, i32 15360, i32 2)

// float
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 3, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 3, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMaxiif(i32 3, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 3, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 3, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMiniif(i32 3, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 3, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 3, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFMulKHRiif(i32 3, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 3, i32 0, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 3, i32 1, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupFAddiif(i32 3, i32 2, float 1.000000e+00)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastifj(i32 3, float 1.000000e+00, i32 0)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastifj(i32 3, float 1.000000e+00, i32 1)
// CHECK: call spir_func float @_Z[[#]]__spirv_GroupBroadcastifj(i32 3, float 1.000000e+00, i32 2)

// double
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 3, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 3, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMaxiid(i32 3, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 3, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 3, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMiniid(i32 3, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 3, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 3, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFMulKHRiid(i32 3, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 3, i32 0, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 3, i32 1, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupFAddiid(i32 3, i32 2, double 1.000000e+00)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastidj(i32 3, double 1.000000e+00, i32 0)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastidj(i32 3, double 1.000000e+00, i32 1)
// CHECK: call spir_func double @_Z[[#]]__spirv_GroupBroadcastidj(i32 3, double 1.000000e+00, i32 2)
