# -*- Python -*-

import os
import platform
import re
import subprocess
import tempfile

import lit.formats
import lit.util

from lit.llvm import llvm_config

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'SYCLUnitTests'

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
config.test_format = lit.formats.ShTest()

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp'] #add .spv. Currently not clear what to do with those

config.excludes = ['CMakeLists.txt', 'run_tests.sh', 'README.txt']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
config.test_exec_root = os.path.join(config.sycl_dir, 'test')

# Propagate 'LD_LIBRARY_PATH' through the environment.
if 'LD_LIBRARY_PATH' in os.environ:
    config.environment['LD_LIBRARY_PATH'] = os.path.pathsep.join((config.environment['LD_LIBRARY_PATH'], config.llvm_build_libs_dir))
else:
    config.environment['LD_LIBRARY_PATH'] = config.llvm_build_libs_dir

config.substitutions.append( ('%clang_cc1', ' ' + config.clang + ' -cc1 ') )
config.substitutions.append( ('%clang', ' ' + config.clang + ' -I'+config.opencl_include ) )
config.substitutions.append( ('%llvm_build_libs_dir',  config.llvm_build_libs_dir ) )
config.substitutions.append( ('%opencl_include',  config.opencl_include ) )
config.substitutions.append( ('%sycl_include',  config.sycl_include ) )

tools = ['llvm-spirv']
tool_dirs = [config.llvm_tools_dir]
llvm_config.add_tool_substitutions(tools, tool_dirs)

get_device_count_by_type_path = os.path.join(config.llvm_binary_dir,
    "bin", "get_device_count_by_type")

def getDeviceCount(device_type):
    process = subprocess.Popen([get_device_count_by_type_path, device_type],
        stdout=subprocess.PIPE)
    (output, err) = process.communicate()
    exit_code = process.wait()
    if exit_code == 0:
        result = output.replace('\n', '').split(':', 1)
        try:
            value = int(result[0])
        except ValueError:
            value = 0
            print("getDeviceCount {TYPE}:Cannot get value from output.".format(
                TYPE=device_type))
        if len(result) > 1 and len(result[1]):
            print("getDeviceCount {TYPE}:{MSG}".format(
                TYPE=device_type, MSG=result[1]))
        if err:
            print("getDeviceCount {TYPE}:{ERR}".format(
                TYPE=device_type, ERR=err))
        return value
    return 0


cpu_run_substitute = "echo"
cpu_check_substitute = ""
if getDeviceCount("cpu"):
    print("Found available CPU device")
    cpu_run_substitute = "env SYCL_DEVICE_TYPE=CPU "
    cpu_check_substitute = "| FileCheck %s"
config.substitutions.append( ('%CPU_RUN_PLACEHOLDER',  cpu_run_substitute) )
config.substitutions.append( ('%CPU_CHECK_PLACEHOLDER',  cpu_check_substitute) )

gpu_run_substitute = "echo"
gpu_check_substitute = ""
if getDeviceCount("gpu"):
    print("Found available GPU device")
    gpu_run_substitute = " env SYCL_DEVICE_TYPE=GPU "
    gpu_check_substitute = "| FileCheck %s"
    config.available_features.add('gpu')
config.substitutions.append( ('%GPU_RUN_PLACEHOLDER',  gpu_run_substitute) )
config.substitutions.append( ('%GPU_CHECK_PLACEHOLDER',  gpu_check_substitute) )

acc_run_substitute = "echo"
acc_check_substitute = ""
if getDeviceCount("accelerator"):
    print("Found available accelerator device")
    acc_run_substitute = " env SYCL_DEVICE_TYPE=ACC "
    acc_check_substitute = "| FileCheck %s"
config.substitutions.append( ('%ACC_RUN_PLACEHOLDER',  acc_run_substitute) )
config.substitutions.append( ('%ACC_CHECK_PLACEHOLDER',  acc_check_substitute) )

path = config.environment['PATH']
path = os.path.pathsep.join((config.llvm_tools_dir, path))
config.environment['PATH'] = path

# Set timeout for test = 10 mins
try:
    import psutil
    lit_config.maxIndividualTestTime = 600
except ImportError:
    pass
