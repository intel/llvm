//==---------- pi.h - Plugin Interface -------------------------------------==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This is the definition of a generic offload Plugin Interface (PI), which is
// used by the SYCL implementation to connect to multiple device back-ends,
// e.g. to OpenCL. The interface is intentionally kept C-only for the
// purpose of having full flexibility and interoperability with different
// environments.
//
#ifndef _PI_H_
#define _PI_H_

// Every single change in PI API should be accamponied with the minor
// version increase (+1). In the cases where backward compatibility is not
// maintained there should be a (+1) change to the major version in
// addition to the increase of the minor.
//
#define _PI_H_VERSION_MAJOR 1
#define _PI_H_VERSION_MINOR 1

// TODO: we need a mapping of PI to OpenCL somewhere, and this can be done
// elsewhere, e.g. in the pi_opencl, but constants/enums mapping is now
// done here, for efficiency and simplicity.
//
#include <CL/opencl.h>

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

typedef uint32_t    pi_uint32;
typedef uint64_t    pi_uint64;
typedef pi_uint32   pi_bool;

//
// NOTE: prefer to map 1:1 to OpenCL so that no translation is needed
// for PI <-> OpenCL ways. The PI <-> to other BE translation is almost
// always needed anyway.
//
// TODO: populate PI enums.
//
typedef enum {
  PI_SUCCESS = CL_SUCCESS
} _pi_result;

typedef enum {
  PI_PLATFORM_INFO_EXTENSIONS = CL_PLATFORM_EXTENSIONS,
  PI_PLATFORM_INFO_NAME       = CL_PLATFORM_NAME,
  PI_PLATFORM_INFO_PROFILE    = CL_PLATFORM_PROFILE,
  PI_PLATFORM_INFO_VENDOR     = CL_PLATFORM_VENDOR,
  PI_PLATFORM_INFO_VERSION    = CL_PLATFORM_VERSION,
} _pi_platform_info;

// NOTE: this is made 64-bit to match the size of cl_device_type to
// make the translation to OpenCL transparent.
//
typedef enum : pi_uint64 {
  PI_DEVICE_TYPE_CPU = CL_DEVICE_TYPE_CPU,
  PI_DEVICE_TYPE_GPU = CL_DEVICE_TYPE_GPU,
  PI_DEVICE_TYPE_ACC = CL_DEVICE_TYPE_ACCELERATOR
} _pi_device_type;

// TODO: populate and sync with cl::sycl::info::device
typedef enum {
  PI_DEVICE_INFO_TYPE           = CL_DEVICE_TYPE,
  PI_DEVICE_INFO_PARENT         = CL_DEVICE_PARENT_DEVICE,
  PI_DEVICE_INFO_PLATFORM       = CL_DEVICE_PLATFORM,
  PI_DEVICE_INFO_PARTITION_TYPE = CL_DEVICE_PARTITION_TYPE
} _pi_device_info;

typedef _pi_result                  pi_result;
typedef _pi_platform_info           pi_platform_info;
typedef _pi_device_type             pi_device_type;
typedef _pi_device_info             pi_device_info;

// Opaque data type for compatibility with OpenMP.
typedef void * _pi_offload_entry;

/// Types of device binary.
typedef uint8_t pi_device_binary_type;
static const uint8_t PI_DEVICE_BINARY_TYPE_NONE    = 0; // format is not determined
static const uint8_t PI_DEVICE_BINARY_TYPE_NATIVE  = 1; // specific to a device
// portable binary types go next
static const uint8_t PI_DEVICE_BINARY_TYPE_SPIRV   = 2;        // SPIR-V
static const uint8_t PI_DEVICE_BINARY_TYPE_LLVMIR_BITCODE = 3; // LLVM bitcode

// Device binary descriptor version supported by this library.
static const uint16_t PI_DEVICE_BINARY_VERSION = 1;

// The kind of offload model the binary employs; must be 4 for SYCL
static const uint8_t PI_DEVICE_BINARY_OFFLOAD_KIND_SYCL = 4;

/// Target identification strings for
/// pi_device_binary_struct.DeviceTargetSpec
///
#define PI_DEVICE_BINARY_TARGET_UNKNOWN "<unknown>"
#define PI_DEVICE_BINARY_TARGET_SPIRV32 "spir"
#define PI_DEVICE_BINARY_TARGET_SPIRV64 "spir64";

/// This struct is a record of the device binary information. If the Kind field
/// denotes a portable binary type (SPIRV or LLVMIR), the DeviceTargetSpec field
/// can still be specific and denote e.g. FPGA target.
/// It must match the __tgt_device_image structure generated by
/// the clang-offload-wrapper tool when their Version field match.
struct pi_device_binary_struct {
  /// version of this structure - for backward compatibility;
  /// all modifications which change order/type/offsets of existing fields
  /// should increment the version.
  uint16_t Version;
  /// the type of offload model the binary employs; must be 4 for SYCL
  uint8_t Kind;
  /// format of the binary data - SPIRV, LLVMIR bitcode,...
  uint8_t Format;
  /// null-terminated string representation of the device's target architecture
  const char *DeviceTargetSpec;
  /// a null-terminated string; target- and compiler-specific options
  /// which are suggested to use to "build" program at runtime
  const char *BuildOptions;
  /// Pointer to the manifest data start
  const char *ManifestStart;
  /// Pointer to the manifest data end
  const char *ManifestEnd;
  /// Pointer to the target code start
  const unsigned char *BinaryStart;
  /// Pointer to the target code end
  const unsigned char *BinaryEnd;
  /// the offload entry table (not used, for compatibility with OpenMP)
  _pi_offload_entry EntriesBegin;
  _pi_offload_entry EntriesEnd;
};
typedef pi_device_binary_struct * pi_device_binary;

// Offload binaries descriptor version supported by this library.
static const uint16_t PI_DEVICE_BINARIES_VERSION = 1;

/// This struct is a record of all the device code that may be offloaded.
/// It must match the __tgt_bin_desc structure generated by
/// the clang-offload-wrapper tool when their Version field match.
struct pi_device_binaries_struct {
  /// version of this structure - for backward compatibility;
  /// all modifications which change order/type/offsets of existing fields
  /// should increment the version.
  uint16_t Version;
  /// Number of device binaries in this descriptor
  uint16_t NumDeviceBinaries;
  /// Device binaries data
  pi_device_binary DeviceBinaries;
  /// the offload entry table (not used, for compatibility with OpenMP)
  _pi_offload_entry *HostEntriesBegin;
  _pi_offload_entry *HostEntriesEnd;
};
typedef pi_device_binaries_struct *  pi_device_binaries;

// Opaque types that make reading build log errors easier.
class _pi_platform;
class _pi_device;
class _pi_context;

typedef _pi_platform *    pi_platform;
typedef _pi_device *      pi_device;
typedef _pi_context *     pi_context;
// TODO: remove dependency on OpenCL
typedef cl_program        pi_program;

//
// Following section contains SYCL RT Plugin Interface (PI) methods
// having direct analogy in OpenCL, and needed for the core SYCL
// functionality. The convention is to prefix such interfaces with "pi".
//
// TODO: describe interfaces in Doxygen format
//

// Platform
pi_result piPlatformsGet(
  pi_uint32      num_entries,
  pi_platform *  platforms,
  pi_uint32 *    num_platforms);

pi_result piPlatformGetInfo(
  pi_platform       platform,
  pi_platform_info  param_name,
  size_t            param_value_size,
  void *            param_value,
  size_t *          param_value_size_ret);

// Device
pi_result piDevicesGet(
  pi_platform      platform,
  pi_device_type   device_type,
  pi_uint32        num_entries,
  pi_device *      devices,
  pi_uint32 *      num_devices);

pi_result piDeviceGetInfo(
  pi_device       device,
  pi_device_info  param_name,
  size_t          param_value_size,
  void *          param_value,
  size_t *        param_value_size_ret);

pi_result piDeviceRetain(pi_device device);

pi_result piDeviceRelease(pi_device device);

pi_result piDevicePartition(
  pi_device     device,
  const cl_device_partition_property * properties,
  pi_uint32     num_devices,
  pi_device *   out_devices,
  pi_uint32 *   out_num_devices);

//
// The following section contains SYCL RT Plugin Interface (PI) methods
// having direct analogy in OpenCL, but only needed for greater
// interoperability with the OpenCL itself, and not to run core SYCL.
// The convention is to prefix such interfaces with "picl".
//
// TODO: describe interfaces in Doxygen format

pi_program piclProgramCreateWithSource( // TODO:  change to return pi_result
  pi_context        context,
  pi_uint32         count,
  const char **     strings,
  const size_t *    lengths,
  pi_result *       errcode);


//
// The following section contains SYCL RT Plugin Interface (PI) methods
// having *no* direct analogy in OpenCL standard. The convention is
// to prefix such interfaces with "piext".
//
// TODO: describe interfaces in Doxygen format

/// Selects the most appropriate device binary based on runtime information
/// and the IR characteristics.
///
pi_result piextDeviceSelectBinary(
  pi_device           device, // TODO: does this need to be context?
  pi_device_binary *  binaries,
  pi_uint32           num_binaries,
  pi_device_binary *  selected_binary);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif // _PI_H_
