//===-- pi.h - SYCL Plug-in interface ---------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// This source is the definition of the SYCL PI Interface. It is the interface
// between the device-agnostic SYCL runtime layer and underlying "native"
// runtimes such as OpenCL.

#pragma once

#include "CL/opencl.h"

#include <stdint.h>


// Macro defines version of SYCL Plug-in interface. The version is supposed to
// be increased on any functional change, such as adding/removing function,
// changing function signature.
#define PI_VERSION 1

/// Target identification strings
#define PI_TGT_STR_UNKNOWN "<unknown>"
#define PI_TGT_STR_SPIRV32 "spir"
#define PI_TGT_STR_SPIRV64 "spir64"

/// Kinds of device images
enum pi_device_image_format {
  PI_IMG_NONE,   // image format is not determined
  PI_IMG_NATIVE, // image format is specific to a device
  // portable image kinds go next
  PI_IMG_SPIRV,         // SPIR-V
  PI_IMG_LLVMIR_BITCODE // LLVM bitcode
};

typedef void __tgt_offload_entry;

// Device image descriptor version supported by this library.
#define PI_DEVICE_IMAGE_STRUCT_VERSION ((uint16_t)1)
#define SYCL_OFFLOAD_KIND ((uint8_t)4)

/// This struct is a record of the device image information. If the Kind field
/// denotes a portable image kind (SPIRV or LLVMIR), the DeviceTargetSpec field
/// can still be specific and denote e.g. FPGA target.
/// It must match the __tgt_device_image structure generated by
/// the clang-offload-wrapper tool when their Version field match.
struct pi_device_image {
  /// version of this structure - for backward compatibility;
  /// all modifications which change order/type/offsets of existing fields
  /// should increment the version.
  uint16_t Version;
  /// the kind of offload model the image employs; must be 4 for SYCL
  uint8_t Kind;
  /// format of the image data - SPIRV, LLVMIR bitcode,...
  uint8_t Format;
  /// null-terminated string representation of the device's target architecture
  const char *DeviceTargetSpec;
  /// a null-terminated string; target- and compiler-specific options
  /// which are suggested to use to "build" program at runtime
  const char *BuildOptions;
  /// Pointer to the manifest data start
  const unsigned char *ManifestStart;
  /// Pointer to the manifest data end
  const unsigned char *ManifestEnd;
  /// Pointer to the target code start
  const unsigned char *ImageStart;
  /// Pointer to the target code end
  const unsigned char *ImageEnd;
  /// the offload entry table (not used, for compatibility with OpenMP)
  __tgt_offload_entry *EntriesBegin;
  __tgt_offload_entry *EntriesEnd;
};

// Offload binary descriptor version supported by this library.
#define PI_BIN_DESC_STRUCT_VERSION ((uint16_t)1)

/// This struct is a record of all the device code that may be offloaded.
/// It must match the __tgt_bin_desc structure generated by
/// the clang-offload-wrapper tool when their Version field match.
struct pi_bin_desc {
  /// version of this structure - for backward compatibility;
  /// all modifications which change order/type/offsets of existing fields
  /// should increment the version.
  uint16_t Version;
  /// Number of device binary images in this descriptor
  uint16_t NumDeviceImages;
  /// Device binary images data
  pi_device_image *DeviceImages;
  /// the offload entry table (not used, for compatibility with OpenMP)
  __tgt_offload_entry *HostEntriesBegin;
  __tgt_offload_entry *HostEntriesEnd;
};

// TODO For now code below is a placeholder for future real implementation
typedef cl_platform_id pi_platform_id;
typedef cl_device_id pi_device_id;
typedef cl_context pi_context;
typedef cl_command_queue pi_command_queue;
typedef cl_program pi_program;
typedef cl_kernel pi_kernel;
typedef cl_mem pi_mem;
typedef cl_event pi_event;
typedef cl_sampler pi_sampler;

typedef cl_int pi_int;
typedef cl_uint pi_uint;

typedef cl_bool pi_bool;
typedef cl_bitfield pi_bitfield;

typedef cl_device_type pi_device_type;
typedef cl_platform_info pi_platform_info;
typedef cl_device_info pi_device_info;
typedef cl_device_fp_config pi_device_fp_config;
typedef cl_device_mem_cache_type pi_device_mem_cache_type;
typedef cl_device_local_mem_type pi_device_local_mem_type;
typedef cl_device_exec_capabilities pi_device_exec_capabilities;
typedef cl_command_queue_properties pi_command_queue_properties;
typedef cl_queue_properties pi_queue_properties;

typedef cl_device_partition_property pi_device_partition_property;
typedef cl_device_affinity_domain pi_device_affinity_domain;

typedef cl_context_properties pi_context_properties;
typedef cl_context_info pi_context_info;
typedef cl_command_queue_info pi_command_queue_info;
typedef cl_channel_order pi_channel_order;
typedef cl_channel_type pi_channel_type;
typedef cl_mem_flags pi_mem_flags;
typedef cl_mem_object_type pi_mem_object_type;
typedef cl_mem_info pi_mem_info;
typedef cl_image_info pi_image_info;

typedef cl_buffer_create_type pi_buffer_create_type;

typedef cl_kernel_sub_group_info pi_kernel_sub_group_info;

typedef cl_addressing_mode pi_addressing_mode;
typedef cl_filter_mode pi_filter_mode;
typedef cl_sampler_info pi_sampler_info;
typedef cl_map_flags pi_map_flags;
typedef cl_program_info pi_program_info;
typedef cl_program_build_info pi_program_build_info;
typedef cl_program_binary_type pi_program_binary_type;
typedef cl_build_status pi_build_status;
typedef cl_kernel_info pi_kernel_info;
typedef cl_kernel_arg_info pi_kernel_arg_info;
typedef cl_kernel_arg_address_qualifier pi_kernel_arg_address_qualifier;
typedef cl_kernel_arg_access_qualifier pi_kernel_arg_access_qualifier;
typedef cl_kernel_arg_type_qualifier pi_kernel_arg_type_qualifier;
typedef cl_kernel_work_group_info pi_kernel_work_group_info;
typedef cl_event_info pi_event_info;
typedef cl_command_type pi_command_type;
typedef cl_profiling_info pi_profiling_info;

enum { PI_SUCCESS = CL_SUCCESS };

#define PI_MEM_READ_WRITE CL_MEM_READ_WRITE
#define PI_MEM_COPY_HOST_PTR CL_MEM_COPY_HOST_PTR
#define PI_MEM_USE_HOST_PTR CL_MEM_USE_HOST_PTR

#define PI_CALLBACK CL_CALLBACK

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/// Selects the most appropriate device image based on runtime information and
/// the image characteristics
pi_int piSelectDeviceImage(pi_context ctx, pi_device_image **images,
                           pi_uint num_images,
                           pi_device_image **selected_image);

pi_int piGetPlatformInfo(pi_platform_id platform, pi_platform_info param_name,
                         size_t param_value_size, void *param_value,
                         size_t *param_value_size_ret);

pi_command_queue piCreateCommandQueue(pi_context context, pi_device_id device,
                                      pi_command_queue_properties properties,
                                      pi_int *errcode_ret);

pi_int piGetDeviceInfo(pi_device_id device, pi_device_info param_name,
                       size_t param_value_size, void *param_value,
                       size_t *param_value_size_ret);

pi_int piSetKernelArg(pi_kernel kernel, pi_uint arg_index, size_t arg_size,
                      const void *arg_value);
pi_int piEnqueueNDRangeKernel(pi_command_queue command_queue, pi_kernel kernel,
                              pi_uint work_dim,
                              const size_t *global_work_offset,
                              const size_t *global_work_size,
                              const size_t *local_work_size,
                              pi_uint num_events_in_wait_list,
                              const pi_event *event_wait_list, pi_event *event);

pi_program piLinkProgram(pi_context context, pi_uint num_devices,
                         const pi_device_id *device_list, const char *options,
                         pi_uint num_input_programs,
                         const pi_program *input_programs,
                         void(PI_CALLBACK *pfn_notify)(pi_program program,
                                                       void *user_data),
                         void *user_data, pi_int *errcode_ret);

pi_program piCreateProgramWithSource(pi_context context, pi_uint count,
                                     const char **strings,
                                     const size_t *lengths,
                                     pi_int *errcode_ret);

pi_kernel piCreateKernel(pi_program program, const char *kernel_name,
                         pi_int *errcode_ret);

pi_int piGetPlatformIDs(pi_uint num_entries, pi_platform_id *platforms,
                        pi_uint *num_platforms);

pi_int piGetDeviceIDs(pi_platform_id platform, pi_device_type device_type,
                      pi_uint num_entries, pi_device_id *devices,
                      pi_uint *num_devices);

pi_int piGetEventInfo(pi_event event, pi_event_info param_name,
                      size_t param_value_size, void *param_value,
                      size_t *param_value_size_ret);

pi_int piWaitForEvents(pi_uint num_events, const pi_event *event_list);

pi_mem piCreateBuffer(pi_context context, pi_mem_flags flags, size_t size,
                      void *host_ptr, pi_int *errcode_ret);

pi_int piGetProgramInfo(pi_program program, pi_program_info param_name,
                        size_t param_value_size, void *param_value,
                        size_t *param_value_size_ret);

pi_context piCreateContext(
    const pi_context_properties *properties, pi_uint num_devices,
    const pi_device_id *devices,
    void(PI_CALLBACK *pfn_notify)(const char *errinfo, const void *private_info,
                                  size_t cb, void *user_data),
    void *user_data, pi_int *errcode_ret);

pi_int piGetContextInfo(pi_context context, pi_context_info param_name,
                        size_t param_value_size, void *param_value,
                        size_t *param_value_size_ret);

pi_program piCreateProgramWithBinary(pi_context context, pi_uint num_devices,
                                     const pi_device_id *device_list,
                                     const size_t *lengths,
                                     const unsigned char **binaries,
                                     pi_int *binary_status,
                                     pi_int *errcode_ret);

pi_program piCreateProgramWithIL(pi_context context, const void *il,
                                 size_t length, pi_int *errcode_ret);

pi_int piRetainEvent(pi_event event);

pi_int piGetCommandQueueInfo(pi_command_queue command_queue,
                             pi_command_queue_info param_name,
                             size_t param_value_size, void *param_value,
                             size_t *param_value_size_ret);

pi_int piReleaseMemObject(pi_mem memobj);

pi_int piEnqueueWriteBuffer(pi_command_queue command_queue, pi_mem buffer,
                            pi_bool blocking_write, size_t offset, size_t size,
                            const void *ptr, pi_uint num_events_in_wait_list,
                            const pi_event *event_wait_list, pi_event *event);

pi_int
piEnqueueWriteBufferRect(pi_command_queue command_queue, pi_mem buffer,
                         pi_bool blocking_write, const size_t *buffer_offset,
                         const size_t *host_offset, const size_t *region,
                         size_t buffer_row_pitch, size_t buffer_slice_pitch,
                         size_t host_row_pitch, size_t host_slice_pitch,
                         const void *ptr, pi_uint num_events_in_wait_list,
                         const pi_event *event_wait_list, pi_event *event);

pi_int piEnqueueReadBuffer(pi_command_queue command_queue, pi_mem buffer,
                           pi_bool blocking_read, size_t offset, size_t size,
                           void *ptr, pi_uint num_events_in_wait_list,
                           const pi_event *event_wait_list, pi_event *event);

pi_int
piEnqueueReadBufferRect(pi_command_queue command_queue, pi_mem buffer,
                        pi_bool blocking_read, const size_t *buffer_offset,
                        const size_t *host_offset, const size_t *region,
                        size_t buffer_row_pitch, size_t buffer_slice_pitch,
                        size_t host_row_pitch, size_t host_slice_pitch,
                        void *ptr, pi_uint num_events_in_wait_list,
                        const pi_event *event_wait_list, pi_event *event);

pi_int piEnqueueFillBuffer(pi_command_queue command_queue, pi_mem buffer,
                           const void *pattern, size_t pattern_size,
                           size_t offset, size_t size,
                           pi_uint num_events_in_wait_list,
                           const pi_event *event_wait_list, pi_event *event);

pi_int piRetainContext(pi_context context);

pi_int piReleaseContext(pi_context context);

pi_int piGetKernelInfo(pi_kernel kernel, pi_kernel_info param_name,
                       size_t param_value_size, void *param_value,
                       size_t *param_value_size_ret);

pi_int piBuildProgram(pi_program program, pi_uint num_devices,
                      const pi_device_id *device_list, const char *options,
                      void(PI_CALLBACK *pfn_notify)(pi_program program,
                                                    void *user_data),
                      void *user_data);

pi_int piRetainCommandQueue(pi_command_queue command_queue);

pi_int piReleaseCommandQueue(pi_command_queue command_queue);

pi_int piFinish(pi_command_queue command_queue);

pi_int piGetKernelWorkGroupInfo(pi_kernel kernel, pi_device_id device,
                                pi_kernel_work_group_info param_name,
                                size_t param_value_size, void *param_value,
                                size_t *param_value_size_ret);

pi_int piGetKernelSubGroupInfo(pi_kernel kernel, pi_device_id device,
                               pi_kernel_sub_group_info param_name,
                               size_t input_value_size, const void *input_value,
                               size_t param_value_size, void *param_value,
                               size_t *param_value_size_ret);

pi_int piGetMemObjectInfo(pi_mem memobj, pi_mem_info param_name,
                          size_t param_value_size, void *param_value,
                          size_t *param_value_size_ret);

pi_int piRetainMemObject(pi_mem memobj);

pi_int piReleaseMemObject(pi_mem memobj);

pi_int piCreateSubDevices(pi_device_id in_device,
                          const pi_device_partition_property *properties,
                          pi_uint num_devices, pi_device_id *out_devices,
                          pi_uint *num_devices_ret);

pi_int piRetainDevice(pi_device_id device);

pi_int piReleaseDevice(pi_device_id device);

pi_int piSetKernelArg(pi_kernel kernel, pi_uint arg_index, size_t arg_size,
                      const void *arg_value);

pi_int piRetainProgram(pi_program program);

pi_int piReleaseProgram(pi_program program);

pi_int piCompileProgram(
    pi_program program, pi_uint num_devices, const pi_device_id *device_list,
    const char *options, pi_uint num_input_headers,
    const pi_program *input_headers, const char **header_inpiude_names,
    void(PI_CALLBACK *pfn_notify)(pi_program program, void *user_data),
    void *user_data);

pi_int piGetEventInfo(pi_event event, pi_event_info param_name,
                      size_t param_value_size, void *param_value,
                      size_t *param_value_size_ret);

pi_event piCreateUserEvent(pi_context context, pi_int *errcode_ret);

pi_int piRetainEvent(pi_event event);

pi_int piReleaseEvent(pi_event event);

pi_int piSetUserEventStatus(pi_event event, pi_int execution_status);

pi_int piSetEventCallback(
    pi_event event, pi_int command_exec_callback_type,
    void(PI_CALLBACK *pfn_notify)(pi_event event, pi_int event_command_status,
                                  void *user_data),
    void *user_data);

pi_int piGetEventProfilingInfo(pi_event event, pi_profiling_info param_name,
                               size_t param_value_size, void *param_value,
                               size_t *param_value_size_ret);

pi_int piEnqueueCopyBuffer(pi_command_queue command_queue, pi_mem src_buffer,
                           pi_mem dst_buffer, size_t src_offset,
                           size_t dst_offset, size_t size,
                           pi_uint num_events_in_wait_list,
                           const pi_event *event_wait_list, pi_event *event);

pi_int piEnqueueCopyBufferRect(
    pi_command_queue command_queue, pi_mem src_buffer, pi_mem dst_buffer,
    const size_t *src_origin, const size_t *dst_origin, const size_t *region,
    size_t src_row_pitch, size_t src_slice_pitch, size_t dst_row_pitch,
    size_t dst_slice_pitch, pi_uint num_events_in_wait_list,
    const pi_event *event_wait_list, pi_event *event);

pi_int piFlush(pi_command_queue command_queue);

#ifdef __cplusplus
}
#endif // __cplusplus

#define CHECK_PI_CODE(x) CHECK_OCL_CODE(x)
#define CHECK_PI_CODE_NO_EXC(x) CHECK_OCL_CODE_NO_EXC(x)
