#include <iomanip>
#define TM 8
#define TN 16
#define TK 16

#define BF16_EPSILON 0.00781250

float make_fp32(bfloat16 x) {
  unsigned int y = *((int *)&x);
  y = y << 16;
  float *res = reinterpret_cast<float *>(&y);
  return *res;
}


template <typename T, size_t NUM_ROWS, size_t NUM_COLS> struct big_matrix {
private:
  T *mat;

public:
  T *get_data() { return mat; }
  void set_data(T *data) { mat = data; }
  big_matrix(T *data) : mat(data) {}
};

big_matrix<bfloat16, 8, 32> MB_store(nullptr);

template <typename T1, typename T2, size_t M, size_t N, size_t K>
void matrix_multiply(big_matrix<T1, M, N> &C, big_matrix<T2, M, K> &A,
                     big_matrix<T2, K / 2, N * 2> &B) {
  size_t NDRangeM = M / TM;
  size_t NDRangeN = N / TN;
  buffer<bfloat16, 2> bufA(A.get_data(), range<2>(M, K));
  buffer<bfloat16, 2> bufB(B.get_data(), range<2>(K, N));
//  buffer<bfloat16, 2> bufB_store(MB_store.get_data(), range<2>(K, N));
  buffer<float, 2> bufC((float *)C.get_data(), range<2>(M, N));

  queue q;
  q.submit([&](handler &cgh) {
     auto accC = bufC.get_access<access::mode::read_write>(cgh);
     auto accA = bufA.get_access<access::mode::read_write>(cgh);
     auto accB = bufB.get_access<access::mode::read_write>(cgh);
     //auto accB_store = bufB_store.get_access<access::mode::read_write>(cgh);

  //   auto os = sycl::stream{2048, 2048, cgh};

     cgh.parallel_for<class imatrix>(
         nd_range<2>({NDRangeM, NDRangeN * SG_SZ}, {1, 1 * SG_SZ}),
         [=](nd_item<2> spmd_item) [[intel::reqd_sub_group_size(SG_SZ)]]

         {
           // The submatrix API has to be accessed by all the workitems in a
           // subgroup these functions will be called once by the subgroup no
           // code divergence between the workitems
           const auto global_idx = spmd_item.get_global_id(0);
           const auto global_idy = spmd_item.get_global_id(1);
           const auto sg_startx = global_idx - spmd_item.get_local_id(0);
           const auto sg_starty = global_idy - spmd_item.get_local_id(1);

           //os << spmd_item << ": ";

           sub_group sg = spmd_item.get_sub_group();
           joint_matrix<sub_group, bfloat16, use::a, TM, TK, layout::row_major> sub_a;
           // For B, we assume B has been already VNNIed.
           joint_matrix<sub_group, bfloat16, use::b, TK, TN,
                        ext::intel::experimental::matrix::layout::packed> sub_b;
           joint_matrix<sub_group, float, use::accumulator, TM, TN> sub_c;

           joint_matrix_load(
               sg, sub_c,
               accC.template get_multi_ptr<access::decorated::no>() +
                   (sg_startx * TM) * N + sg_starty / SG_SZ * TN,
               N, layout::row_major);

            //   os << "C init: ";
            //  auto wi_slice_c = sycl::ext::intel::experimental::matrix::get_wi_data(sg, sub_c);
            //  for (int i = 0; i < wi_slice_c.length(); i++) {
            //    os << wi_slice_c[i] << " ";
            //  }


//           for (int k = 0; k < K / TK; k += 1) { //
             int k = 0;
             joint_matrix_load(
                 sg, sub_a,
                 accA.template get_multi_ptr<access::decorated::no>() +
                     (sg_startx * TM) * K + k * TK,
                 K);

            // os << "A: ";
            //  auto wi_slice_a = sycl::ext::intel::experimental::matrix::get_wi_data(sg, sub_a);
            //  for (int i = 0; i < wi_slice_a.length(); i++) {
            //    os << make_fp32(wi_slice_a[i]) << " ";
            //  }
              joint_matrix_load(
                  sg, sub_b,
                  accB.template get_multi_ptr<access::decorated::no>() +
                      (k * TK / 2) * (N * 2) + sg_starty / SG_SZ * TN * 2,
                  N * 2);
            // os << "B: ";
            //  auto wi_slice_b = sycl::ext::intel::experimental::matrix::get_wi_data(sg, sub_b);
            //  for (int i = 0; i < wi_slice_b.length(); i++) {
            //    os << make_fp32(wi_slice_b[i]) << " ";
            //  }

              // sycl::ext::intel::experimental::matrix::joint_matrix_store(
              //     sg, sub_b,
              //     accB_store.template get_multi_ptr<access::decorated::no>() +
              //         (k * TK / 2) * (N * 2) + sg_starty / SG_SZ * TN * 2,
              //     N * 2);



               sub_c = joint_matrix_mad(sg, sub_a, sub_b, sub_c);
              // os << "C result: ";
              //  auto wi_slice_c =
              //      sycl::ext::intel::experimental::matrix::get_wi_data(sg,
              //                                                          sub_c);
              //  for (int i = 0; i < wi_slice_c.length(); i++) {
              //    os << wi_slice_c[i] << " ";
              //  }
//           }
           joint_matrix_store(
               sg, sub_c,
               accC.template get_multi_ptr<access::decorated::no>() +
                   (sg_startx * TM) * N + sg_starty / SG_SZ * TN,
               N, layout::row_major);

              //os << "\n";
         }); // parallel for
   }).wait();
}

static constexpr size_t MATRIX_M = TM;// * 2;
static constexpr size_t MATRIX_N = TN;// * 2;
static constexpr size_t MATRIX_K = TK;// * 2;
bfloat16 A[MATRIX_M][MATRIX_K];
bfloat16 B[MATRIX_K / 2][MATRIX_N * 2];
bfloat16 B_store[MATRIX_K / 2][MATRIX_N * 2];
float C[MATRIX_M][MATRIX_N];
float D[MATRIX_M][MATRIX_N];

void matrix_multiply_ref(int *A_mem, int *B_mem, int *C_mem, int M, int N,
                         int K) {
  for (int m = 0; m < M; m++)
    for (int n = 0; n < N; n++) {
      for (int k = 0; k < K; k++) {
        // Because B was assumed VNNIed
        bfloat16 *va = (bfloat16 *)(A_mem + m * K + k);
        bfloat16 *vb = (bfloat16 *)(B_mem + k * N + n);
        float acc = *((float *)(C_mem + m * N + n));
        for (int i = 0; i < 2; i++) {
          acc += (make_fp32(va[i]) * make_fp32(vb[i]));
        }
        *((float *)(C_mem + m * N + n)) = acc;
      }
    }
}

int main() {
  int c = 0;
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_K; j++) {
      //A[i][j] = bfloat16(1.0f * (i + j)); // orig
      //A[i][j] = bfloat16(1.0f * c++); // 1, 2, 3, ...
//       A[i][j] = bfloat16(1.0f); // 1, 1, 1, 1, 1
      if (i == j)
        A[i][j] = bfloat16(1.0f);
      else
        A[i][j] = bfloat16(0.0f);
    }
  }
  c = 0;
  for (int i = 0; i < MATRIX_K / 2; i++) {
    for (int j = 0; j < MATRIX_N * 2; j++) {
      //B[i][j] = bfloat16(2.0f * i + 3.0f * j);
      B[i][j] = bfloat16(1.0f * c++);
      //B[i][j] = bfloat16(1.0f);
    }
  }
  c = 0;
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      // C[i][j] = D[i][j] = 1.0;
      //C[i][j] = D[i][j] = c;
      C[i][j] = D[i][j] = 0.0;
      ++c;
    }
  }

  big_matrix<float, MATRIX_M, MATRIX_N> MC((float *)&C);
  big_matrix<float, MATRIX_M, MATRIX_N> MD((float *)&D);
  big_matrix<bfloat16, MATRIX_M, MATRIX_K> MA((bfloat16 *)&A);
  big_matrix<bfloat16, MATRIX_K / 2, MATRIX_N * 2> MB((bfloat16 *)&B);
  //MB_store.set_data((bfloat16 *)&B_store);

  std::cout << "A: " << "\n";
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_K; j++) {
      std::cout << std::setw(3);
      std::cout << MA.get_data()[i*MATRIX_K + j] << " ";
    }
    std::cout << "\n";
  }
  std::cout << "B: " << "\n";
  for (int i = 0; i < MATRIX_K / 2; i++) {
    for (int j = 0; j < MATRIX_N * 2; j++) {
      std::cout << std::setw(3);
      std::cout << MB.get_data()[i*MATRIX_N*2 + j] << " ";
    }
    std::cout << "\n";
  }
  // std::cout << "B store: " << "\n";
  // for (int i = 0; i < MATRIX_K / 2; i++) {
  //   for (int j = 0; j < MATRIX_N * 2; j++) {
  //     std::cout << std::setw(3);
  //     std::cout << MB_store.get_data()[i*MATRIX_N*2 + j] << " ";
  //   }
  //   std::cout << "\n";
  // }
  std::cout << "C: " << "\n";
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      std::cout << std::setw(3);
      std::cout << MC.get_data()[i*MATRIX_N + j] << " ";
    }
    std::cout << "\n";
  }

  matrix_multiply(MC, MA, MB);
  matrix_multiply_ref((int32_t *)A, (int32_t *)B, (int32_t *)D, MATRIX_M,
                      MATRIX_N, MATRIX_K / 2);

  // std::cout << "B store after: " << "\n";
  // for (int i = 0; i < MATRIX_K / 2; i++) {
  //   for (int j = 0; j < MATRIX_N * 2; j++) {
  //     std::cout << std::setw(3);
  //     std::cout << MB_store.get_data()[i*MATRIX_N*2 + j] << " ";
  //   }
  //   std::cout << "\n";
  // }


  std::cout << "C result: " << "\n";
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      std::cout << std::setw(5);
      std::cout << MC.get_data()[i*MATRIX_N + j] << " ";
    }
    std::cout << "\n";
  }

  std::cout << "D: " << "\n";
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      std::cout << std::setw(5);
      std::cout << MD.get_data()[i*MATRIX_N + j] << " ";
    }
    std::cout << "\n";
  }

  std::cout << "Difference: " << "\n";
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      std::cout << std::setw(5);
      std::cout << MD.get_data()[i*MATRIX_N + j] -  MC.get_data()[i*MATRIX_N + j] << " ";
    }
    std::cout << "\n";
  }


  bool res = true;
  for (int i = 0; i < MATRIX_M; i++) {
    for (int j = 0; j < MATRIX_N; j++) {
      //std::cout << i << "," << j << ": " << D[i][j] << "; " << C[i][j] << "\n";
      if (fabs(C[i][j] - D[i][j]) > BF16_EPSILON)
        res = false;
    }
  }
  std::cout << (res ? "passed" : "failed") << std::endl;
  return !res;
}
