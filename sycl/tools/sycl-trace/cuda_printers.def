case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGetErrorString): {
const auto *Args = reinterpret_cast<const cuGetErrorString_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "error: <non-printable>" << "\n";
PrintOffset();
std::cout << "pStr: " << Args->pStr << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGetErrorName): {
const auto *Args = reinterpret_cast<const cuGetErrorName_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "error: <non-printable>" << "\n";
PrintOffset();
std::cout << "pStr: " << Args->pStr << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuInit): {
const auto *Args = reinterpret_cast<const cuInit_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDriverGetVersion): {
const auto *Args = reinterpret_cast<const cuDriverGetVersion_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "driverVersion: " << Args->driverVersion << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGet): {
const auto *Args = reinterpret_cast<const cuDeviceGet_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "device: <non-printable>" << "\n";
PrintOffset();
std::cout << "ordinal: " << Args->ordinal << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetCount): {
const auto *Args = reinterpret_cast<const cuDeviceGetCount_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "count: " << Args->count << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetName): {
const auto *Args = reinterpret_cast<const cuDeviceGetName_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "name: " << Args->name << "\n";
PrintOffset();
std::cout << "len: " << Args->len << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetUuid): {
const auto *Args = reinterpret_cast<const cuDeviceGetUuid_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "uuid: <non-printable>" << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetLuid): {
const auto *Args = reinterpret_cast<const cuDeviceGetLuid_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "luid: " << Args->luid << "\n";
PrintOffset();
std::cout << "deviceNodeMask: " << Args->deviceNodeMask << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetNvSciSyncAttributes): {
const auto *Args = reinterpret_cast<const cuDeviceGetNvSciSyncAttributes_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "nvSciSyncAttrList: " << Args->nvSciSyncAttrList << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceSetMemPool): {
const auto *Args = reinterpret_cast<const cuDeviceSetMemPool_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "pool: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetMemPool): {
const auto *Args = reinterpret_cast<const cuDeviceGetMemPool_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pool: <non-printable>" << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuFlushGPUDirectRDMAWrites): {
const auto *Args = reinterpret_cast<const cuFlushGPUDirectRDMAWrites_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "target: <non-printable>" << "\n";
PrintOffset();
std::cout << "scope: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetProperties): {
const auto *Args = reinterpret_cast<const cuDeviceGetProperties_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "prop: <non-printable>" << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceComputeCapability): {
const auto *Args = reinterpret_cast<const cuDeviceComputeCapability_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "major: " << Args->major << "\n";
PrintOffset();
std::cout << "minor: " << Args->minor << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRetain): {
const auto *Args = reinterpret_cast<const cuDevicePrimaryCtxRetain_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxGetState): {
const auto *Args = reinterpret_cast<const cuDevicePrimaryCtxGetState_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
PrintOffset();
std::cout << "active: " << Args->active << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetExecAffinitySupport): {
const auto *Args = reinterpret_cast<const cuDeviceGetExecAffinitySupport_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pi: " << Args->pi << "\n";
PrintOffset();
std::cout << "type: <non-printable>" << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxSetCurrent): {
const auto *Args = reinterpret_cast<const cuCtxSetCurrent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetCurrent): {
const auto *Args = reinterpret_cast<const cuCtxGetCurrent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetDevice): {
const auto *Args = reinterpret_cast<const cuCtxGetDevice_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "device: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetFlags): {
const auto *Args = reinterpret_cast<const cuCtxGetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetSharedMemConfig): {
const auto *Args = reinterpret_cast<const cuCtxGetSharedMemConfig_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pConfig: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxSetSharedMemConfig): {
const auto *Args = reinterpret_cast<const cuCtxSetSharedMemConfig_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "config: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetApiVersion): {
const auto *Args = reinterpret_cast<const cuCtxGetApiVersion_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ctx: <non-printable>" << "\n";
PrintOffset();
std::cout << "version: " << Args->version << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetStreamPriorityRange): {
const auto *Args = reinterpret_cast<const cuCtxGetStreamPriorityRange_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "leastPriority: " << Args->leastPriority << "\n";
PrintOffset();
std::cout << "greatestPriority: " << Args->greatestPriority << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxGetExecAffinity): {
const auto *Args = reinterpret_cast<const cuCtxGetExecAffinity_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pExecAffinity: <non-printable>" << "\n";
PrintOffset();
std::cout << "type: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxAttach): {
const auto *Args = reinterpret_cast<const cuCtxAttach_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxDetach): {
const auto *Args = reinterpret_cast<const cuCtxDetach_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleLoad): {
const auto *Args = reinterpret_cast<const cuModuleLoad_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "module: <non-printable>" << "\n";
PrintOffset();
std::cout << "fname: " << Args->fname << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleLoadData): {
const auto *Args = reinterpret_cast<const cuModuleLoadData_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "module: <non-printable>" << "\n";
PrintOffset();
std::cout << "image: " << Args->image << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleLoadFatBinary): {
const auto *Args = reinterpret_cast<const cuModuleLoadFatBinary_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "module: <non-printable>" << "\n";
PrintOffset();
std::cout << "fatCubin: " << Args->fatCubin << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleUnload): {
const auto *Args = reinterpret_cast<const cuModuleUnload_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hmod: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleGetFunction): {
const auto *Args = reinterpret_cast<const cuModuleGetFunction_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "hmod: <non-printable>" << "\n";
PrintOffset();
std::cout << "name: " << Args->name << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleGetTexRef): {
const auto *Args = reinterpret_cast<const cuModuleGetTexRef_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "hmod: <non-printable>" << "\n";
PrintOffset();
std::cout << "name: " << Args->name << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuModuleGetSurfRef): {
const auto *Args = reinterpret_cast<const cuModuleGetSurfRef_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pSurfRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "hmod: <non-printable>" << "\n";
PrintOffset();
std::cout << "name: " << Args->name << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLinkDestroy): {
const auto *Args = reinterpret_cast<const cuLinkDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "state: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemFreeHost): {
const auto *Args = reinterpret_cast<const cuMemFreeHost_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "p: " << Args->p << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemHostGetFlags): {
const auto *Args = reinterpret_cast<const cuMemHostGetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pFlags: " << Args->pFlags << "\n";
PrintOffset();
std::cout << "p: " << Args->p << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetByPCIBusId): {
const auto *Args = reinterpret_cast<const cuDeviceGetByPCIBusId_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "pciBusId: " << Args->pciBusId << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGetPCIBusId): {
const auto *Args = reinterpret_cast<const cuDeviceGetPCIBusId_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pciBusId: " << Args->pciBusId << "\n";
PrintOffset();
std::cout << "len: " << Args->len << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuIpcGetEventHandle): {
const auto *Args = reinterpret_cast<const cuIpcGetEventHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pHandle: <non-printable>" << "\n";
PrintOffset();
std::cout << "event: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuIpcOpenEventHandle): {
const auto *Args = reinterpret_cast<const cuIpcOpenEventHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuIpcGetMemHandle): {
const auto *Args = reinterpret_cast<const cuIpcGetMemHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pHandle: <non-printable>" << "\n";
PrintOffset();
std::cout << "dptr: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuIpcCloseMemHandle): {
const auto *Args = reinterpret_cast<const cuIpcCloseMemHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dptr: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemHostUnregister): {
const auto *Args = reinterpret_cast<const cuMemHostUnregister_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "p: " << Args->p << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuArrayGetPlane): {
const auto *Args = reinterpret_cast<const cuArrayGetPlane_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pPlaneArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "hArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "planeIdx: " << Args->planeIdx << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuArrayDestroy): {
const auto *Args = reinterpret_cast<const cuArrayDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hArray: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetLevel): {
const auto *Args = reinterpret_cast<const cuMipmappedArrayGetLevel_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pLevelArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "hMipmappedArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "level: " << Args->level << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayDestroy): {
const auto *Args = reinterpret_cast<const cuMipmappedArrayDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hMipmappedArray: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemRelease): {
const auto *Args = reinterpret_cast<const cuMemRelease_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync_ptsz): {
const auto *Args = reinterpret_cast<const cuMemMapArrayAsync_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "mapInfoList: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemGetAccess): {
const auto *Args = reinterpret_cast<const cuMemGetAccess_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "flags: <non-printable>" << "\n";
PrintOffset();
std::cout << "location: <non-printable>" << "\n";
PrintOffset();
std::cout << "ptr: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemExportToShareableHandle): {
const auto *Args = reinterpret_cast<const cuMemExportToShareableHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "shareableHandle: " << Args->shareableHandle << "\n";
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
PrintOffset();
std::cout << "handleType: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemImportFromShareableHandle): {
const auto *Args = reinterpret_cast<const cuMemImportFromShareableHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
PrintOffset();
std::cout << "osHandle: " << Args->osHandle << "\n";
PrintOffset();
std::cout << "shHandleType: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemGetAllocationPropertiesFromHandle): {
const auto *Args = reinterpret_cast<const cuMemGetAllocationPropertiesFromHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "prop: <non-printable>" << "\n";
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemRetainAllocationHandle): {
const auto *Args = reinterpret_cast<const cuMemRetainAllocationHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
PrintOffset();
std::cout << "addr: " << Args->addr << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync_ptsz): {
const auto *Args = reinterpret_cast<const cuMemFreeAsync_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dptr: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemPoolCreate): {
const auto *Args = reinterpret_cast<const cuMemPoolCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pool: <non-printable>" << "\n";
PrintOffset();
std::cout << "poolProps: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemPoolDestroy): {
const auto *Args = reinterpret_cast<const cuMemPoolDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pool: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamCreate): {
const auto *Args = reinterpret_cast<const cuStreamCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamCreateWithPriority): {
const auto *Args = reinterpret_cast<const cuStreamCreateWithPriority_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
PrintOffset();
std::cout << "priority: " << Args->priority << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamGetPriority_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "priority: " << Args->priority << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamGetFlags_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamGetCtx_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamWaitEvent_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamAddCallback_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "callback: <non-printable>" << "\n";
PrintOffset();
std::cout << "userData: " << Args->userData << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuThreadExchangeStreamCaptureMode): {
const auto *Args = reinterpret_cast<const cuThreadExchangeStreamCaptureMode_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "mode: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamEndCapture_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "phGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamIsCapturing_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "captureStatus: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamQuery_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamQuery_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamSynchronize_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamCopyAttributes_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dst: <non-printable>" << "\n";
PrintOffset();
std::cout << "src: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamSetAttribute_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "attr: <non-printable>" << "\n";
PrintOffset();
std::cout << "value: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventCreate): {
const auto *Args = reinterpret_cast<const cuEventCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventRecord_ptsz): {
const auto *Args = reinterpret_cast<const cuEventRecord_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags_ptsz): {
const auto *Args = reinterpret_cast<const cuEventRecordWithFlags_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventQuery): {
const auto *Args = reinterpret_cast<const cuEventQuery_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventSynchronize): {
const auto *Args = reinterpret_cast<const cuEventSynchronize_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventElapsedTime): {
const auto *Args = reinterpret_cast<const cuEventElapsedTime_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pMilliseconds: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStart: <non-printable>" << "\n";
PrintOffset();
std::cout << "hEnd: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalMemory): {
const auto *Args = reinterpret_cast<const cuDestroyExternalMemory_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "extMem: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalSemaphore): {
const auto *Args = reinterpret_cast<const cuDestroyExternalSemaphore_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "extSem: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamBatchMemOp_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "stream: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "paramArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedMemConfig): {
const auto *Args = reinterpret_cast<const cuFuncSetSharedMemConfig_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "config: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuFuncGetModule): {
const auto *Args = reinterpret_cast<const cuFuncGetModule_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hmod: <non-printable>" << "\n";
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel_ptsz): {
const auto *Args = reinterpret_cast<const cuLaunchKernel_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "f: <non-printable>" << "\n";
PrintOffset();
std::cout << "gridDimX: " << Args->gridDimX << "\n";
PrintOffset();
std::cout << "gridDimY: " << Args->gridDimY << "\n";
PrintOffset();
std::cout << "gridDimZ: " << Args->gridDimZ << "\n";
PrintOffset();
std::cout << "blockDimX: " << Args->blockDimX << "\n";
PrintOffset();
std::cout << "blockDimY: " << Args->blockDimY << "\n";
PrintOffset();
std::cout << "blockDimZ: " << Args->blockDimZ << "\n";
PrintOffset();
std::cout << "sharedMemBytes: " << Args->sharedMemBytes << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "kernelParams: " << Args->kernelParams << "\n";
PrintOffset();
std::cout << "extra: " << Args->extra << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel_ptsz): {
const auto *Args = reinterpret_cast<const cuLaunchCooperativeKernel_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "f: <non-printable>" << "\n";
PrintOffset();
std::cout << "gridDimX: " << Args->gridDimX << "\n";
PrintOffset();
std::cout << "gridDimY: " << Args->gridDimY << "\n";
PrintOffset();
std::cout << "gridDimZ: " << Args->gridDimZ << "\n";
PrintOffset();
std::cout << "blockDimX: " << Args->blockDimX << "\n";
PrintOffset();
std::cout << "blockDimY: " << Args->blockDimY << "\n";
PrintOffset();
std::cout << "blockDimZ: " << Args->blockDimZ << "\n";
PrintOffset();
std::cout << "sharedMemBytes: " << Args->sharedMemBytes << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "kernelParams: " << Args->kernelParams << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc_ptsz): {
const auto *Args = reinterpret_cast<const cuLaunchHostFunc_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "fn: <non-printable>" << "\n";
PrintOffset();
std::cout << "userData: " << Args->userData << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuFuncSetBlockShape): {
const auto *Args = reinterpret_cast<const cuFuncSetBlockShape_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "x: " << Args->x << "\n";
PrintOffset();
std::cout << "y: " << Args->y << "\n";
PrintOffset();
std::cout << "z: " << Args->z << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedSize): {
const auto *Args = reinterpret_cast<const cuFuncSetSharedSize_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "bytes: " << Args->bytes << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuParamSetSize): {
const auto *Args = reinterpret_cast<const cuParamSetSize_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "numbytes: " << Args->numbytes << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuParamSeti): {
const auto *Args = reinterpret_cast<const cuParamSeti_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "offset: " << Args->offset << "\n";
PrintOffset();
std::cout << "value: " << Args->value << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuParamSetf): {
const auto *Args = reinterpret_cast<const cuParamSetf_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "offset: " << Args->offset << "\n";
PrintOffset();
std::cout << "value: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuParamSetv): {
const auto *Args = reinterpret_cast<const cuParamSetv_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "offset: " << Args->offset << "\n";
PrintOffset();
std::cout << "ptr: " << Args->ptr << "\n";
PrintOffset();
std::cout << "numbytes: " << Args->numbytes << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunch): {
const auto *Args = reinterpret_cast<const cuLaunch_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "f: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuParamSetTexRef): {
const auto *Args = reinterpret_cast<const cuParamSetTexRef_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hfunc: <non-printable>" << "\n";
PrintOffset();
std::cout << "texunit: " << Args->texunit << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphCreate): {
const auto *Args = reinterpret_cast<const cuGraphCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phGraph: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphChildGraphNodeGetGraph): {
const auto *Args = reinterpret_cast<const cuGraphChildGraphNodeGetGraph_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "phGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphEventRecordNodeSetEvent): {
const auto *Args = reinterpret_cast<const cuGraphEventRecordNodeSetEvent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "event: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphEventWaitNodeSetEvent): {
const auto *Args = reinterpret_cast<const cuGraphEventWaitNodeSetEvent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "event: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceGraphMemTrim): {
const auto *Args = reinterpret_cast<const cuDeviceGraphMemTrim_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "device: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphClone): {
const auto *Args = reinterpret_cast<const cuGraphClone_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phGraphClone: <non-printable>" << "\n";
PrintOffset();
std::cout << "originalGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphNodeFindInClone): {
const auto *Args = reinterpret_cast<const cuGraphNodeFindInClone_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "hOriginalNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "hClonedGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetType): {
const auto *Args = reinterpret_cast<const cuGraphNodeGetType_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "type: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphDestroyNode): {
const auto *Args = reinterpret_cast<const cuGraphDestroyNode_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithFlags): {
const auto *Args = reinterpret_cast<const cuGraphInstantiateWithFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hGraph: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphExecChildGraphNodeSetParams): {
const auto *Args = reinterpret_cast<const cuGraphExecChildGraphNodeSetParams_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "childGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventRecordNodeSetEvent): {
const auto *Args = reinterpret_cast<const cuGraphExecEventRecordNodeSetEvent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "event: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventWaitNodeSetEvent): {
const auto *Args = reinterpret_cast<const cuGraphExecEventWaitNodeSetEvent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "event: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphNodeSetEnabled): {
const auto *Args = reinterpret_cast<const cuGraphNodeSetEnabled_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "isEnabled: " << Args->isEnabled << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetEnabled): {
const auto *Args = reinterpret_cast<const cuGraphNodeGetEnabled_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "isEnabled: " << Args->isEnabled << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphUpload_ptsz): {
const auto *Args = reinterpret_cast<const cuGraphUpload_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch_ptsz): {
const auto *Args = reinterpret_cast<const cuGraphLaunch_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphExecDestroy): {
const auto *Args = reinterpret_cast<const cuGraphExecDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraphExec: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphDestroy): {
const auto *Args = reinterpret_cast<const cuGraphDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeCopyAttributes): {
const auto *Args = reinterpret_cast<const cuGraphKernelNodeCopyAttributes_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dst: <non-printable>" << "\n";
PrintOffset();
std::cout << "src: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetAttribute): {
const auto *Args = reinterpret_cast<const cuGraphKernelNodeSetAttribute_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hNode: <non-printable>" << "\n";
PrintOffset();
std::cout << "attr: <non-printable>" << "\n";
PrintOffset();
std::cout << "value: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphDebugDotPrint): {
const auto *Args = reinterpret_cast<const cuGraphDebugDotPrint_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraph: <non-printable>" << "\n";
PrintOffset();
std::cout << "path: " << Args->path << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuUserObjectRetain): {
const auto *Args = reinterpret_cast<const cuUserObjectRetain_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "object: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuUserObjectRelease): {
const auto *Args = reinterpret_cast<const cuUserObjectRelease_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "object: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphRetainUserObject): {
const auto *Args = reinterpret_cast<const cuGraphRetainUserObject_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "graph: <non-printable>" << "\n";
PrintOffset();
std::cout << "object: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphReleaseUserObject): {
const auto *Args = reinterpret_cast<const cuGraphReleaseUserObject_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "graph: <non-printable>" << "\n";
PrintOffset();
std::cout << "object: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetArray): {
const auto *Args = reinterpret_cast<const cuTexRefSetArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "hArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmappedArray): {
const auto *Args = reinterpret_cast<const cuTexRefSetMipmappedArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "hMipmappedArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelBias): {
const auto *Args = reinterpret_cast<const cuTexRefSetMipmapLevelBias_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "bias: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelClamp): {
const auto *Args = reinterpret_cast<const cuTexRefSetMipmapLevelClamp_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "minMipmapLevelClamp: <non-printable>" << "\n";
PrintOffset();
std::cout << "maxMipmapLevelClamp: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMaxAnisotropy): {
const auto *Args = reinterpret_cast<const cuTexRefSetMaxAnisotropy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "maxAniso: " << Args->maxAniso << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetBorderColor): {
const auto *Args = reinterpret_cast<const cuTexRefSetBorderColor_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "pBorderColor: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFlags): {
const auto *Args = reinterpret_cast<const cuTexRefSetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetArray): {
const auto *Args = reinterpret_cast<const cuTexRefGetArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmappedArray): {
const auto *Args = reinterpret_cast<const cuTexRefGetMipmappedArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phMipmappedArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelBias): {
const auto *Args = reinterpret_cast<const cuTexRefGetMipmapLevelBias_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pbias: <non-printable>" << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelClamp): {
const auto *Args = reinterpret_cast<const cuTexRefGetMipmapLevelClamp_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pminMipmapLevelClamp: <non-printable>" << "\n";
PrintOffset();
std::cout << "pmaxMipmapLevelClamp: <non-printable>" << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMaxAnisotropy): {
const auto *Args = reinterpret_cast<const cuTexRefGetMaxAnisotropy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pmaxAniso: " << Args->pmaxAniso << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetBorderColor): {
const auto *Args = reinterpret_cast<const cuTexRefGetBorderColor_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pBorderColor: <non-printable>" << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFlags): {
const auto *Args = reinterpret_cast<const cuTexRefGetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pFlags: " << Args->pFlags << "\n";
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefCreate): {
const auto *Args = reinterpret_cast<const cuTexRefCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexRefDestroy): {
const auto *Args = reinterpret_cast<const cuTexRefDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hTexRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuSurfRefSetArray): {
const auto *Args = reinterpret_cast<const cuSurfRefSetArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hSurfRef: <non-printable>" << "\n";
PrintOffset();
std::cout << "hArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuSurfRefGetArray): {
const auto *Args = reinterpret_cast<const cuSurfRefGetArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "phArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "hSurfRef: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuTexObjectDestroy): {
const auto *Args = reinterpret_cast<const cuTexObjectDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "texObject: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuSurfObjectDestroy): {
const auto *Args = reinterpret_cast<const cuSurfObjectDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "surfObject: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceCanAccessPeer): {
const auto *Args = reinterpret_cast<const cuDeviceCanAccessPeer_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "canAccessPeer: " << Args->canAccessPeer << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "peerDev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxEnablePeerAccess): {
const auto *Args = reinterpret_cast<const cuCtxEnablePeerAccess_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "peerContext: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxDisablePeerAccess): {
const auto *Args = reinterpret_cast<const cuCtxDisablePeerAccess_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "peerContext: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnregisterResource): {
const auto *Args = reinterpret_cast<const cuGraphicsUnregisterResource_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "resource: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsSubResourceGetMappedArray): {
const auto *Args = reinterpret_cast<const cuGraphicsSubResourceGetMappedArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "resource: <non-printable>" << "\n";
PrintOffset();
std::cout << "arrayIndex: " << Args->arrayIndex << "\n";
PrintOffset();
std::cout << "mipLevel: " << Args->mipLevel << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedMipmappedArray): {
const auto *Args = reinterpret_cast<const cuGraphicsResourceGetMappedMipmappedArray_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pMipmappedArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "resource: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources_ptsz): {
const auto *Args = reinterpret_cast<const cuGraphicsMapResources_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "resources: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources_ptsz): {
const auto *Args = reinterpret_cast<const cuGraphicsUnmapResources_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "resources: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGetExportTable): {
const auto *Args = reinterpret_cast<const cuGetExportTable_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ppExportTable: " << Args->ppExportTable << "\n";
PrintOffset();
std::cout << "pExportTableId: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceSetMapFlags): {
const auto *Args = reinterpret_cast<const cuGraphicsResourceSetMapFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "resource: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDeviceTotalMem): {
const auto *Args = reinterpret_cast<const cuDeviceTotalMem_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "bytes: " << Args->bytes << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxCreate): {
const auto *Args = reinterpret_cast<const cuCtxCreate_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemGetInfo): {
const auto *Args = reinterpret_cast<const cuMemGetInfo_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "free: " << Args->free << "\n";
PrintOffset();
std::cout << "total: " << Args->total << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemAllocHost): {
const auto *Args = reinterpret_cast<const cuMemAllocHost_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pp: " << Args->pp << "\n";
PrintOffset();
std::cout << "bytesize: " << Args->bytesize << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA): {
const auto *Args = reinterpret_cast<const cuMemcpyHtoA_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "dstOffset: " << Args->dstOffset << "\n";
PrintOffset();
std::cout << "srcHost: " << Args->srcHost << "\n";
PrintOffset();
std::cout << "ByteCount: " << Args->ByteCount << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH): {
const auto *Args = reinterpret_cast<const cuMemcpyAtoH_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstHost: " << Args->dstHost << "\n";
PrintOffset();
std::cout << "srcArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "srcOffset: " << Args->srcOffset << "\n";
PrintOffset();
std::cout << "ByteCount: " << Args->ByteCount << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA): {
const auto *Args = reinterpret_cast<const cuMemcpyAtoA_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "dstOffset: " << Args->dstOffset << "\n";
PrintOffset();
std::cout << "srcArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "srcOffset: " << Args->srcOffset << "\n";
PrintOffset();
std::cout << "ByteCount: " << Args->ByteCount << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync): {
const auto *Args = reinterpret_cast<const cuMemcpyHtoAAsync_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "dstOffset: " << Args->dstOffset << "\n";
PrintOffset();
std::cout << "srcHost: " << Args->srcHost << "\n";
PrintOffset();
std::cout << "ByteCount: " << Args->ByteCount << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync): {
const auto *Args = reinterpret_cast<const cuMemcpyAtoHAsync_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstHost: " << Args->dstHost << "\n";
PrintOffset();
std::cout << "srcArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "srcOffset: " << Args->srcOffset << "\n";
PrintOffset();
std::cout << "ByteCount: " << Args->ByteCount << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxDestroy): {
const auto *Args = reinterpret_cast<const cuCtxDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxPopCurrent): {
const auto *Args = reinterpret_cast<const cuCtxPopCurrent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuCtxPushCurrent): {
const auto *Args = reinterpret_cast<const cuCtxPushCurrent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "ctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamDestroy): {
const auto *Args = reinterpret_cast<const cuStreamDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventDestroy): {
const auto *Args = reinterpret_cast<const cuEventDestroy_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRelease): {
const auto *Args = reinterpret_cast<const cuDevicePrimaryCtxRelease_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxReset): {
const auto *Args = reinterpret_cast<const cuDevicePrimaryCtxReset_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxSetFlags): {
const auto *Args = reinterpret_cast<const cuDevicePrimaryCtxSetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dev: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority): {
const auto *Args = reinterpret_cast<const cuStreamGetPriority_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "priority: " << Args->priority << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags): {
const auto *Args = reinterpret_cast<const cuStreamGetFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx): {
const auto *Args = reinterpret_cast<const cuStreamGetCtx_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "pctx: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent): {
const auto *Args = reinterpret_cast<const cuStreamWaitEvent_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback): {
const auto *Args = reinterpret_cast<const cuStreamAddCallback_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "callback: <non-printable>" << "\n";
PrintOffset();
std::cout << "userData: " << Args->userData << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamQuery): {
const auto *Args = reinterpret_cast<const cuStreamQuery_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize): {
const auto *Args = reinterpret_cast<const cuStreamSynchronize_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventRecord): {
const auto *Args = reinterpret_cast<const cuEventRecord_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags): {
const auto *Args = reinterpret_cast<const cuEventRecordWithFlags_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hEvent: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel): {
const auto *Args = reinterpret_cast<const cuLaunchKernel_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "f: <non-printable>" << "\n";
PrintOffset();
std::cout << "gridDimX: " << Args->gridDimX << "\n";
PrintOffset();
std::cout << "gridDimY: " << Args->gridDimY << "\n";
PrintOffset();
std::cout << "gridDimZ: " << Args->gridDimZ << "\n";
PrintOffset();
std::cout << "blockDimX: " << Args->blockDimX << "\n";
PrintOffset();
std::cout << "blockDimY: " << Args->blockDimY << "\n";
PrintOffset();
std::cout << "blockDimZ: " << Args->blockDimZ << "\n";
PrintOffset();
std::cout << "sharedMemBytes: " << Args->sharedMemBytes << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "kernelParams: " << Args->kernelParams << "\n";
PrintOffset();
std::cout << "extra: " << Args->extra << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc): {
const auto *Args = reinterpret_cast<const cuLaunchHostFunc_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "fn: <non-printable>" << "\n";
PrintOffset();
std::cout << "userData: " << Args->userData << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources): {
const auto *Args = reinterpret_cast<const cuGraphicsMapResources_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "resources: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources): {
const auto *Args = reinterpret_cast<const cuGraphicsUnmapResources_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "resources: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp): {
const auto *Args = reinterpret_cast<const cuStreamBatchMemOp_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "stream: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "paramArray: <non-printable>" << "\n";
PrintOffset();
std::cout << "flags: " << Args->flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel): {
const auto *Args = reinterpret_cast<const cuLaunchCooperativeKernel_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "f: <non-printable>" << "\n";
PrintOffset();
std::cout << "gridDimX: " << Args->gridDimX << "\n";
PrintOffset();
std::cout << "gridDimY: " << Args->gridDimY << "\n";
PrintOffset();
std::cout << "gridDimZ: " << Args->gridDimZ << "\n";
PrintOffset();
std::cout << "blockDimX: " << Args->blockDimX << "\n";
PrintOffset();
std::cout << "blockDimY: " << Args->blockDimY << "\n";
PrintOffset();
std::cout << "blockDimZ: " << Args->blockDimZ << "\n";
PrintOffset();
std::cout << "sharedMemBytes: " << Args->sharedMemBytes << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "kernelParams: " << Args->kernelParams << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture): {
const auto *Args = reinterpret_cast<const cuStreamBeginCapture_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_ptsz): {
const auto *Args = reinterpret_cast<const cuStreamBeginCapture_ptsz_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture): {
const auto *Args = reinterpret_cast<const cuStreamEndCapture_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "phGraph: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing): {
const auto *Args = reinterpret_cast<const cuStreamIsCapturing_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "captureStatus: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphUpload): {
const auto *Args = reinterpret_cast<const cuGraphUpload_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraph: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch): {
const auto *Args = reinterpret_cast<const cuGraphLaunch_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hGraph: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes): {
const auto *Args = reinterpret_cast<const cuStreamCopyAttributes_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dstStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "srcStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamGetAttribute): {
const auto *Args = reinterpret_cast<const cuStreamGetAttribute_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "attr: <non-printable>" << "\n";
PrintOffset();
std::cout << "value: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute): {
const auto *Args = reinterpret_cast<const cuStreamSetAttribute_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
PrintOffset();
std::cout << "attr: <non-printable>" << "\n";
PrintOffset();
std::cout << "param: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuIpcOpenMemHandle): {
const auto *Args = reinterpret_cast<const cuIpcOpenMemHandle_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "pdptr: <non-printable>" << "\n";
PrintOffset();
std::cout << "handle: <non-printable>" << "\n";
PrintOffset();
std::cout << "Flags: " << Args->Flags << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync): {
const auto *Args = reinterpret_cast<const cuMemMapArrayAsync_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "mapInfoList: <non-printable>" << "\n";
PrintOffset();
std::cout << "count: " << Args->count << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
case static_cast<uint32_t>(CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync): {
const auto *Args = reinterpret_cast<const cuMemFreeAsync_params_st*>(Data->args_data);
(void)Args;
PrintOffset();
std::cout << "dptr: <non-printable>" << "\n";
PrintOffset();
std::cout << "hStream: <non-printable>" << "\n";
break;
}
