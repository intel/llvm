case static_cast<uint32_t>(ZEApiKind::zeInit): {
const auto *Args = reinterpret_cast<ze_init_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "pflags: " << Args->pflags << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeDriverGet): {
const auto *Args = reinterpret_cast<ze_driver_get_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "ppCount: " << Args->ppCount << "\n";
PrintOffset();
  std::cout << "pphDrivers: " << Args->pphDrivers << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeDriverGetApiVersion): {
const auto *Args = reinterpret_cast<ze_driver_get_api_version_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDriver: " << Args->phDriver << "\n";
PrintOffset();
  std::cout << "pversion: " << Args->pversion << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeDriverGetProperties): {
const auto *Args = reinterpret_cast<ze_driver_get_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDriver: " << Args->phDriver << "\n";
PrintOffset();
  std::cout << "ppDriverProperties: " << Args->ppDriverProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeDriverGetIpcProperties): {
const auto *Args = reinterpret_cast<ze_driver_get_ipc_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDriver: " << Args->phDriver << "\n";
PrintOffset();
  std::cout << "ppIpcProperties: " << Args->ppIpcProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeDriverGetExtensionProperties): {
const auto *Args = reinterpret_cast<ze_driver_get_extension_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDriver: " << Args->phDriver << "\n";
PrintOffset();
  std::cout << "ppCount: " << Args->ppCount << "\n";
PrintOffset();
  std::cout << "ppExtensionProperties: " << Args->ppExtensionProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextCreate): {
const auto *Args = reinterpret_cast<ze_context_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDriver: " << Args->phDriver << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphContext: " << Args->pphContext << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextDestroy): {
const auto *Args = reinterpret_cast<ze_context_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextGetStatus): {
const auto *Args = reinterpret_cast<ze_context_get_status_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextSystemBarrier): {
const auto *Args = reinterpret_cast<ze_context_system_barrier_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextMakeMemoryResident): {
const auto *Args = reinterpret_cast<ze_context_make_memory_resident_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextEvictMemory): {
const auto *Args = reinterpret_cast<ze_context_evict_memory_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextMakeImageResident): {
const auto *Args = reinterpret_cast<ze_context_make_image_resident_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "phImage: " << Args->phImage << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeContextEvictImage): {
const auto *Args = reinterpret_cast<ze_context_evict_image_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "phImage: " << Args->phImage << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandQueueCreate): {
const auto *Args = reinterpret_cast<ze_command_queue_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphCommandQueue: " << Args->pphCommandQueue << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandQueueDestroy): {
const auto *Args = reinterpret_cast<ze_command_queue_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandQueue: " << Args->phCommandQueue << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandQueueExecuteCommandLists): {
const auto *Args = reinterpret_cast<ze_command_queue_execute_command_lists_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandQueue: " << Args->phCommandQueue << "\n";
PrintOffset();
std::cout << "numCommandLists: " << *(Args->pnumCommandLists) << "\n";
PrintOffset();
  std::cout << "pphCommandLists: " << Args->pphCommandLists << "\n";
PrintOffset();
  std::cout << "phFence: " << Args->phFence << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandQueueSynchronize): {
const auto *Args = reinterpret_cast<ze_command_queue_synchronize_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandQueue: " << Args->phCommandQueue << "\n";
PrintOffset();
std::cout << "timeout: " << *(Args->ptimeout) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListCreate): {
const auto *Args = reinterpret_cast<ze_command_list_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphCommandList: " << Args->pphCommandList << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListCreateImmediate): {
const auto *Args = reinterpret_cast<ze_command_list_create_immediate_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "paltdesc: " << Args->paltdesc << "\n";
PrintOffset();
  std::cout << "pphCommandList: " << Args->pphCommandList << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListDestroy): {
const auto *Args = reinterpret_cast<ze_command_list_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListClose): {
const auto *Args = reinterpret_cast<ze_command_list_close_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListReset): {
const auto *Args = reinterpret_cast<ze_command_list_reset_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendWriteGlobalTimestamp): {
const auto *Args = reinterpret_cast<ze_command_list_append_write_global_timestamp_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "pdstptr: " << Args->pdstptr << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendBarrier): {
const auto *Args = reinterpret_cast<ze_command_list_append_barrier_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryRangesBarrier): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_ranges_barrier_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "numRanges: " << *(Args->pnumRanges) << "\n";
PrintOffset();
  std::cout << "ppRangeSizes: " << Args->ppRangeSizes << "\n";
PrintOffset();
  std::cout << "ppRanges: " << Args->ppRanges << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryCopy): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_copy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "dstptr: " << *(Args->pdstptr) << "\n";
PrintOffset();
std::cout << "srcptr: " << *(Args->psrcptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryFill): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_fill_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "pattern: " << *(Args->ppattern) << "\n";
PrintOffset();
std::cout << "pattern_size: " << *(Args->ppattern_size) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryCopyRegion): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_copy_region_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "dstptr: " << *(Args->pdstptr) << "\n";
PrintOffset();
  std::cout << "pdstRegion: " << Args->pdstRegion << "\n";
PrintOffset();
std::cout << "dstPitch: " << *(Args->pdstPitch) << "\n";
PrintOffset();
std::cout << "dstSlicePitch: " << *(Args->pdstSlicePitch) << "\n";
PrintOffset();
std::cout << "srcptr: " << *(Args->psrcptr) << "\n";
PrintOffset();
  std::cout << "psrcRegion: " << Args->psrcRegion << "\n";
PrintOffset();
std::cout << "srcPitch: " << *(Args->psrcPitch) << "\n";
PrintOffset();
std::cout << "srcSlicePitch: " << *(Args->psrcSlicePitch) << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryCopyFromContext): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_copy_from_context_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "dstptr: " << *(Args->pdstptr) << "\n";
PrintOffset();
  std::cout << "phContextSrc: " << Args->phContextSrc << "\n";
PrintOffset();
std::cout << "srcptr: " << *(Args->psrcptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendImageCopy): {
const auto *Args = reinterpret_cast<ze_command_list_append_image_copy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phDstImage: " << Args->phDstImage << "\n";
PrintOffset();
  std::cout << "phSrcImage: " << Args->phSrcImage << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendImageCopyRegion): {
const auto *Args = reinterpret_cast<ze_command_list_append_image_copy_region_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phDstImage: " << Args->phDstImage << "\n";
PrintOffset();
  std::cout << "phSrcImage: " << Args->phSrcImage << "\n";
PrintOffset();
  std::cout << "ppDstRegion: " << Args->ppDstRegion << "\n";
PrintOffset();
  std::cout << "ppSrcRegion: " << Args->ppSrcRegion << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendImageCopyToMemory): {
const auto *Args = reinterpret_cast<ze_command_list_append_image_copy_to_memory_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "dstptr: " << *(Args->pdstptr) << "\n";
PrintOffset();
  std::cout << "phSrcImage: " << Args->phSrcImage << "\n";
PrintOffset();
  std::cout << "ppSrcRegion: " << Args->ppSrcRegion << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendImageCopyFromMemory): {
const auto *Args = reinterpret_cast<ze_command_list_append_image_copy_from_memory_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phDstImage: " << Args->phDstImage << "\n";
PrintOffset();
std::cout << "srcptr: " << *(Args->psrcptr) << "\n";
PrintOffset();
  std::cout << "ppDstRegion: " << Args->ppDstRegion << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemoryPrefetch): {
const auto *Args = reinterpret_cast<ze_command_list_append_memory_prefetch_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendMemAdvise): {
const auto *Args = reinterpret_cast<ze_command_list_append_mem_advise_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "padvice: " << Args->padvice << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendSignalEvent): {
const auto *Args = reinterpret_cast<ze_command_list_append_signal_event_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendWaitOnEvents): {
const auto *Args = reinterpret_cast<ze_command_list_append_wait_on_events_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "numEvents: " << *(Args->pnumEvents) << "\n";
PrintOffset();
  std::cout << "pphEvents: " << Args->pphEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendEventReset): {
const auto *Args = reinterpret_cast<ze_command_list_append_event_reset_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendQueryKernelTimestamps): {
const auto *Args = reinterpret_cast<ze_command_list_append_query_kernel_timestamps_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "numEvents: " << *(Args->pnumEvents) << "\n";
PrintOffset();
  std::cout << "pphEvents: " << Args->pphEvents << "\n";
PrintOffset();
std::cout << "dstptr: " << *(Args->pdstptr) << "\n";
PrintOffset();
  std::cout << "ppOffsets: " << Args->ppOffsets << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendLaunchKernel): {
const auto *Args = reinterpret_cast<ze_command_list_append_launch_kernel_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppLaunchFuncArgs: " << Args->ppLaunchFuncArgs << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendLaunchCooperativeKernel): {
const auto *Args = reinterpret_cast<ze_command_list_append_launch_cooperative_kernel_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppLaunchFuncArgs: " << Args->ppLaunchFuncArgs << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendLaunchKernelIndirect): {
const auto *Args = reinterpret_cast<ze_command_list_append_launch_kernel_indirect_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppLaunchArgumentsBuffer: " << Args->ppLaunchArgumentsBuffer << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeCommandListAppendLaunchMultipleKernelsIndirect): {
const auto *Args = reinterpret_cast<ze_command_list_append_launch_multiple_kernels_indirect_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandList: " << Args->phCommandList << "\n";
PrintOffset();
std::cout << "numKernels: " << *(Args->pnumKernels) << "\n";
PrintOffset();
  std::cout << "pphKernels: " << Args->pphKernels << "\n";
PrintOffset();
  std::cout << "ppCountBuffer: " << Args->ppCountBuffer << "\n";
PrintOffset();
  std::cout << "ppLaunchArgumentsBuffer: " << Args->ppLaunchArgumentsBuffer << "\n";
PrintOffset();
  std::cout << "phSignalEvent: " << Args->phSignalEvent << "\n";
PrintOffset();
std::cout << "numWaitEvents: " << *(Args->pnumWaitEvents) << "\n";
PrintOffset();
  std::cout << "pphWaitEvents: " << Args->pphWaitEvents << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeFenceCreate): {
const auto *Args = reinterpret_cast<ze_fence_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phCommandQueue: " << Args->phCommandQueue << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphFence: " << Args->pphFence << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeFenceDestroy): {
const auto *Args = reinterpret_cast<ze_fence_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phFence: " << Args->phFence << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeFenceHostSynchronize): {
const auto *Args = reinterpret_cast<ze_fence_host_synchronize_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phFence: " << Args->phFence << "\n";
PrintOffset();
std::cout << "timeout: " << *(Args->ptimeout) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeFenceQueryStatus): {
const auto *Args = reinterpret_cast<ze_fence_query_status_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phFence: " << Args->phFence << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeFenceReset): {
const auto *Args = reinterpret_cast<ze_fence_reset_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phFence: " << Args->phFence << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventPoolCreate): {
const auto *Args = reinterpret_cast<ze_event_pool_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
std::cout << "numDevices: " << *(Args->pnumDevices) << "\n";
PrintOffset();
  std::cout << "pphDevices: " << Args->pphDevices << "\n";
PrintOffset();
  std::cout << "pphEventPool: " << Args->pphEventPool << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventPoolDestroy): {
const auto *Args = reinterpret_cast<ze_event_pool_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEventPool: " << Args->phEventPool << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventPoolGetIpcHandle): {
const auto *Args = reinterpret_cast<ze_event_pool_get_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEventPool: " << Args->phEventPool << "\n";
PrintOffset();
  std::cout << "pphIpc: " << Args->pphIpc << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventPoolOpenIpcHandle): {
const auto *Args = reinterpret_cast<ze_event_pool_open_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phIpc: " << Args->phIpc << "\n";
PrintOffset();
  std::cout << "pphEventPool: " << Args->pphEventPool << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventPoolCloseIpcHandle): {
const auto *Args = reinterpret_cast<ze_event_pool_close_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEventPool: " << Args->phEventPool << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventCreate): {
const auto *Args = reinterpret_cast<ze_event_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEventPool: " << Args->phEventPool << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphEvent: " << Args->pphEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventDestroy): {
const auto *Args = reinterpret_cast<ze_event_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventHostSignal): {
const auto *Args = reinterpret_cast<ze_event_host_signal_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventHostSynchronize): {
const auto *Args = reinterpret_cast<ze_event_host_synchronize_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
PrintOffset();
std::cout << "timeout: " << *(Args->ptimeout) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventQueryStatus): {
const auto *Args = reinterpret_cast<ze_event_query_status_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventHostReset): {
const auto *Args = reinterpret_cast<ze_event_host_reset_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeEventQueryKernelTimestamp): {
const auto *Args = reinterpret_cast<ze_event_query_kernel_timestamp_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phEvent: " << Args->phEvent << "\n";
PrintOffset();
  std::cout << "pdstptr: " << Args->pdstptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeImageGetProperties): {
const auto *Args = reinterpret_cast<ze_image_get_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "ppImageProperties: " << Args->ppImageProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeImageCreate): {
const auto *Args = reinterpret_cast<ze_image_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphImage: " << Args->pphImage << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeImageDestroy): {
const auto *Args = reinterpret_cast<ze_image_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phImage: " << Args->phImage << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleCreate): {
const auto *Args = reinterpret_cast<ze_module_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphModule: " << Args->pphModule << "\n";
PrintOffset();
  std::cout << "pphBuildLog: " << Args->pphBuildLog << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleDestroy): {
const auto *Args = reinterpret_cast<ze_module_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleDynamicLink): {
const auto *Args = reinterpret_cast<ze_module_dynamic_link_params_t*>(Data->args_data);
PrintOffset();
std::cout << "numModules: " << *(Args->pnumModules) << "\n";
PrintOffset();
  std::cout << "pphModules: " << Args->pphModules << "\n";
PrintOffset();
  std::cout << "pphLinkLog: " << Args->pphLinkLog << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleGetNativeBinary): {
const auto *Args = reinterpret_cast<ze_module_get_native_binary_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
PrintOffset();
  std::cout << "ppModuleNativeBinary: " << Args->ppModuleNativeBinary << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleGetGlobalPointer): {
const auto *Args = reinterpret_cast<ze_module_get_global_pointer_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "ppGlobalName: " << Args->ppGlobalName << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleGetKernelNames): {
const auto *Args = reinterpret_cast<ze_module_get_kernel_names_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "ppCount: " << Args->ppCount << "\n";
PrintOffset();
  std::cout << "ppNames: " << Args->ppNames << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleGetProperties): {
const auto *Args = reinterpret_cast<ze_module_get_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "ppModuleProperties: " << Args->ppModuleProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleGetFunctionPointer): {
const auto *Args = reinterpret_cast<ze_module_get_function_pointer_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "ppFunctionName: " << Args->ppFunctionName << "\n";
PrintOffset();
  std::cout << "ppfnFunction: " << Args->ppfnFunction << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleBuildLogDestroy): {
const auto *Args = reinterpret_cast<ze_module_build_log_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModuleBuildLog: " << Args->phModuleBuildLog << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeModuleBuildLogGetString): {
const auto *Args = reinterpret_cast<ze_module_build_log_get_string_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModuleBuildLog: " << Args->phModuleBuildLog << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
PrintOffset();
  std::cout << "ppBuildLog: " << Args->ppBuildLog << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelCreate): {
const auto *Args = reinterpret_cast<ze_kernel_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phModule: " << Args->phModule << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphKernel: " << Args->pphKernel << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelDestroy): {
const auto *Args = reinterpret_cast<ze_kernel_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSetCacheConfig): {
const auto *Args = reinterpret_cast<ze_kernel_set_cache_config_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "pflags: " << Args->pflags << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSetGroupSize): {
const auto *Args = reinterpret_cast<ze_kernel_set_group_size_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
std::cout << "groupSizeX: " << *(Args->pgroupSizeX) << "\n";
PrintOffset();
std::cout << "groupSizeY: " << *(Args->pgroupSizeY) << "\n";
PrintOffset();
std::cout << "groupSizeZ: " << *(Args->pgroupSizeZ) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSuggestGroupSize): {
const auto *Args = reinterpret_cast<ze_kernel_suggest_group_size_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
std::cout << "globalSizeX: " << *(Args->pglobalSizeX) << "\n";
PrintOffset();
std::cout << "globalSizeY: " << *(Args->pglobalSizeY) << "\n";
PrintOffset();
std::cout << "globalSizeZ: " << *(Args->pglobalSizeZ) << "\n";
PrintOffset();
  std::cout << "pgroupSizeX: " << Args->pgroupSizeX << "\n";
PrintOffset();
  std::cout << "pgroupSizeY: " << Args->pgroupSizeY << "\n";
PrintOffset();
  std::cout << "pgroupSizeZ: " << Args->pgroupSizeZ << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSuggestMaxCooperativeGroupCount): {
const auto *Args = reinterpret_cast<ze_kernel_suggest_max_cooperative_group_count_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ptotalGroupCount: " << Args->ptotalGroupCount << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSetArgumentValue): {
const auto *Args = reinterpret_cast<ze_kernel_set_argument_value_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
std::cout << "argIndex: " << *(Args->pargIndex) << "\n";
PrintOffset();
std::cout << "argSize: " << *(Args->pargSize) << "\n";
PrintOffset();
std::cout << "pArgValue: " << *(Args->ppArgValue) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelSetIndirectAccess): {
const auto *Args = reinterpret_cast<ze_kernel_set_indirect_access_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "pflags: " << Args->pflags << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelGetIndirectAccess): {
const auto *Args = reinterpret_cast<ze_kernel_get_indirect_access_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppFlags: " << Args->ppFlags << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelGetSourceAttributes): {
const auto *Args = reinterpret_cast<ze_kernel_get_source_attributes_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
PrintOffset();
  std::cout << "ppString: " << Args->ppString << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelGetProperties): {
const auto *Args = reinterpret_cast<ze_kernel_get_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppKernelProperties: " << Args->ppKernelProperties << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeKernelGetName): {
const auto *Args = reinterpret_cast<ze_kernel_get_name_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phKernel: " << Args->phKernel << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
PrintOffset();
  std::cout << "ppName: " << Args->ppName << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeSamplerCreate): {
const auto *Args = reinterpret_cast<ze_sampler_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphSampler: " << Args->pphSampler << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeSamplerDestroy): {
const auto *Args = reinterpret_cast<ze_sampler_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phSampler: " << Args->phSampler << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zePhysicalMemCreate): {
const auto *Args = reinterpret_cast<ze_physical_mem_create_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "pdesc: " << Args->pdesc << "\n";
PrintOffset();
  std::cout << "pphPhysicalMemory: " << Args->pphPhysicalMemory << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zePhysicalMemDestroy): {
const auto *Args = reinterpret_cast<ze_physical_mem_destroy_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phPhysicalMemory: " << Args->phPhysicalMemory << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemAllocShared): {
const auto *Args = reinterpret_cast<ze_mem_alloc_shared_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "pdevice_desc: " << Args->pdevice_desc << "\n";
PrintOffset();
  std::cout << "phost_desc: " << Args->phost_desc << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
std::cout << "alignment: " << *(Args->palignment) << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemAllocDevice): {
const auto *Args = reinterpret_cast<ze_mem_alloc_device_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "pdevice_desc: " << Args->pdevice_desc << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
std::cout << "alignment: " << *(Args->palignment) << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemAllocHost): {
const auto *Args = reinterpret_cast<ze_mem_alloc_host_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phost_desc: " << Args->phost_desc << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
std::cout << "alignment: " << *(Args->palignment) << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemFree): {
const auto *Args = reinterpret_cast<ze_mem_free_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemGetAllocProperties): {
const auto *Args = reinterpret_cast<ze_mem_get_alloc_properties_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
  std::cout << "ppMemAllocProperties: " << Args->ppMemAllocProperties << "\n";
PrintOffset();
  std::cout << "pphDevice: " << Args->pphDevice << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemGetAddressRange): {
const auto *Args = reinterpret_cast<ze_mem_get_address_range_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
  std::cout << "ppBase: " << Args->ppBase << "\n";
PrintOffset();
  std::cout << "ppSize: " << Args->ppSize << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemGetIpcHandle): {
const auto *Args = reinterpret_cast<ze_mem_get_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
  std::cout << "ppIpcHandle: " << Args->ppIpcHandle << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemOpenIpcHandle): {
const auto *Args = reinterpret_cast<ze_mem_open_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
  std::cout << "phandle: " << Args->phandle << "\n";
PrintOffset();
  std::cout << "pflags: " << Args->pflags << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeMemCloseIpcHandle): {
const auto *Args = reinterpret_cast<ze_mem_close_ipc_handle_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemReserve): {
const auto *Args = reinterpret_cast<ze_virtual_mem_reserve_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "pStart: " << *(Args->ppStart) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "ppptr: " << Args->ppptr << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemFree): {
const auto *Args = reinterpret_cast<ze_virtual_mem_free_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemQueryPageSize): {
const auto *Args = reinterpret_cast<ze_virtual_mem_query_page_size_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
  std::cout << "phDevice: " << Args->phDevice << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "ppagesize: " << Args->ppagesize << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemMap): {
const auto *Args = reinterpret_cast<ze_virtual_mem_map_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "phPhysicalMemory: " << Args->phPhysicalMemory << "\n";
PrintOffset();
std::cout << "offset: " << *(Args->poffset) << "\n";
PrintOffset();
  std::cout << "paccess: " << Args->paccess << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemUnmap): {
const auto *Args = reinterpret_cast<ze_virtual_mem_unmap_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemSetAccessAttribute): {
const auto *Args = reinterpret_cast<ze_virtual_mem_set_access_attribute_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "paccess: " << Args->paccess << "\n";
break;
}
case static_cast<uint32_t>(ZEApiKind::zeVirtualMemGetAccessAttribute): {
const auto *Args = reinterpret_cast<ze_virtual_mem_get_access_attribute_params_t*>(Data->args_data);
PrintOffset();
  std::cout << "phContext: " << Args->phContext << "\n";
PrintOffset();
std::cout << "ptr: " << *(Args->pptr) << "\n";
PrintOffset();
std::cout << "size: " << *(Args->psize) << "\n";
PrintOffset();
  std::cout << "paccess: " << Args->paccess << "\n";
PrintOffset();
  std::cout << "poutSize: " << Args->poutSize << "\n";
break;
}
