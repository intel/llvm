= SYCL_EXT_ONEAPI_INVOKE_SIMD
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Introduction
IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.

NOTE: This document is better viewed when rendered as html with asciidoctor.  GitHub does not render image icons.

This extension introduces a mechanism to invoke explicitly vectorized functions
written using SIMD types from a SYCL kernel.

== Notice

Copyright (c) 2021 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a preview extension specification, intended to provide early access to a feature for review and community feedback. When the feature matures, this specification may be released as a formal extension.

Because the interfaces defined by this specification are not final and are subject to change they are not intended to be used by shipping software products.

== Version

Built On: {docdate} +
Revision: 3

== Contacts

John Pennycook, Intel (john 'dot' pennycook 'at' intel 'dot' com) +
Roland Schulz, Intel (roland 'dot' schulz 'at' intel 'dot' com) +
Jason Sewall, Intel (jason 'dot' sewall 'at' intel 'dot' com) +

== Dependencies

This extension is written against the SYCL 2020 specification, Revision 2 and the following extensions:

- SPV_INTEL_function_pointers
- SYCL_EXT_ONEAPI_UNIFORM

== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros".  Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_INVOKE_SIMD` to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's APIs the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|===

== Overview

Standard C++ functions are treated as SPMD functions in SYCL. "Horizontal" SIMD operations (e.g.
shuffles) can be expressed as group functions. If the user wants to tune for
the SIMD instruction set of a particular device, then they are dependent on an
implementation providing a sub-group extension that exposes the instructions
that they would like to use. The user might want to express their function
using SIMD types because they need to use intrinsics or inline ASM, have legacy
code that uses SIMD types, or are more familiar with that programming model.
This extension adds support for an execution model in which SIMD parallelism is
expressed using SIMD types, with clear delineation between SPMD and SIMD code regions through an invocation interface also introduced by the extension.

=== Defining a SIMD Function

Uniform arguments are represented by scalars, and varying arguments by explicit
vector types.  The explicit vector types are based on the SIMD classes
from [Parallelism TS2](http://wg21.link/N4808), and support all of the functions
operating on SIMD types as defined there. Additionally, each of the functions
defined in Sections 4.17.5, 4.17.6 and 4.17.7 of the SYCL 2020 specification
are overloaded to accept SIMD classes; these overloads operate element-wise on
the contents of the SIMD class.

[source, c++]
----
namespace sycl {
namespace ext {
namespace oneapi {
namespace experimental {

namespace simd_abi {
template <class T, int N>
using native_fixed_size = /* implementation-defined */;
} // namespace simd_abi

template <class T, int N>
using simd = std::experimental::simd<T, simd_abi::native_fixed_size<N>>;

template <class T, int N>
using simd_mask = std::experimental::simd_mask<T, simd_abi::native_fixed_size<N>>;

} // namespace experimental
} // namespace oneapi
} // namespace ext
} // namespace sycl
----

We introduce a new `native_fixed_size` ABI which combines elements of the
existing `native` and `fixed_size` ABIs defined in Parallelism TS2;
implementations are expected to use the most efficient representation
of a `simd<T, N>` type (e.g. using multiple registers rather than an array).
We expect implementations of this ABI to build on Clang's `ext_vector_type`,
rather than specifying the register types directly.

The value of `N` for each `simd` argument to a SIMD function must be the same,
and represents the sub-group size of the calling kernel.  If a function accepts
`simd` arguments with multiple `N` values, it cannot be invoked from a SPMD
kernel and the implementation must issue a diagnostic in this case.

The example below shows a simple SIMD function that scales all elements of
an 8-wide SIMD type `x` by a scalar value `n`.

[source, c++]
----
sycl::ext::oneapi::experimental::simd<float, 8> scale(sycl::ext::oneapi::experimental::simd<float, 8> x, float n)
{
  return x * n;
}
----

=== Invoking a SIMD Function

The `invoke_simd` free function invokes a SIMD function using all work-items
in a `sub_group`.  The `invoke_simd` interface marshals data between the
SPMD context of the calling kernel and the SIMD context of the callee,
converting arguments and return values between scalar and SIMD types as
appropriate.

[source, c++]
----
namespace sycl {
namespace ext {
namespace oneapi {
namespace experimental {

template <typename Callable, typename...T>
auto invoke_simd(sub_group sg, Callable&& f, T... args);

} // namespace experimental
} // namespace oneapi
} // namespace ext
} // namespace sycl
----

The `Callable` passed to `invoke_simd` must be a C++ callable that can be
invoked with the same number of arguments specified in the `args` parameter
pack. `Callable` may be a function object, a lambda,
or a function pointer (if the device supports `SPV_INTEL_function_pointers`).
`Callable` must be an immutable callable with the same type and state for all
work-items in the sub-group, otherwise behavior is undefined.

NOTE: When using a lambda `Callable`, it is very easy for a user to
unintentionally capture non-uniform variables and violate the requirements
from the previous paragraph. This form of `invoke_simd` should be used with
caution.

Each formal parameter of the invoked `Callable` must be a scalar type, a SIMD type,
or a `std::tuple` of these types. The length of each SIMD type must match the
sub-group size of the kernel; calling a SIMD function with mismatched lengths
is an error, and an implementation must issue a diagnostic.

To enable overloading in cases where the `Callable` accepts either a scalar
type or a SIMD type, we leverage the `sycl::ext::oneapi::experimental::uniform` wrapper
type from the `SYCL_EXT_ONEAPI_UNIFORM` extension.

Each argument in the `args` parameter pack must be an arithmetic type, a
trivially copyable type wrapped in a `sycl::ext::oneapi::experimental::uniform`, or a
`std::tuple` of these types.  Arguments may not be pointers or references,
but pointers (like any other non-arithmetic type) may be passed if wrapped in a
`sycl::ext::oneapi::experimental::uniform`.  Any such pointer value must point to memory
that is accessible by all work-items in the sub-group (i.e. the pointer must
point to an allocation in local or global memory).  The address space for such
pointers can be local, global or generic; if a generic pointer that points
to an allocation in private memory is passed as an argument, the behavior is
undefined.

NOTE: The restrictions above may prevent SYCL kernels from directly invoking
pre-existing SIMD functions (e.g. because they expect a vector of pointers).
The user is required to define a wrapper function to expose a compatible
interface in such cases (e.g. a wrapper function that converts a uniform base
pointer and offsets into a vector of pointers).

In order to invoke the SIMD function, `invoke_simd` converts each argument
in the `args` parameter pack according to the following rules:

- Arguments of type `bool` are converted to type
  `sycl::ext::oneapi::experimental::simd_mask<bool, N>`, where `N` is the sub-group size of
  the calling kernel.  Element `i` of the SIMD type represents the value from
  the work-item with sub-group local ID `i`.

- All other arithmetic arguments of type `T` are converted to type
  `sycl::ext::oneapi::experimental::simd<T, N>`, where `N` is the sub-group size of the
  calling kernel.  Element `i` of the SIMD type represents the value from the
  work-item with sub-group local ID `i`.

- Arguments of type `sycl::ext::oneapi::experimental::uniform<T>` are converted to type `T`.
  Conversion follows the same rules as the implicit conversion `operator T()`
  from the `sycl::ext::oneapi::experimental::uniform<T>` class; if the return value of
  `operator T()` would be undefined, the value of the scalar variable passed
  to the SIMD function is undefined.

- Arguments of type `std::tuple` are mapped as if each member of the tuple
  was mapped individually (e.g. a `std::tuple<float, int>` becomes a
  `std::tuple<sycl::ext::oneapi::experimental::simd<float, N>, sycl::ext::oneapi::experimental::simd<int, N>>`.

After this mapping has taken place, an appropriate variant of `Callable` is
selected based on standard overload resolution.

NOTE: If overload behavior is desired, a user must pass an overload set to
`invoke_simd` (e.g. a `Callable` with multiple call operators).  When the name
of a function is passed to `invoke_simd` it decays to a function pointer; if
the name of an overloaded function is passed to `invoke_simd`, the compiler
cannot deduce the type of `Callable`.

The return value of an `invoke_simd` function is subject to the same mapping
rules in reverse:

- Return values of type `sycl::ext::oneapi::experimental::simd_mask<bool, N>` are converted
  to `bool`, and the value in element `i` of the SIMD type is returned to the
  work-item with sub-group local ID `i`.

- Return values of all other arithmetic types `sycl::ext::oneapi::experimental::simd<T, N>`
  are converted to `T`, and the value in element `i` of the SIMD type is
  returned to the work-item with sub-group local ID `i`.

- Return values of type `T` are converted to `sycl::ext::oneapi::experimental::uniform<T>`,
  and broadcast to each work-item; every work-item in the sub-group receives
  the same value.

- Return values of type `std::tuple` are mapped as if each member of the tuple
  was mapped individually (e.g. a `std::tuple<sycl::ext::oneapi::experimental::simd<float, N>, sycl::ext::oneapi::experimental::simd<int, N>>`
  becomes a `std::tuple<float, int>`).

Note that these conversion rules do not permit special types (e.g. `sycl::nd_item`)
being passed between SPMD and SIMD contexts, because they cannot be declared uniform.
If an application bypasses this restriction (e.g. by wrapping an unsupported
type, or passing an unsupported type via a pointer) then behavior is undefined.
This restriction prevents a SIMD function from calling functions that are only
well-defined in SPMD contexts (e.g. sub-group barriers).  If a SIMD function
requires access to a member variable of a SYCL class, the value of the
variable should be passed via a dedicated argument (e.g. the value returned
by `sub_group::get_local_id()[0]` could be passed as an integer to a
`Callable` expecting a `sycl::ext::oneapi::experimental::simd<uint32_t, N>`).

The `invoke_simd` function has the same requirements as other group functions
(as defined in Section 4.17.3 of the SYCL 2020 specification). A call to
`invoke_simd` must be encountered in converged control flow by all work-items
in the group, and the call acts as a synchronization point -- the `Callable` is
not invoked until all work-items reach the call to `invoke_simd`, and all
work-items must wait for the `Callable` to complete before continuing
execution.

The example below shows how to invoke a simple SIMD function that scales all
elements of a SIMD type `x` by a scalar value `n`, both with and without a
SIMD mask parameter.

[source, c++]
----
sycl::ext::oneapi::experimental::simd<float, 8> scale(sycl::ext::oneapi::experimental::simd<float, 8> x, float n)
{
  return x * n;
}

sycl::ext::oneapi::experimental::simd<float, 8> masked_scale(sycl::ext::oneapi::experimental::simd<float, 8> x, float n, sycl::ext::oneapi::experimental::simd_mask<bool, 8> mask)
{
  std::experimental::where(mask, x) *= n;
  return x;
}

q.parallel_for(..., sycl::nd_item<1> it) [[sycl::reqd_sub_group_size(8)]]
{
  sycl::sub_group sg = it.get_sub_group();
  float x = ...;
  float n = ...;

  // invoke SIMD function
  // x values from each work-item are combined into a simd<float, 8>
  float y = sycl::ext::oneapi::experimental::invoke_simd(sg, scale, x, sycl::ext::oneapi::experimental::uniform(n));

  // invoke SIMD function with a mask parameter
  // x values from each work-item be a simd<float, 8>
  // mask values from each work-item are combined into a simd_mask<bool, 8>
  bool mask = (it.get_local_id(0) % 2);
  float z = sycl::ext::oneapi::experimental::invoke_simd(sg, masked_scale, x, sycl::ext::oneapi::experimental::uniform(n), mask);
});
----

The examples below demonstrates how invoking a SIMD function behaves in the
presence of function overloads.

[source, c++]
----
sycl::ext::oneapi::experimental::simd<float, 8> scale(sycl::ext::oneapi::experimental::simd<float, 8> x, float n)
{
  return x * n;
}

sycl::ext::oneapi::experimental::simd<float, 8> scale(sycl::ext::oneapi::experimental::simd<float, 8> x, sycl::ext::oneapi::experimental::simd<float, 8> n)
{
  return x * n;
}

q.parallel_for(..., sycl::nd_item<1> it) [[sycl::reqd_sub_group_size(8)]]
{
  sycl::sub_group sg = it.get_sub_group();
  float x = ...;
  float n = ...;

  // invoke SIMD function
  // which overload to call must be expressed explicitly, here we use invoke_simd's template argument
  float y = sycl::ext::oneapi::experimental::invoke_simd<sycl::ext::oneapi::experimental::simd<float, 8>(sycl::ext::oneapi::experimental::simd<float, 8>, float)>(sg, scale, x, sycl::ext::oneapi::experimental::uniform(n));
});
----

[source, c++]
----
struct scale
{
  sycl::ext::oneapi::experimental::simd<float, 8> operator()(sycl::ext::oneapi::experimental::simd<float, 8> x, float n)
  {
    return x * n;
  }

  sycl::ext::oneapi::experimental::simd<float, 8> operator()(sycl::ext::oneapi::experimental::simd<float, 8> x, sycl::ext::oneapi::experimental::simd<float, 8> n)
  {
    return x * n;
  }
};

q.parallel_for(..., sycl::nd_item<1> it) [[sycl::reqd_sub_group_size(8)]]
{
  sycl::sub_group sg = it.get_sub_group();
  float x = ...;
  float n = ...;

  // invoke SIMD function
  // the correct overload of scale's call operator will be selected after mapping to SIMD types
  // note that invoke_simd accepts an instance of scale
  float y = sycl::ext::oneapi::experimental::invoke_simd(sg, scale(), x, sycl::ext::oneapi::experimental::uniform(n));
});
----

==== Execution Model

Execution of a SIMD function must produce the same result as-if it had been
executed by a single work-item executing SIMD instructions.

The following are all examples of valid implementations of this model:

- Mapping SIMD operations directly to SIMD instructions.

- Mapping logical SIMD operations wider than the native SIMD width to multiple
  SIMD instructions.

- Mapping each element of a SIMD type to an individual work-item in a
  sub-group, with appropriate barriers and fences generated between SIMD
  operations.

- Mapping SIMD operations to an unrolled loop executed by a single work-item.

Since this execution model guarantees SIMD-like behavior, there is no need for
the user to insert any form of explicit synchronization functions to ensure
memory consistency across SIMD lanes.

== Issues

. Should we allow reference arguments?
+
--
*RESOLVED*: No.  Unlike pointers, it is less clear that references carry
address space information, and users may not expect a `T&` argument to behave
like a pointer to the generic address space.  Users are also more likely to try
and pass a reference to a variable in the private address space than a reference
to a variable in the local or global address spaces, which would lead to
undefined behavior and issues that are difficult to debug.
--

. How should returning multiple values and passing user-defined structs be handled?
+
--
*UNRESOLVED*: `std::tuple` addresses both issues from a user interface perspective,
but this aspect of the design may need to be revisited as we gain implementation experience.
--

. Should arguments require trivially copyable or device copyable?
+
--
*UNRESOLVED*: Device copyable permits bitwise copies of a wider range of classes, but the
SYCL 2020 specification states that this only applies to inter-device transfers.
--

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2021-03-30|John Pennycook|*Initial public working draft*
|2|2021-03-31|John Pennycook|*Rename extension and add feature test macro*
|3|2021-04-23|John Pennycook|*Split uniform wrapper into separate extension*
|========================================

//************************************************************************
//Other formatting suggestions:
//
//* Use *bold* text for host APIs, or [source] syntax highlighting.
//* Use +mono+ text for device APIs, or [source] syntax highlighting.
//* Use +mono+ text for extension names, types, or enum values.
//* Use _italics_ for parameters.
//************************************************************************
