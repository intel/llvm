= SYCL_INTEL_sub_group_algorithms
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Introduction
IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.

NOTE: This document is better viewed when rendered as html with asciidoctor.  GitHub does not render image icons.

This document describes an extension which introduces a library of sub-group functions, including communication patterns such as permutes and shifts.

== Name Strings

+SYCL_INTEL_sub_group_algorithms+

== Notice

Copyright (c) 2020-2021 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a preview extension specification, intended to provide early access to a feature for review and community feedback. When the feature matures, this specification may be released as a formal extension.

Because the interfaces defined by this specification are not final and are subject to change they are not intended to be used by shipping software products.

== Version

Built On: {docdate} +
Revision: 1

== Contact
John Pennycook, Intel (john 'dot' pennycook 'at' intel 'dot' com)

== Dependencies

This extension is written against the SYCL 1.2.1 specification, Revision 6 and the following extensions:

- +SYCL_INTEL_group_algorithms+
- +SYCL_INTEL_sub_group+
- +SYCL_INTEL_math_array+

== Overview

This extension introduces a library of sub-group functions, providing a simple way for developers to apply common parallel algorithms across data held by different work-items in the same sub-group, or to use the work-items of a sub-group to apply common parallel algorithms across data stored in memory.

This extension adds sub-group support to all of the functions from +SYCL_INTEL_group_algorithms+:

- +any_of+
- +all_of+
- +none_of+
- +broadcast+
- +leader+
- +reduce+
- +exclusive_scan+
- +inclusive_scan+

It additionally introduces a number of functions that are currently specific to sub-groups:

- +permute+
- +shift_left+
- +shift_right+
- +xor_permute+
- +load+
- +store+

=== Data Types

All functions are supported for the fundamental scalar types supported by SYCL and instances of the SYCL +vec+ and +marray+ classes. The fundamental scalar types (as defined in Section 6.5 of the SYCL 1.2.1 specification) are: +bool+, +char+, +signed char+, +unsigned char+, +short int+, +unsigned short int+, +int+, +unsigned int+, +long int+, +unsigned long int+, +long long int+, +unsigned long long int+, +size_t+, +float+, +double+, +half+.

Functions with arguments of type +vec<T,N>+ or +marray<T,N>+ are applied component-wise: they are semantically equivalent to N calls to a scalar function of type +T+.

=== Functions

The sub-group algorithms library is based on the algorithms library described in Section 28 of the {cpp}17 standard.  The syntax and restrictions are aligned, with two notable differences: the first argument to each function is a sub-group of work-items, in place of an execution policy; and pointers are accepted in place of iterators in order to guarantee that address space information is visible to the compiler.

Sub-group algorithms are performed collaboratively by the work-items in a sub-group. All functions therefore act as synchronization points and must be encountered in converged control flow by all work-items in the sub-group -- if one work-item in the sub-group reaches the function, then all work-items in the sub-group must reach the function.  Additionally, restrictions may be placed on the arguments passed to each function in order to ensure that all work-items in the sub-group agree on the operation that is being performed.  Any such restrictions on the arguments passed to a function are defined within the descriptions of those functions.

Many functions provide at least two overloads: one operating directly on data produced by the work-items in the sub-group, and another operating on a range of data in memory specified by a pair of pointers.  If the pointers passed to such a sub-group function are not the same for all work-items in the sub-group, their behavior is undefined.  How the elements of a range are processed by the work-items in a sub-group is undefined.

It is undefined behavior for any of these functions to be invoked within a +parallel_for_work_group+ or +parallel_for_work_item+ context, but this restriction may be lifted in a future version of the proposal.

==== Votes and Collectives

Each of these functions from +SYCL_INTEL_group_library+ is supported for sub-groups.  The definitions are identical, except an instance of the +sub_group+ class is accepted as the first argument in place of an instance of the +group+ class.

==== Permutes and Shifts

The permute sub-group functions perform arbitrary communication between pairs of work-items in a sub-group.  Common patterns -- such as shifting all values in a sub-group by a fixed number of work-items, or reversing the order of all values in a sub-group -- are exposed as specialized functions that may be accelerated in hardware.

|===
|Function|Description

|+template <typename T> T permute(sub_group sg, T x, id<1> local_id)+
|Exchange values of _x_ between work-items in the sub-group in an arbitrary pattern.  Returns the value of _x_ from the work-item with the specified id.  The value of _local_id_ must be between 0 and the sub-group size.

|+template <typename T> T shift_left(sub_group sg, T x, uint32_t delta)+
|Exchange values of _x_ between work-items in the sub-group via a shift.  Returns the value of _x_ from the work-item whose id is _delta_ larger than the calling work-item. The value returned when the result of id + _delta_ is greater than or equal to the sub-group size is undefined.  The value of _delta_ must be the same for all work-items in the sub-group.

|+template <typename T> T shift_right(sub_group sg, T x, uint32_t delta)+
|Exchange values of _x_ between work-items in the sub-group via a shift.  Returns the value of _x_ from the work-item whose id is _delta_ smaller than the calling work-item.  The value of returned when the result of id - _delta_ is less than zero is undefined.  The value of _delta_ must be the same for all work-items in the sub-group.

|+template <typename T> T xor_permute(sub_group sg, T x, id<1> mask)+
|Exchange pairs of values of _x_ between work-items in the sub-group.  Returns the value of _x_ from the work-item whose id is equal to the exclusive-or of the calling work-item's id and _mask_. _mask_ must be a compile-time constant value that is the same for all work-items in the sub-group.

|+template <typename T> T reverse(sub_group sg, T x)+
|Exchange values of _x_ between work-items in the sub-group so as to reverse their order.  The value returned on work-item +i+ is the value of _x_ from the work-item whose id is equal to the sub-group size - +i+.

|+template <typename T, class Compare> T sort(sub_group sg, T x, Compare comp)+
|Exchange values of _x_ between work-items in the sub-group so as to reflect their ordering by the binary comparison function object _comp_.  _comp_ must be one of the comparison function objects from the group library.

|===

==== Loads and Stores

The load and store sub-group functions enable developers to assert that all work-items in a sub-group read/write from/to contiguous locations in memory.  Such operations can be mapped directly to SIMD operations (when sub-groups are executed in SIMD fashion).

|===
|Function|Description

|+template <typename T> T load(sub_group sg, const T *src)+
|Load contiguous data from _src_.  Returns one element per work-item, corresponding to the memory location at _src_ + +get_local_id()+. The value of _src_ must be the same for all work-items in the sub-group. The address space information is deduced automatically. Only pointers to global and local address spaces are valid. Passing a pointer to other address spaces will cause the run time assertion. +T+ must be a _NumericType_.

|+template <typename T, access::address_space Space> T load(sub_group sg, const multi_ptr<T,Space> src)+
|Load contiguous data from _src_.  Returns one element per work-item, corresponding to the memory location at _src_ + +get_local_id()+. The value of _src_ must be the same for all work-items in the sub-group.  _Space_ must be +access::address_space::global_space+ or +access::address_space::local_space+. +T+ must be a _NumericType_.

|+template <int N, typename T, access::address_space Space> __unspecified__ load(sub_group sg, const multi_ptr<T,Space> src)+
|Load contiguous data from _src_.  Returns _N_ elements per work-item, corresponding to the _N_ memory locations at _src_ + +i+ * +get_max_local_range()+ + +get_local_id()+ for +i+ between 0 and _N_. The return type is implicitly convertible to +vec<T,N>+ (if +T+ is compatible with the +vec+ interface) and to +marray<T,N>+. The value of _src_ must be the same for all work-items in the sub-group.  _Space_ must be +access::address_space::global_space+ or +access::address_space::local_space+.  +T+ must be a _NumericType_.

|+template <typename T> void store(sub_group sg, T *dst, const T& x)+
|Store contiguous data to _dst_.  The value of _x_ from each work-item is written to the memory location at _dst_ + +get_local_id()+. The value of _dst_ must be the same for all work-items in the sub-group. The address space information is deduced automatically. Only pointers to global and local address spaces are valid. Passing a pointer to other address spaces will cause the run time assertion. +T+ must be a _NumericType_.

|+template <typename T, access::address_space Space> void store(sub_group sg, multi_ptr<T,Space> dst, const T& x)+
|Store contiguous data to _dst_.  The value of _x_ from each work-item is written to the memory location at _dst_ + +get_local_id()+. The value of _dst_ must be the same for all work-items in the sub-group.  _Space_ must be +access::address_space::global_space+ or +access::address_space::local_space+. +T+ must be a _NumericType_.

|+template <int N, typename T, access::address_space Space> void store(sub_group sg, multi_ptr<T,Space> dst, const vec<T,N>& x)+
|Store contiguous data to _dst_.  The _N_ elements from each work-item are written to the memory locations at _dst_ + +i+ * +get_max_local_range()+ + +get_local_id()+ for +i+ between 0 and _N_.  The value of _dst_ must be the same for all work-items in the sub-group.  _Space_ must be +access::address_space::global_space+ or +access::address_space::local_space+. +T+ must be a _NumericType_.

|+template <int N, typename T, access::address_space Space> void store(sub_group sg, multi_ptr<T,Space> dst, const marray<T,N>& x)+
|Store contiguous data to _dst_.  The _N_ elements from each work-item are written to the memory locations at _dst_ + +i+ * +get_max_local_range()+ + +get_local_id()+ for +i+ between 0 and _N_.  The value of _dst_ must be the same for all work-items in the sub-group.  _Space_ must be +access::address_space::global_space+ or +access::address_space::local_space+. +T+ must be a _NumericType_.
|===

|===

== Issues

None.

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2020-03-16|John Pennycook|*Initial public working draft*
|2|2021-02-26|Vladimir Lazarev|*Add load/store method for raw pointers*
|3|2021-04-06|John Pennycook|*Use sycl::marray in place of sycl::vec for load/store*
|========================================

//************************************************************************
//Other formatting suggestions:
//
//* Use *bold* text for host APIs, or [source] syntax highlighting.
//* Use +mono+ text for device APIs, or [source] syntax highlighting.
//* Use +mono+ text for extension names, types, or enum values.
//* Use _italics_ for parameters.
//************************************************************************
