= sycl_ext_oneapi_dot_accumulate

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2020 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 9 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.


== Status

This extension is implemented and fully supported by {dpcpp}.


== Overview

This extension adds new SYCL built-in functions that may simplify development
and provide access specialized hardware instructions when a SYCL kernel needs
to perform a dot product of two vectors followed by a scalar accumulation.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_DOT_ACCUMULATE` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|Initial version of this extension.
|===

=== New functions to compute the dot product of vectors

This extension adds the following free functions:

[source,c++]
----
namespace sycl::ext::oneapi {

int32_t dot_acc(vec<int8_t,4>  a, vec<int8_t,4>  b, int32_t c);
int32_t dot_acc(vec<int8_t,4>  a, vec<uint8_t,4> b, int32_t c);
int32_t dot_acc(vec<uint8_t,4> a, vec<int8_t,4>  b, int32_t c);
uint32_t dot_acc(vec<uint8_t,4> a, vec<uint8_t,4> b, uint32_t c);

int32_t dot_acc_4x8packed_ss(uint32_t a, uint32_t b, int32_t c);
int32_t dot_acc_4x8packed_su(uint32_t a, uint32_t b, int32_t c);
int32_t dot_acc_4x8packed_us(uint32_t a, uint32_t b, int32_t c);
uint32_t dot_acc_4x8packed_uu(uint32_t a, uint32_t b, uint32_t c);

} // namespace sycl::ext::oneapi
----

[cols="4a,4",options="header"]
|====
| *Function*
| *Description*

|[source,c]
----
int32_t dot_acc(vec<int8_t,4>  a,
                vec<int8_t,4>  b,
                int32_t c)
int32_t dot_acc(vec<int8_t,4>  a,
                vec<uint8_t,4> b,
                int32_t c)
int32_t dot_acc(vec<uint8_t,4> a,
                vec<int8_t,4>  b,
                int32_t c)
uint32_t dot_acc(vec<uint8_t,4> a,
                 vec<uint8_t,4> b,
                 uint32_t c)
----

|Performs a four-component integer dot product accumulate operation.  The value
that is returned is equivalent to `dot(a, b) + c`, where `dot` computes the
dot product of two vectors.

|[source,c]
----
int32_t dot_acc_4x8packed_ss(uint32_t a,
                             uint32_t b,
                             int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` and `b` are both interpreted as `vec<int8_t,4>`.

|[source,c]
----
int32_t dot_acc_4x8packed_su(uint32_t a,
                             uint32_t b,
                             int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` is interpreted as `vec<int8_t,4>` and `b` is interpreted as
`vec<uint8_t,4>`.

|[source,c]
----
int32_t dot_acc_4x8packed_us(uint32_t a,
                             uint32_t b,
                             int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` is interpreted as `vec<uint8_t,4>` and `b` is interpreted as
`vec<int8_t,4>`.

|[source,c]
----
uint32_t dot_acc_4x8packed_uu(uint32_t a,
                              uint32_t b,
                              uint32_t c);
----

|Performs a four-component integer dot product accumulate operation, where
`a` and `b` are both interpreted as `vec<uint8_t,4>`.
|====

For all the "packed" overloads, the least significant byte of the integer is
element 0, and the most significant byte is element 3.

=== Deprecated functions

The following functions are deprecated.

[source,c++]
----
namespace sycl::ext::oneapi {

int32_t dot_acc(vec<uint8_t,4> a, vec<uint8_t,4> b, int32_t c);

int32_t dot_acc(int32_t a, int32_t b, int32_t c);
int32_t dot_acc(int32_t a, uint32_t b, int32_t c);
int32_t dot_acc(uint32_t a, int32_t b, int32_t c);
int32_t dot_acc(uint32_t a, uint32_t b, int32_t c);

} // namespace sycl::ext::oneapi
----

[cols="4a,4",options="header"]
|====
| *Function*
| *Description*

|[source,c]
----
int32_t dot_acc(vec<uint8_t,4> a,
                vec<uint8_t,4> b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where the
elements of `a` and `b` are unsigned while `c` is signed.  Use the version
taking an unsigned `c` instead.

|[source,c]
----
int32_t dot_acc(int32_t a,
                int32_t b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` and `b` are both interpreted as `vec<int8_t,4>`.  Use
`dot_acc_4x8packed_ss` instead.

|[source,c]
----
int32_t dot_acc(int32_t a,
                uint32_t b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` is interpreted as `vec<int8_t,4>` and `b` is interpreted as
`vec<uint8_t,4>`.  Use `dot_acc_4x8packed_su` instead.

|[source,c]
----
int32_t dot_acc(uint32_t a,
                int32_t b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` is interpreted as `vec<uint8_t,4>` and `b` is interpreted as
`vec<int8_t,4>`.  Use `dot_acc_4x8packed_us` instead.

|[source,c]
----
int32_t dot_acc(uint32_t a,
                uint32_t b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation, where
`a` and `b` are both interpreted as `vec<uint8_t,4>`.  Use
`dot_acc_4x8packed_uu` instead.
|====
