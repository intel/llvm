= sycl_ext_oneapi_sub_group_mask
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2021-2023 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 6 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.


== Status

This extension is implemented and fully supported by {dpcpp}.

== Overview

This document describes an extension which adds a `sub_group_mask` type. Such a
mask can be used to efficiently represent subsets of work-items in a sub-group
for which a given Boolean condition holds.

Group mask functionality is currently limited to groups that are instances of
the `sub_group` class, but this limitation may be lifted in a future version of
the specification.


== Specification

=== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_SUB_GROUP_MASK` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|2     |`sub_group_mask` is user-constructible.
|===


=== Ballot

The `group_ballot` algorithm converts a Boolean condition from each work-item
in the group into a group mask.  Like other group algorithms, `group_ballot`
must be encountered by all work-items in the group in converged control flow.

|===
|Function|Description

|`template <typename Group> sub_group_mask group_ballot(Group g, bool predicate = true)`
|Return a `sub_group_mask` with one bit for each work-item in group _g_. A bit
is set in this mask if and only if the corresponding work-item's _predicate_ is
`true`. Available only when `std::is_same_v<std::decay_t<Group>, sub_group>` is true.
|===

=== Group Masks

The group mask type is an opaque type, permitting implementations to use any
mask representation that has the same size and alignment across host and
device. The maximum number of bits that can be stored in a `sub_group_mask` is
exposed as a static member variable, `sub_group_mask::max_bits`.

Functions declared in the `sub_group_mask` class can be called independently by
different work-items in the same group.  An instance of a group class (e.g.
`group` or `sub_group`) is not required to manipulate a group mask.

The mask is defined such that the least significant bit (LSB) corresponds to
the work-item with id 0, and the most significant bit (MSB) corresponds to the
work-item with the id `max_local_range()-1`.

NOTE: Constructors and assignment operator below are only available starting in
revision 2 of the specification.

|===
|Constructor|Description

|`sub_group_mask()`
|Constructs a group mask with all bits set to 0. Size of a group mask
corresponds to max local range of the sub-group which work-item belongs to.

|`sub_group_mask(unsigned long long val)`
|Constructs a group mask with the first `N` bit positions to the
corresponding bit values in _val_. `N` is a size of a group mask and it
corresponds to max local range of the sub-group which work-item belongs to. If
size of a group mask is bigger than the number of bits in the value
representation of `unsigned long long`, the remaining positions are initialized
to zero.

|`template <typename T, std::size_t K> sub_group_mask(const sycl::marray<T, K>& &val)`
|Constructs a group mask with the first `N` bit positions to the
corresponding bit values in _val_. `T` must be an integer type. `N` is a size
of a group mask and it corresponds to max local range of the sub-group which
work-item belongs to. If size of a group mask is bigger than number of bits in
the value representation of `T`, the remaining positions are initialized to zero.

|`sub_group_mask(const sub_group_mask &other) = default`
|Constructs a group mask as a copy of _other_. Size of _other_ group mask must
be the same as max local range of the sub-group which work-item belongs to or
otherwise behavior is undefined.

|`sub_group_mask& operator=(const sub_group_mask &other) = default`
|Assigns this instance of `sub_group_mask` with a copy of _other_. Size of both
group masks must be the same or otherwise behavior is undefined.
|===


|===
|Member Function|Description

|`bool operator[](id<1> id) const`
|Return `true` if the bit corresponding to the specified _id_ is set in the
 mask.

|`sub_group_mask::reference operator[](id<1> id)`
|Return a reference to the bit corresponding to the specified _id_ in the mask.

|`bool test(id<1> id) const`
|Return `true` if the bit corresponding to the specified _id_ is set in the
 mask.

|`bool all() const`
|Return `true` if all bits in the mask are set.

|`bool any() const`
|Return `true` if any bits in the mask are set.

|`bool none() const`
|Return `true` if none of the bits in the mask are set.

|`uint32_t count() const`
|Return the number of bits set in the mask.

|`uint32_t size() const`
|Return the number of bits in the mask.

|`id<1> find_low() const`
|Return the lowest `id` with a corresponding bit set in the mask. If no bits
 are set, the return value is equal to `size()`.

|`id<1> find_high() const`
|Return the highest `id` with a corresponding bit set in the mask. If no bits
 are set, the return value is equal to `size()`.

|`template <typename T> void insert_bits(const T &bits, id<1> pos = 0)`
|Insert `CHAR_BIT * sizeof(T)` bits into the mask, starting from _pos_.  `T`
 must be an integral type or a SYCL `marray` of integral types. If _pos_ pass:[+]
 `CHAR_BIT * sizeof(T)` is greater than `size()`, the final `size()` - (_pos_ pass:[+]
 `CHAR_BIT * sizeof(T)`) bits are ignored.

|`template <typename T> void extract_bits(T &out, id<1> pos = 0) const`
|Return `CHAR_BIT * sizeof(T)` bits from the mask, starting from _pos_.  `T`
 must be an integral type or a SYCL `marray` of integral types. If _pos_ pass:[+]
 `CHAR_BIT * sizeof(T)` is greater than `size()`, the final `size()` - (_pos_ pass:[+]
 `CHAR_BIT * sizeof(T)`) bits of the return value are zero.

|`void set()`
|Set all bits in the mask to true.

|`void set(id<1> id, bool value = true)`
|Set the bit corresponding to the specified _id_ to the value specified by
 _value_.

|`void reset()`
|Reset all bits in the mask.

|`void reset(id<1> id)`
|Reset the bit corresponding to the specified _id_.

|`void reset_low()`
|Reset the bit for the lowest `id` with a corresponding bit set in the mask.
 Functionally equivalent to `reset(find_low())`.

|`void reset_high()`
|Reset the bit for the highest `id` with a corresponding bit set in the mask.
 Functionally equivalent to `reset(find_high())`.

|`void flip()`
|Toggle the values of all bits in the mask.

|`void flip(id<1> id)`
|Toggle the value of the bit corresponding to the specified _id_.

|`bool operator==(const sub_group_mask &rhs) const`
|Return true if each bit in this mask is equal to the corresponding bit in
 `rhs`.

|`bool operator!=(const sub_group_mask &rhs) const`
|Return true if any bit in this mask is not equal to the corresponding bit in
 `rhs`.

|`sub_group_mask &operator &=(const sub_group_mask &rhs)`
|Set the bits of this mask to the result of performing a bitwise AND with this
 mask and `rhs`.

|`sub_group_mask &operator \|=(const sub_group_mask &rhs)`
|Set the bits of this mask to the result of performing a bitwise OR with this
 mask and `rhs`.

|`sub_group_mask &operator ^=(const sub_group_mask &rhs)`
|Set the bits of this mask to the result of performing a bitwise XOR with this
 mask and `rhs`.

|`sub_group_mask &operator pass:[<<=](size_t shift)`
|Set the bits of this mask to the result of shifting its bits _shift_ positions
 to the left using a logical shift.  Bits that are shifted out to the left are
 discarded, and zeroes are shifted in from the right.

|`sub_group_mask &operator >>=(size_t shift)`
|Set the bits of this mask to the result of shifting its bits _shift_ positions
 to the right using a logical shift.  Bits that are shifted out to the right are
 discarded, and zeroes are shifted in from the left.

|`sub_group_mask operator ~() const`
|Return a mask representing the result of flipping all the bits in this mask.

|`sub_group_mask operator <<(size_t shift) const`
|Return a mask representing the result of shifting its bits _shift_ positions
 to the left using a logical shift.  Bits that are shifted out to the left are
 discarded, and zeroes are shifted in from the right.

|`sub_group_mask operator >>(size_t shift) const`
|Return a mask representing the result of shifting its bits _shift_ positions
 to the right using a logical shift.  Bits that are shifted out to the right are
 discarded, and zeroes are shifted in from the left.

|===

|===
|Function|Description

|`sub_group_mask operator &(const sub_group_mask& lhs, const sub_group_mask& rhs)`
|Return a mask representing the result of performing a bitwise AND of `lhs` and
 `rhs`.

|`sub_group_mask operator \|(const sub_group_mask& lhs, const sub_group_mask& rhs)`
|Return a mask representing the result of performing a bitwise OR of `lhs` and
 `rhs`.

|`sub_group_mask operator ^(const sub_group_mask& lhs, const sub_group_mask& rhs)`
|Return a mask representing the result of performing a bitwise XOR of `lhs` and
 `rhs`.

|===

==== Sample Header

[source, c++]
----
namespace sycl {
namespace ext {
namespace oneapi {

struct sub_group_mask {

  // enable reference to individual bit
  struct reference {
    reference& operator=(bool x);
    reference& operator=(const reference& x);
    bool operator~() const;
    operator bool() const;
    reference& flip();
  };

  static constexpr size_t max_bits = /* implementation-defined */;

#if SYCL_EXT_ONEAPI_SUB_GROUP_MASK >= 2
  sub_group_mask();
  sub_group_mask(unsigned long long val);
  template<typename T, std::size_t K>
  sub_group_mask(const sycl::marray<T, K>& val);
  sub_group_mask(const sub_group_mask &other) = default;
  sub_group_mask& operator=(const sub_group_mask &other) = default;
#endif

  bool operator[](id<1> id) const;
  reference operator[](id<1> id);
  bool test(id<1> id) const;
  bool all() const;
  bool any() const;
  bool none() const;
  uint32_t count() const;
  uint32_t size() const;
  id<1> find_low() const;
  id<1> find_high() const;

  template <typename T>
  void insert_bits(const T &bits, id<1> pos = 0);

  template <typename T>
  void extract_bits(T &out, id<1> pos = 0) const;

  void set();
  void set(id<1> id, bool value = true);
  void reset();
  void reset(id<1> id);
  void reset_low();
  void reset_high();
  void flip();
  void flip(id<1> id);

  bool operator==(const sub_group_mask &rhs) const;
  bool operator!=(const sub_group_mask &rhs) const;

  sub_group_mask &operator &=(const sub_group_mask &rhs);
  sub_group_mask &operator |=(const sub_group_mask &rhs);
  sub_group_mask &operator ^=(const sub_group_mask &rhs);
  sub_group_mask &operator <<=(size_t n);
  sub_group_mask &operator >>=(size_t n);

  sub_group_mask operator ~() const;
  sub_group_mask operator <<(size_t n) const;
  sub_group_mask operator >>(size_t n) const;

};

sub_group_mask operator &(const sub_group_mask& lhs, const sub_group_mask& rhs);
sub_group_mask operator |(const sub_group_mask& lhs, const sub_group_mask& rhs);
sub_group_mask operator ^(const sub_group_mask& lhs, const sub_group_mask& rhs);

} // namespace oneapi
} // namespace ext
} // namespace sycl
----

== Issues

None.

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--
