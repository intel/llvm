= sycl_ext_intel_runtime_buffer_location

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Notice

[%hardbreaks]
Copyright (C) 2022 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues

== Dependencies

This extension is written against the SYCL 2020 revision 4 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

== Status
This is a proposed extension specification, intended to gather community
feedback.  Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state.  The specification itself may also change in
incompatible ways before it is finalized.  *Shipping software products should
not rely on APIs defined in this specification.*

== Overview

This document propose a new buffer_location runtime property that can be 
passed to `malloc_device`.

On targets that provide more than one type of global memory, this provide 
users the flexibility of choosing which memory the device usm should be 
allocated to.

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_INTEL_RUNTIME_BUFFER_LOCATION` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

== Examples

.Device allocation example
[source,c++]
----
using namespace sycl;
using namespace sycl::ext::intel::experimental;
...
queue q;

auto device_array = malloc_device<int>(kN, q, property_list{property::usm::buffer_location(2)});

int host_array[kN];

for(int i=0; i<kN; i++) {
  host_array[i] = ...
}

q.copy(host_array, device_array, kN).wait();
 
q.submit([=] {
  ...
  ... = device_array[index];
  device_array[index] = ...;
  ...
}).wait();

q.copy(device_array, host_array, kN).wait();

...
... = host_array[index];
----

.Shared allocation example
[source,c++]
----
using namespace sycl;
using namespace sycl::ext::intel::experimental;
...
queue q;

auto array = malloc_shared<int>(kN, q, property_list{property::usm::buffer_location(2)});
for(int i=0; i<kN; i++) {
  array = ...
}
 
q.submit([=] {
  ...
  ... = array[index];
  array[index] = ...;
  ...
}).wait();

...
... = array[index];
----


=== Changes to runtime properties

This extension adds the new property 
`sycl::ext::intel::experimental::property::usm::buffer_location` which 
applications can pass in the property_list parameter to all overloads of the 
`sycl::malloc_device()`, `sycl::malloc_shared()`, and `sycl::malloc_host()` 
functions. Following is a synopsis of this property.

[source,c++]
----
namespace sycl::ext::intel::experimental::property::usm {

class buffer_location {
 public:
  buffer_location(int location);
  int get_buffer_location() const;
};

} // namespace sycl::ext::intel::experimental::property::usm
----

On targets that provide more than one type of global memory, `buffer_location` 
allows users to specify which global memory to allocate memory to. This 
provides users the flexibility to choose the global memory that satisfies their
requirements for bandwidth and throughput.

This property is ignored for non-FPGA devices. Attempting to use this
extension on other devices or backends will result in no effect.

== Issues

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-03-01|Sherry Yuan|*Initial public draft*
|2|2022-05-31|Abhishek Tiwari|*Updates for shared/host malloc*
|========================================
