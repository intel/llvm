= sycl_ext_intel_fpga_kernel_interface_properties
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Introduction
IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

This extension introduces new kernel properties that can be applied to kernels
using the mechanism defined in sycl_ext_oneapi_kernel_properties.

== Notice

Copyright (c) 2021-2022 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a proposed extension specification, intended to gather community
feedback. Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state. The specification itself may also change in
incompatible ways before it is finalized. Shipping software products should not
rely on APIs defined in this specification.

== Version

Revision: 1

== Contributors

Joe Garvey, Intel +
Abhishek Tiwari, Intel

== Dependencies

This extension is written against the SYCL 2020 specification, Revision 4 and
the following extensions:

- sycl_ext_oneapi_properties
- link:sycl_ext_oneapi_kernel_properties.asciidoc[sycl_ext_oneapi_kernel_properties]

== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros".  Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_INTEL_FPGA_KERNEL_INTERFACE_PROPERTIES` to one of the values defined
in the table below.  Applications can test for the existence of this macro to
determine if the implementation supports this feature, or applications can test
the macro's value to determine which of the extension's APIs the implementation
supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|===

== Overview

This extension introduces kernel properties to specify how or when control and
data signals can be passed in to or out of an FPGA kernel. These properties are
meaningless on non-FPGA devices and can be ignored on such devices.

== Kernel Properties

```c++
namespace sycl {
namespace ext {
namespace oneapi {
namespace experimental {

// Corresponds to streaming_kernel
struct streaming_kernel_key {
  using value_t = property_value<streaming_kernel_key>;
}; // streaming_kernel_key

// Corresponds to csr_kernel
struct csr_kernel_key {
  using value_t = property_value<csr_kernel_key>;
}; // csr_kernel_key

// Corresponds to stall_free_return_kernel
struct stall_free_return_kernel_key {
  using value_t = property_value<stall_free_return_kernel_key>;
}; // stall_free_return_kernel_key

// Corresponds to pipelined_kernel
struct pipelined_kernel_key {
  using value_t = property_value<pipelined_kernel_key>;
}; // pipelined_kernel_key

inline constexpr streaming_kernel_key::value_t streaming_kernel;

inline constexpr csr_kernel_key::value_t csr_kernel;

inline constexpr stall_free_return_kernel_key::value_t stall_free_return_kernel;

inline constexpr pipelined_kernel_key::value_t pipelined_kernel;

} // namespace experimental
} // namespace oneapi
} // namespace ext
} // namespace sycl
```

|===
|Property|Description
|`streaming_kernel`
|The `streaming_kernel` property adds the requirement that the kernel must
 have dedicated ports for input / output signals. This applies for both
 control, and kernel argument data signals.

|`csr_kernel`
|The `csr_kernel` property adds the requirement that the kernel must have
 its input / output control and kernel argument data signals placed in a shared
 Control and Status Register (CSR) map.

|`stall_free_return_kernel`
|The `stall_free_return_kernel` property provides the compiler the guarantee
 that downstream logic will not back-pressure the kernel.

|`pipelined_kernel`
| The `pipelined_kernel` property directs the compiler to pipeline calls to the
 kernel so that multiple invocations of the kernel can be in flight
 simultaneously.

|===

Device compilers that do not support this extension may accept and ignore these
 properties.

== Adding a Property List to a Kernel Launch

A simple example of using this extension to launch a kernel with a streaming
 interface is shown below.

The example assumes that the kernel will not be back-pressured by the downstream
logic and hence uses the property `stall_free_return_kernel`:

```c++
sycl::ext::oneapi::experimental::properties properties{
  sycl::ext::oneapi::experimental::streaming_kernel,
  sycl::ext::oneapi::experimental::stall_free_return_kernel};

q.single_task(properties, [=]() {
  *a = *b + *c;
}).wait();
```

== Embedding Properties into a Kernel

The example below shows how the kernel from the previous section could be
rewritten to leverage an embedded property list:

```c++
struct KernelFunctor {

  KernelFunctor(int* a, int* b, int* c) : a(a), b(b), c(c) {}

  void operator()() const {
    *a = *b + *c;
  }

  auto get(sycl::ext::oneapi::experimental::properties_tag) {
    return sycl::ext::oneapi::experimental::properties{
      sycl::ext::oneapi::experimental::streaming_kernel,
      sycl::ext::oneapi::experimental::stall_free_return_kernel};
  }

  int* a;
  int* b;
  int* c;
};

...

q.single_task(KernelFunctor{a, b, c}).wait();
```

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-03-01|Abhishek Tiwari|*Initial public working draft*
|========================================