= sycl_ext_intel_fpga_kernel_interface_properties
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Introduction
IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

This extension introduces a replacement for the kernel attributes defined in
Section 5.8.1 of the SYCL 2020 specification, in the form of a property list
accepting properties with compile-time constant values.

== Notice

Copyright (c) 2021-2022 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a proposed extension specification, intended to gather community
feedback. Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state. The specification itself may also change in
incompatible ways before it is finalized. Shipping software products should not
rely on APIs defined in this specification.

== Version

Revision: 1

== Contributors

Joe Garvey, Intel +
Abhishek Tiwari, Intel

== Dependencies

This extension is written against the SYCL 2020 specification, Revision 4 and
the following extensions:

- link:sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties]
- link:sycl_ext_oneapi_kernel_properties.asciidoc[sycl_ext_oneapi_kernel_properties]

== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros".  Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_KERNEL_PROPERTIES` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's APIs the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|===

== Overview

This extension specifies the kernel properties designed for kernels that target
the FPGA device. These properties are supported by the Intel FPGA backend
compiler.

== Kernel Properties

```c++
namespace sycl {
namespace ext {
namespace oneapi {
namespace experimental {

// Corresponds to ip_interface_streaming
struct ip_interface_streaming_key {
  template <bool is_stall_free_return>
  using value_t = property_value<ip_interface_streaming_key, std::bool_constant<bool, is_stall_free_return>>;
}; // ip_interface_streaming_key

// Corresponds to ip_interface_streaming_stall_free_return
struct ip_pipelined_key {
  using value_t = property_value<ip_pipelined_key>;
}; // ip_pipelined_key

template<bool is_stall_free_return = false>
inline constexpr ip_interface_streaming_key::value_t<is_stall_free_return> ip_interface_streaming;
inline constexpr bool ip_stall_free_return = true;

inline constexpr ip_interface_streaming_key::value_t ip_interface_streaming_stall_free_return;

inline constexpr ip_interface_streaming_key::value_t ip_pipelined;

} // namespace experimental
} // namespace oneapi
} // namespace ext
} // namespace sycl
```

|===
|Property|Description
|`ip_interface_streaming`
|The `ip_interface_streaming` property adds the requirement that the kernel must
 have dedicated ports for input / output signals in the generated
 Register Transfer Level (RTL) module.
 
 The property takes a constant boolean template argument. When the value of the
 argument is `true` it adds the requirement that the kernel module should not
 take a 'stall' control flow signal from downstream logic as input. The kernel
 can take such an input signal otherwise. Pass the value `true` to this argument
 when the downstream logic is known to not stall.
 
 For convenience, a constant bool named `stall_free_return` with the value
 `true` is provided.

|`ip_pipelined`
| The `ip_pipelined` property adds the requirement that the kernel's logic be
  pipelined.

|===

Device compilers that do not support this extension may accept and ignore these
 properties.

== Adding a Property List to a Kernel Launch

A simple example of using this extension to launch a kernel with a streaming
 interface which does not need to accept a 'stall' control flow signal from
 downstream logic is given below:

```c++
sycl::ext::oneapi::experimental::properties properties{sycl::ext::oneapi::experimental::ip_interface_streaming<ip_stall_free_return>};
q.single_task(properties, [=]() {
  *a = *b + *c;
}).wait();
```

== Embedding Properties into a Kernel

The example below shows how the kernel from the previous section could be
rewritten to leverage an embedded property list:

```c++
struct KernelFunctor {

  KernelFunctor(int* a, int* b, int* c) : a(a), b(b), c(c) {}

  void operator()() const {
    *a = *b + *c;
  }

  auto get(sycl::ext::oneapi::experimental::properties_tag) {
    return sycl::ext::oneapi::experimental::properties{
      sycl::ext::oneapi::experimental::ip_interface_streaming<
        ip_stall_free_return>};
  }

  int* a;
  int* b;
  int* c;
};

...

q.single_task(KernelFunctor{a, b, c}).wait();
```

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-03-01|Abhishek Tiwari|*Initial public working draft*
|========================================