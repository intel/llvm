= sycl_ext_oneapi_clock

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]
:endnote: &#8212;{nbsp}end{nbsp}note

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2025 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 10 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

== Status

This is a proposed extension specification, intended to gather community
feedback.  Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state.  The specification itself may also change in
incompatible ways before it is finalized.  *Shipping software products should
not rely on APIs defined in this specification.*

== Backend support status

The APIs in this extension may be used only on a device that has
`aspect::ext_oneapi_clock`.  The application must check that the device has
this aspect before submitting a kernel using any of the APIs in this
extension.  If the application fails to do this, the implementation throws
a synchronous exception with the `errc::kernel_not_supported` error code
when the kernel is submitted to the queue.

== Overview

This extension defines a new free function `clock()`. See below for details.

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_CLOCK` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|Initial version of this extension.
|===

=== New device aspect

This extension adds new device aspect:

```c++
namespace sycl::ext::oneapi {

enum class aspect : /*unspecified*/ {
  ext_oneapi_clock
};

} // namespace sycl::ext::oneapi
```

[width="100%",%header,cols="50%,50%"]
|===
|Aspect
|Description

|`ext_oneapi_clock`
|Indicates that the device supports the `clock()` call.
|===

=== New free function

```c++
namespace sycl::ext::oneapi {

uint64_t clock(memory_scope scope = memory_scope::system);

} // namespace sycl::ext::oneapi
```

This function may only be called from within a command.

All work-items within the scope read from the same source clock.

_Returns:_ the sample value of a clock as seen by the compute unit.
The clock is defined as an unbounded, unsigned integer counter that
monotonically increments over time. The rate at which the clock advances is not
guaranteed to be constant: it may vary over the lifetime of a work-item, differ
between separate executions of the program, and be affected by conditions
outside the control of the programmer. The value returned by this instruction
corresponds to the least significant bits of the clock counter at the time of
execution. Consequently, the sampled value may wrap around zero.

== Issues
