
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++
:dpcpp: DPC++

== Notice

Copyright (c) 2022 Intel Corporation.  All rights reserved.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

== Contact

Jessica Davies, Intel (jessica 'dot' davies 'at' intel 'dot' com)

== Contributors

Jessica Davies, Intel +
Joe Garvey, Intel +
Michael Kinsner, Intel +
Aditi Kumaraswamy, Intel +
Steffen Larsen, Intel +
Gregory Lueck, Intel +
John Pennycook, Intel +
Roland Schulz, Intel +
Jason Sewall, Intel +
Abhishek Tiwari, Intel +
Sherry Yuan, Intel

== Dependencies

This extension is written against the SYCL 2020 specification, revision 5.
All references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

This extension also depends on the following other SYCL extensions:

- link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties]
- link:../proposed/sycl_ext_oneapi_annotated_ptr.asciidoc[sycl_ext_oneapi_annotated_ptr]

== Status

This is a proposed extension specification, intended to gather community
feedback.  Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state.  The specification itself may also change in
incompatible ways before it is finalized.  *Shipping software products should
not rely on APIs defined in this specification.*

== Overview

This extension introduces USM memory allocation functions with support for compile-time-constant and runtime properties, as defined in the link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties] extension.
The USM memory allocation functions introduced by this extension take a `properties` object as a parameter, and return an `annotated_ptr`.
This allows both runtime and compile-time-constant properties to be specified when allocating USM memory.
Furthermore, the `annotated_ptr` returned by the USM memory allocation functions allows compile-time-constant information to propagate to the device compiler and thereby enable additional optimization of kernel code.
This extension also introduces a new compile-time constant property `sycl::ext::oneapi::experimental::usm_kind`, whose single parameter is a value from the enumeration `sycl::usm::alloc`.

[NOTE]
====
In this document, we use the shortened form `annotated_ptr` to refer to the
proposed `sycl::ext::oneapi::experimental::annotated_ptr` class.
We also use the shortened form `properties` to refer to the `sycl::ext::oneapi::experimental::properties` class.
====

The purpose of this document is to clearly describe and specify USM memory allocation functions with `properties` support,
and related concepts, types, and mechanisms, and to give examples and context for their usage.

== Examples

Runtime and compile-time constant properties can be passed to the USM memory allocation functions introduced by this extension.
Properties passed to an allocation function may or may not appear on the returned `annotated_ptr` object:
compile-time constant properties will appear on the `annotated_ptr`, while runtime properties will not.

In the following examples, `bar` and `baz` are compile-time-constant properties, while `foo` is a
runtime property. Therefore if `bar` or `baz` is passed to a USM memory allocation function with `properties` support, it will appear on the returned `annotated_ptr`.
However, the `foo` property will not appear on the returned `annotated_ptr` because it is a runtime property.


[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P1{bar, baz, foo{1}};
properties P2{bar, foo{1}};
properties P3{bar, baz}

// APtr1 is of type annotated_ptr<int*, decltype(properties{bar, baz, usm_kind<sycl::usm::alloc::device>})>
auto APtr1 = annotated_malloc_device<int>(N, q, P1);

// APtr2 is of type annotated_ptr<int*, decltype(properties{bar, usm_kind<sycl::usm::alloc::device>})>
auto APtr2 = annotated_malloc_device<int>(N, q, P2);

// APtr3 is of type annotated_ptr<int*, decltype(properties{bar, baz, usm_kind<sycl::usm::alloc::device>})>
auto APtr3 = annotated_malloc_device<int>(N, q, P3);

// Runtime properties are not present on the returned annotated_ptr
static_assert(std::is_same_v<decltype(APtr1), decltype(APtr3)>);

// APtr1 and APtr2 do not have the same properties
static_assert(!std::is_same_v<decltype(APtr1), decltype(APtr2)>);
----

If the USM memory allocation kind is known at compile-time, the compile-time-constant property `sycl::ext::oneapi::experimental::usm_kind` will also appear on the returned `annotated_ptr`.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

// APtr4 is of type annotated_ptr<int*, decltype(properties{usm_kind<sycl::usm::alloc::device>})>
auto APtr4 = annotated_malloc_device<int>(N, q);

// APtr5 is of type annotated_ptr<int*, decltype(properties{usm_kind<sycl::usm::alloc::host>})>
auto APtr5 = annotated_malloc_host<int>(N, q);

// APtr6 is of type annotated_ptr<int*, decltype(properties{usm_kind<sycl::usm::alloc::shared>})>
auto APtr6 = annotated_malloc_shared<int>(N, q);

static_assert(!std::is_same_v<decltype(APtr4), decltype(APtr5)>);
static_assert(!std::is_same_v<decltype(APtr4), decltype(APtr6)>);
static_assert(!std::is_same_v<decltype(APtr5), decltype(APtr6)>);
----

This extension also introduces USM memory allocation functions with `properties` support that allow the USM memory allocation kind to be specified at runtime.
In this case, the returned `annotated_ptr` will not have the `sycl::ext::oneapi::experimental::usm_kind` property (unless that property is also passed in).

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P4{bar, foo{1}};

// APtr7 is of type annotated_ptr<int*, decltype(properties{bar})>
auto APtr7 = annotated_malloc<int>(N, q, sycl::usm::alloc::device, P4);

// TODO: no properties but still returns an annotated_ptr seems odd
// APtrNone is of type annotated_ptr<int*, decltype(properties{})>;
auto APtrNone = annotated_malloc<int>(N, q, sycl::usm::alloc::device);
----

If the USM memory allocation kind specified by a parameter to the allocation function is different than the USM memory allocation kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property, the function throws a
synchronous exception with the `errc::invalid` error code.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P6{usm_kind<sycl::usm::alloc::device>};

// Throws an exception with error code errc::invalid
auto APtr10 = annotated_malloc<int>(N, q, sycl::usm::alloc::host, P6);

----


If the `sycl::ext::oneapi::experimental::usm_kind` property specifies a different USM memory allocation kind than the function supports, the compiler will issue a diagnostic error.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P7{usm_kind<sycl::usm::alloc::device>};

auto APtr11 = annotated_malloc_host<int>(N, q, P7); // Error
----

The following example uses the compile-time-constant property `alignment`, defined in the link:../proposed/sycl_ext_oneapi_annotated_ptr.asciidoc[sycl_ext_oneapi_annotated_ptr] extension.
When `alignment` is passed to a USM memory allocation function with `properties` support, it will appear on the returned `annotated_ptr` since it is a compile-time constant property.
It also informs the runtime to allocate the memory with this alignment.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P8{alignment<512>};
// APtr12 is of type annotated_ptr<int, decltype(properties{alignment<512>, usm_kind<sycl::usm::alloc::device>})>
// The raw pointer of APtr12 is aligned to 512 bytes
auto APtr12 = annotated_malloc_device<int>(N, q, P8);

properties P9{alignment<1>};
auto APtr13 = annotated_malloc_device<int>(N, q, P9); // Error: alignment must be at least sizeof(int) bytes

properties P10{alignment<64>};
auto APtr14 = annotated_malloc_device(512, q, P10); // Exception: alignment must be at least 512 bytes
----

This extension also introduces USM memory allocation functions with `properties` support that allow alignment to be specified at runtime, using a separate parameter of type `size_t`.
If the compile-time constant `alignment` property is also passed in, the value of alignment it specifies must be equal to the alignment specified by the parameter of type `size_t`, otherwise
a synchronous exception will be thrown with error code `errc::invalid`.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P11{alignment<64>}

// All four of the following allocations are 64-byte aligned

// APtr15 is of type annotated_ptr<int, decltype(properties{usm_kind<sycl::usm::alloc::device>})>
auto APtr15 = annotated_aligned_alloc_device<int>(N, q, 64);

// APtr16 is of type annotated_ptr<int, decltype(properties{alignment<64>, usm_kind<sycl::usm::alloc::device>})>
auto APtr16 = annotated_aligned_alloc_device<int>(N, q, 64, P11);

// Exception, different alignments
auto APtr17 = annotated_aligned_alloc_device<int>(N, q, 128, P11);

// Exception, different alignments
auto APtr18 = annotated_aligned_alloc_device<int>(N, q, 16, P11);
----

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification, Section 6.3.3 "Feature test macros". Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_USM_MALLOC_PROPERTIES` to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features
the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version
|===

=== Orientation

The core SYCL specification lists eight functions in each of the following four tables:

- Table 103 "USM Device Memory Allocation Functions", of Section 4.8.3.2 "Device allocation functions" +
- Table 104 "USM Host Memory Allocation Functions", of Section 4.8.3.3 "Host allocation functions" +
- Table 105 "USM Shared Memory Allocation Functions", of Section 4.8.3.4 "Shared allocation functions" +
- Table 106 "USM Parameterized Allocation Functions", of Section 4.8.3.5 "Parameterized allocation functions"

This extension introduces a new function for each function listed in the above tables of the core SYCL specification.
This extension also adds USM memory allocation functions with `properties` support that require the `sycl::ext::oneapi::experimental::usm_kind` property,
and these do not correspond to any functions in the core SYCL specification.
All USM memory allocation functions introduced by this extension are listed explicitly in Section <<section.usm.allocs>>.

[NOTE]
====
The USM memory allocation functions defined in the core SYCL specification can be used in the same program as the USM memory allocation functions with `properties` support defined in this extension.
The new functions are distinguished by their names having the `annotated_` prefix.
====

[[section.usm.allocs]]
=== USM Memory Allocation Functions with properties Support

The following five tables list all functions introduced by this extension.

TODO: How is propertyListB going to be inferred? Do we need support for getting the type of a properties list with only the compile-time properties, and also adding a new compile-time property?
[[section.usm.device.allocs]]
==== Device allocation functions with properties support

[[table.usm.device.allocs]]
.USM Device Memory Allocation Functions with properties Support
[width="100%",options="header",separator="@",cols="65%,35%"]
|====
@ Function @ Description
a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_device(size_t numBytes,
                                                         const device& syclDevice,
                                                         const context& syclContext,
                                                         const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated memory on `syclDevice` on
success.  The allocation size is specified in bytes.  This memory is not
accessible on the host.  Memory allocated by `sycl::ext::oneapi::experimental::annotated_malloc_device`
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the
allocation function via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a
synchronous `exception` with the `errc::feature_not_supported`
error code if the `syclDevice` does not have
`aspect::usm_device_allocations`.  The `syclDevice` must either be
contained by `syclContext` or it must be a descendent device of some
device that is contained by that context, otherwise this function throws a
synchronous `exception` with the `errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_device(size_t count,
                                                         const device& syclDevice,
                                                         const context& syclContext,
                                                         const propertyListA &propList = properties{})
----
a@  Returns an `annotated_ptr` containing a raw pointer to the newly allocated memory on `syclDevice` on
success.  The allocation size is specified in number of elements of type
`T`.  This memory is not accessible on the host.  Memory allocated
by `sycl::ext::oneapi::experimental::annotated_malloc_device` must be deallocated with
`sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_device_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
descendent device of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_device(size_t numBytes,
                                               const queue& syclQueue,
                                               const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device`
and `context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_device_allocations`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_device(size_t count,
                                               const queue& syclQueue,
                                               const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device`
and `context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_device_allocations`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_device(size_t alignment,
                           size_t numBytes,
                           const device& syclDevice,
                           const context& syclContext,
                           const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated memory on
the specified `device` on success.
The memory will have `alignment`-byte alignment.
The allocation size is specified in bytes.  This memory is not accessible on
the host.  Memory allocated by `annotated_aligned_alloc_device` must be
deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Devices may only permit certain alignments. 

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_device_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
<<descendent-device>> of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_device(size_t alignment,
                           size_t count,
                           const device& syclDevice,
                           const context& syclContext,
                           const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated memory on
the specified `device` on success.
The memory will have `alignment`-byte alignment.

The allocation size is specified in elements of type `T`.  This memory is
not accessible on the host.  Memory allocated by
`annotated_aligned_alloc_device` must be deallocated with `sycl::free`
to avoid memory leaks. 
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.
Devices may only permit certain alignments.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a
synchronous `exception` with the `errc::feature_not_supported`
error code if the `syclDevice` does not have
`aspect::usm_device_allocations`.  The `syclDevice` must either be
contained by `syclContext` or it must be a <<descendent-device>> of some
device that is contained by that context, otherwise this function throws a
synchronous `exception` with the `errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_device(size_t alignment,
                           size_t numBytes,
                           const queue& syclQueue,
                           const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device`
and `context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.


Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_device_allocations`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_device(size_t alignment,
                           size_t count,
                           const queue& syclQueue,
                           const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device`
and `context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::device>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_device_allocations`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

|====

==== Host allocation functions with properties support

[[table.usm.host.allocs]]
.USM Host Memory Allocation Functions with properties Support
[width="100%",options="header",separator="@",cols="65%,35%"]
|====
@ Function @ Description
a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_host(size_t numBytes,
                                             const context& syclContext,
                                             const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated host memory on
success. This allocation is specified in bytes. The allocation is
accessible on the host and devices contained in the specified `context`.
Memory allocated by `sycl::ext::oneapi::experimental::annotated_malloc_host` must be
deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_host(size_t count,
                                             const context& syclContext,
                                             const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated host memory on
success. This allocation is specified in number of elements of type `T`.
The allocation is accessible on the host and devices contained in the
specified `context`.
Memory allocated by `sycl::ext::oneapi::experimental::annotated_malloc_host` must be
deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_host(size_t numBytes,
                                             const queue& syclQueue,
                                             const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_host(size_t count,
                                             const queue& syclQueue,
                                             const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_host(size_t alignment,
                         size_t numBytes,
                         const context& syclContext,
                         const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated host memory on
success. This allocation is specified in bytes. The memory will have `alignment`-byte alignment.

The allocation is accessible on the host and devices contained
in the specified `context`.
Memory allocated by `sycl::ext::oneapi::experimental::annotated_aligned_malloc_host` must be
deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_host(size_t alignment,
                         size_t count,
                         const context& syclContext,
                         const propertyListA &propList = properties{})
----
a@ Returns an `annotated_ptr` containing a raw pointer to the newly allocated host memory on
success. This allocation is specified in elements of type `T`. The memory will have `alignment`-byte alignment.
The allocation is accessible on the
host and devices contained in the specified `context`.
Memory allocated by `sycl::ext::oneapi::experimental::annotated_aligned_malloc_host` must be
deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_host(size_t alignment,
                         size_t numBytes,
                         const queue& syclQueue,
                         const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_host(size_t alignment,
                         size_t count,
                         const queue& syclQueue,
                         const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::host>`.

Only devices that have `aspect::usm_host_allocations` may access the
memory allocated by this function.  Attempting to access the memory from
a device that does not have the aspect results in undefined behavior.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.


|====

==== Shared allocation functions with properties support

[[table.usm.shared.allocs]]
.USM Shared Memory Allocation Functions with properties Support
[width="100%",options="header",separator="@",cols="65%,35%"]
|====
@ Function @ Description
a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_shared(size_t numBytes,
                                               const device& syclDevice,
                                               const context& syclContext,
                                               const propertyListA &propList = properties{})
----
a@ Returns a shared allocation that is accessible on the host and
on `syclDevice`.
This allocation is specified in bytes.  This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_shared_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
descendent device of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_shared(size_t count,
                                               const device& syclDevice,
                                               const context& syclContext,
                                               const propertyListA &propList = properties{})
----
a@ Returns a shared allocation that is accessible on the host and
on `syclDevice`.
This allocation is specified in number of elements of
type `T`. This memory must be deallocated with `sycl::free` to avoid
memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_shared_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
descendent device of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_shared(size_t numBytes,
                                               const queue& syclQueue,
                                               const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device` and
`context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_shared_allocations`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc_shared(size_t count,
                                               const queue& syclQueue,
                                               const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device` and
`context`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_shared_allocations`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_shared(size_t alignment,
                           size_t numBytes,
                           const device& syclDevice,
                           const context& syclContext,
                           const propertyListA &propList = properties{})
----
a@ Returns a shared allocation that is accessible on the host and
on `syclDevice`.
This allocation is specified in bytes.

The memory will have `alignment`-byte alignment.

This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_shared_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
<<descendent-device>> of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_shared(size_t alignment,
                           size_t count,
                           const device& syclDevice,
                           const context& syclContext,
                           const propertyListA &propList = properties{})
----
a@ Returns a shared allocation that is accessible on the host and
on `syclDevice`.
This allocation is specified in number of elements of type `T`. 

The memory will have `alignment`-byte alignment.

This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the `syclDevice`
does not have `aspect::usm_shared_allocations`.  The `syclDevice`
must either be contained by `syclContext` or it must be a
<<descendent-device>> of some device that is contained by that context,
otherwise this function throws a synchronous `exception` with the
`errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_shared(size_t alignment,
                           size_t numBytes,
                           const queue& syclQueue,
                           const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device` and
`context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_shared_allocations`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc_shared(size_t alignment,
                           size_t count,
                           const queue& syclQueue,
                           const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `device` and
`context`.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.
The returned `annotated_ptr` will have the property `usm_kind<sycl::usm::alloc::shared>`.

Throws a synchronous `exception` with the
`errc::feature_not_supported` error code if the device
does not have `aspect::usm_shared_allocations`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

|====

==== Parameterized allocation functions with properties support

[[table.usm.param.allocs]]
.USM Parameterized Allocation Functions with properties Support
[width="100%",options="header",separator="@",cols="65%,35%"]
|====
@ Function @ Description
a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t numBytes,
                                        const device& syclDevice,
                                        const context& syclContext,
                                        sycl::usm::alloc kind,
                                        const propertyListA &propList = properties{})
----
a@ Returns a `kind` allocation.
This allocation is specified in bytes. This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`sycl::usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a descendent device of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t count,
                                        const device& syclDevice,
                                        const context& syclContext,
                                        sycl::usm::alloc kind,
                                        const propertyListA &propList = properties{})
----
a@ Returns a `kind` allocation.

This allocation is specified in number of elements of type `T`.
This memory must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`sycl::usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a descendent device of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.


a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t numBytes,
                                        const queue& syclQueue,
                                        sycl::usm::alloc kind,
                                        const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`
and any necessary `device`.
Returns a `kind` allocation.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t count,
                                        const queue& syclQueue,
                                        sycl::usm::alloc kind,
                                        const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`
and any necessary `device`.

Returns a `kind` allocation.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc(size_t alignment,
                          size_t numBytes,
                          const device& syclDevice,
                          const context& syclContext,
                          sycl::usm::alloc kind,
                          const propertyListA &propList = properties{})
----
a@ Returns a `kind` allocation.
This allocation is specified in bytes.
The memory will have `alignment`-byte alignment.

This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.


The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a <<descendent-device>> of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.
Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.


Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc(size_t alignment,
                       size_t count,
                       const device& syclDevice,
                       const context& syclContext,
                       sycl::usm::alloc kind,
                       const propertyListA &propList = properties{})
----
a@ Returns a `kind` allocation.
This allocation is specified in number of elements of type `T`.
The memory will have `alignment`-byte alignment.

This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`sycl::usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a <<descendent-device>> of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.
Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template<typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc(size_t alignment,
                          size_t numBytes,
                          const queue& syclQueue,
                          sycl::usm::alloc kind,
                          const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`
and any necessary `device`.

Returns a `kind` allocation.

The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.
Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename T, typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<T, propertyListB>
sycl::ext::oneapi::experimental::annotated_aligned_alloc(size_t alignment,
                       size_t count,
                       const queue& syclQueue,
                       sycl::usm::alloc kind,
                       const propertyListA &propList = properties{})
----
a@ Simplified form where `syclQueue` provides the `context`
and any necessary `device`.

Returns a `kind` allocation.
The memory will have `alignment`-byte alignment.

Zero or more runtime and compile-time constant properties can be provided to the allocation function
via an instance of `properties`.
The compile-time constant properties in `propList` will appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains a `sycl::ext::oneapi::experimental::usm_kind` property specifying a different allocation kind.
Throws a synchronous `exception` with the `errc::invalid` error code if `propList` contains an `alignment` property specifying a different
alignment.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

|====

==== Additional USM memory allocation functions, requiring the usm_kind property

This section defines additional USM memory allocation functions with `properties` support, that require the `sycl::ext::oneapi::experimental::usm_kind` property to be passed in.
These functions do not correspond to any USM memory allocation functions in the core SYCL specification.

[NOTE]
====
The `properties` argument is non-optional for the functions defined in this section, since at least one property (i.e., `sycl::ext::oneapi::experimental::usm_kind`) must be provided. 
These functions are distinguished from the functions with the same names in Table <<table.usm.param.allocs>>, by the presence or absence of the parameter of type `sycl::usm::alloc`.
 
====

[[table.usm.additional.allocs]]
.USM allocation functions requiring the usm_kind property
[width="100%",options="header",separator="@",cols="65%,35%"]
|====
@ Function @ Description
a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t numBytes,
                                                  const device& syclDevice,
                                                  const context& syclContext,
                                                  const propertyListA &propList)
----
a@ `propList` must contain the `sycl::ext::oneapi::experimental::usm_kind` property, otherwise the compiler will issue a diagnostic error.
Returns a USM memory allocation of the kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property.
This allocation is specified in bytes. This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Additional runtime and compile-time constant properties can be provided in `propList`.
The compile-time constant properties in `propList` will also appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`sycl::usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a descendent device of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t count,
                                                  const device& syclDevice,
                                                  const context& syclContext,
                                                  const propertyListA &propList)
----
a@ `propList` must contain the `sycl::ext::oneapi::experimental::usm_kind` property, otherwise the compiler will issue a diagnostic error.
Returns a USM memory allocation of the kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property.
This allocation is specified in number of elements of type `T`.
This memory must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Additional runtime and compile-time constant properties can be provided in `propList`.
The compile-time constant properties in `propList` will also appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

The `syclDevice` parameter is
ignored if the allocation kind is `sycl::usm::alloc::host`.  If the allocation kind is not
`sycl::usm::alloc::host`, `syclDevice` must either be contained by
`syclContext` or it must be a descendent device of some device that
is contained by that context, otherwise this function throws a synchronous
`exception` with the `errc::invalid` error code.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.


a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t numBytes,
                                                  const queue& syclQueue,
                                                  const propertyListA &propList)
----
a@ `propList` must contain the `sycl::ext::oneapi::experimental::usm_kind` property, otherwise the compiler will issue a diagnostic error.
Returns a USM memory allocation of the kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property.
This allocation is specified in bytes. This memory
must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Additional runtime and compile-time constant properties can be provided in `propList`.
The compile-time constant properties in `propList` will also appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Simplified form where `syclQueue` provides the `context`
and any necessary `device`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.

a@
[source]
----
template <typename propertyListA, typename propertyListB>
sycl::ext::oneapi::experimental::annotated_ptr<void, propertyListB>
sycl::ext::oneapi::experimental::annotated_malloc(size_t count,
                                                  const queue& syclQueue,
                                                  const propertyListA &propList)
----
a@ `propList` must contain the `sycl::ext::oneapi::experimental::usm_kind` property, otherwise the compiler will issue a diagnostic error.
Returns a USM memory allocation of the kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property.
This allocation is specified in number of elements of type `T`.
This memory must be deallocated with `sycl::free` to avoid memory leaks.
On failure, the raw pointer of the returned `annotated_ptr` will be `nullptr`.

Additional runtime and compile-time constant properties can be provided in `propList`.
The compile-time constant properties in `propList` will also appear as properties of the returned `annotated_ptr`.
Runtime properties in `propList` will not appear as properties of the returned `annotated_ptr`.

Simplified form where `syclQueue` provides the `context`
and any necessary `device`.

Available only if `propertyListA` and `propertyListB` are specializations of the `properties` class.


|====

=== USM Memory Allocation Properties

This section specifies the properties that can be passed to the USM memory allocation functions with `properties` support defined in Section <<section.usm.allocs>>.
A SYCL implementation or SYCL backend may support additional properties other than those defined here, provided they are defined in accordance with the
link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties] extension.
If unsupported properties are passed to the USM memory allocation functions with `properties` support, the compiler will issue a diagnostic error.

All properties supported by `annotated_ptr` are supported by the USM memory allocation functions with `properties` support.

[NOTE]
====
The USM memory allocation functions with `properties` support defined in this extension support all properties supported by `annotated_ptr`, as a convenience. This allows the user to attach all desired properties to the `annotated_ptr` in a single step.
These properties do not affect the behavior of the allocation functions at runtime, except where explicitly specified.
====

Table <<table.usm.malloc.properties>> lists properties that affect the behavior of the allocation functions.

[[table.usm.malloc.properties]]
.Properties that affect the behavior of the USM memory allocation functions with properties support
[options="header"]
|====
|Property|Description|Source
a|
alignment
| 	
If this property is present on an `annotated_ptr`, it indicates that the raw pointer has this alignment in bytes.
If this property is passed to a USM memory allocation function with `properties` support, it instructs the runtime to allocate memory with this alignment in bytes.
If the USM memory allocation function with `properties` support is templated on an allocation type `T` and the specified alignment is not suitable for an object of type `T` the compiler will issue a diagnostic error.
If the USM memory allocation function with `properties` support is not templated on an allocation type `T`, and the specified alignment is not suitable for objects with fundamental alignment whose size is less than or equal to the requested allocation size, the USM memory allocation function with `properties` support will throw a synchronous exception with the `errc:invalid` error code.
|
link:../proposed/sycl_ext_oneapi_annotated_ptr.asciidoc[sycl_ext_oneapi_annotated_ptr]
|====

Table <<table.usm.malloc.devhostsh>> lists the new properties introduced by this extension.

[[table.usm.malloc.devhostsh]]
.New compile-time constant properties introduced by this extension
[options="header"]
|====
|Property|Values|Description|Supported By
a|
sycl::ext::oneapi::experimental::usm_kind
| 	
sycl::usm::alloc::host
sycl::usm::alloc::device
sycl::usm::alloc::shared
|
Indicates the kind of USM memory accessed by dereferencing this pointer and pointers derived from this pointer.
Instructs the runtime to allocate USM memory of this kind.
|
`annotated_ptr`, +
and the USM memory allocation functions with `properties` support defined in this extension.
|====


The `sycl::ext::oneapi::experimental::usm_kind` property is a compile-time constant property with a single non-type parameter. This parameter is a value belonging to the enumeration `sycl::usm::alloc`.
The `sycl::ext::oneapi::experimental::usm_kind` property is supported by `annotated_ptr` and the USM memory allocation functions defined in this extension.
If a USM memory allocation kind is also specified by a parameter of type `sycl::usm::alloc`, the kind specified by the `sycl::ext::oneapi::experimental::usm_alloc` property takes precedence.
If the USM memory allocation function with `properties` support does not have a parameter of type `sycl::usm::alloc`, and the USM memory allocation kind specified by the `sycl::ext::oneapi::experimental::usm_kind` property passed to the function is different than the kind of memory allocated by the function, the compiler will issue a diagnostic error.

=== Deallocation

To avoid memory leaks, USM memory allocated using the USM memory allocation functions with `properties` support defined in this extension, must be deallocated using one of the `sycl::free` functions listed in Table 107 "USM Deallocation Functions" of Section 4.8.3.6 "Memory deallocation functions" of the core SYCL specification.

The following example shows how USM memory allocated using one of the functions defined in this extension should be deallocated, to avoid memory leaks.

==== Example

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P1{alignment<512>};
// APtr is of type annotated_ptr<int*, decltype(properties{alignment<512>, usm_kind<sycl::usm::alloc::device>})>
auto APtr = annotated_malloc_device<int>(N, q, P1);

// Deallocate the memory using the raw pointer of APtr
sycl::free(APtr.get(), q);
----

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-07-18|Jessica Davies|*Initial public working draft*
|========================================
