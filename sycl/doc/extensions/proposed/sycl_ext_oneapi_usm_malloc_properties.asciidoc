= sycl_ext_oneapi_usm_malloc_properties

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++
:dpcpp: DPC++

== Notice

Copyright (c) 2022 Intel Corporation.  All rights reserved.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

== Contact

Jessica Davies, Intel (jessica 'dot' davies 'at' intel 'dot' com)

== Contributors

Jessica Davies, Intel +
Joe Garvey, Intel +
Michael Kinsner, Intel +
Aditi Kumaraswamy, Intel +
Gregory Lueck, Intel +
John Pennycook, Intel +
Roland Schulz, Intel
Jason Sewall, Intel +
Abhishek Tiwari, Intel +
Sherry Yuan, Intel

== Dependencies

This extension is written against the SYCL 2020 specification, revision 5.
All references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

This extension also depends on the following other SYCL extensions:

- link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties]
- link:../proposed/sycl_ext_oneapi_annotated_ptr.asciidoc[sycl_ext_oneapi_annotated_ptr]

== Status

This is a proposed extension specification, intended to gather community
feedback.  Interfaces defined in this specification may not be implemented yet
or may be in a preliminary state.  The specification itself may also change in
incompatible ways before it is finalized.  *Shipping software products should
not rely on APIs defined in this specification.*

== Overview

This extension adds properties support, as defined in the link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties] extension, to the USM malloc APIs.
The USM malloc functions defined in this extension take a `properties` object as a parameter, and return an `annotated_ptr` with the same compile-time-constant properties.
This allows both runtime and compile-time-constant properties to be specified when allocating USM.
Furthermore, the annotated_ptr returned by the USM malloc functions allows compile-time-constant information to propagate to the device compiler and thereby enable additional optimization of kernel code. 

[NOTE]
====
In this document, we use the shortened form `annotated_ptr` to refer to the
proposed `sycl::ext::oneapi::experimental::annotated_ptr` class.
We also use the shortened form `properties` to refer to the `sycl::ext::oneapi::experimental::properties` class.
====

The purpose of this document is to clearly describe and specify USM malloc functions with compile-time-constant properties support,
and related concepts, types, and mechanisms, and to give examples and context for their usage.

== Examples

In the following examples, `bar` and `baz` are compile-time-constant properties, while `foo` is a
runtime property.

The following example shows the use of the USM malloc APIs with compile-time-constant property support.

[source,c++]
----
using namespace sycl::ext::oneapi::experimental;

properties P1{bar, baz, foo{1}};
properties P2{bar, baz, foo{2}};
properties P3{bar, baz}

// APtr1 is of type annotated_ptr<int*, decltype(P1)> 
auto APtr1 = malloc_device<int>(N, q, P1);

// APtr2 is of type annotated_ptr<int*, decltype(P2)> 
auto APtr2 = malloc_device<int>(N, q, P2);

// APtr3 is of type annotated_ptr<int*, decltype(P3)>
auto APtr3 = malloc_device<int>(N, q, P3);

// Runtime property values do not affect the type of the annotated_ptr
// returned by malloc_device
static_assert(std::is_same_v<decltype(APtr1), decltype(APtr2)>);

// APtr1 and APtr3 do not have the same runtime properties
static_assert(!std::is_same_v<decltype(APtr1), decltype(APtr3)>);
----

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification, Section 6.3.3 "Feature test macros". Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_USM_MALLOC_PROPERTIES` to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features
that the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version
|===

=== USM Memory Allocation Functions with properties Support

The core SYCL specification lists eight functions in each of the following four tables:

- Table 103 "USM Device Memory Allocation Functions", of Section 4.8.3.2 "Device allocation functions" +
- Table 104 "USM Host Memory Allocation Functions", of Section 4.8.3.3 "Host allocation functions" +
- Table 105 "USM Shared Memory Allocation Functions", of Section 4.8.3.4 "Shared allocation functions" +
- Table 106 "USM Parameterized Allocation Functions", of Section 4.8.3.5 "Parameterized allocation functions"

This extension introduces a new function for each function listed in the above tables of the core SYCL specification.
For the sake of clarity and brevity, this extension specifies the new functions by describing how they differ from the corresponding functions in the core SYCL specification.

[NOTE]
====
The USM memory allocation functions defined in the core SYCL specification can be used in the same program as the USM memory allocation functions with `properties` support defined in this extension.
====

The following table lists phrases which appear in the the above tables of the core SYCL specification, and how they are replaced to generate the corresponding tables in this extension.
The parameters of each function introduced by this extension are the same as the parameters of the corresponding function in the core SYCL specification, except for the last parameter `propList`.

[options="header"]
|====
| Core SYCL | USM memory allocation functions with `properties` support 
a|
Zero or more properties can be provided to the allocation function via an instance of property_list.
|Zero or more runtime or compile-time-constant properties can be provided to the allocation function via an instance of sycl::ext::oneapi::experimental::properties.
a|
On failure, returns nullptr.
|
On failure, the raw pointer of the returned annotated_ptr will be nullptr.
a|
sycl::malloc
|
sycl::ext::oneapi::experimental::malloc
a|
sycl::aligned_alloc
|
sycl::ext::oneapi::experimental::aligned_alloc 
a|
sycl::malloc_device +
sycl::malloc_host +
sycl::malloc_shared
|
sycl::ext::oneapi::experimental::malloc_device +
sycl::ext::oneapi::experimental::malloc_host +
sycl::ext::oneapi::experimental::malloc_shared
a|
sycl::aligned_alloc_device +
sycl::aligned_alloc_host +
sycl::aligned_alloc_shared
|
sycl::ext::oneapi::experimental::aligned_alloc_device +
sycl::ext::oneapi::experimental::aligned_alloc_host +
sycl::ext::oneapi::experimental::aligned_alloc_shared
a|
The USM memory allocation function is a function template `template <typename T>` returning `T *`.
|
The corresponding USM memory allocation function with `properties` support is a function template
`template<typename T, typename propertyListT>` returning `annotated_ptr<T, propertyListT>`.
a|
The USM memory allocation funtion is not a function template, and returns `void *`.
|
The corresponding USM memory allocation function with `properties` support is a function template:
`template<typename propertyListT>` returning `annotated_ptr<void, propertyListT>`.
a|
The last parameter of the USM memory allocation function is an optional `const property_list &propList = {}`.
|
The last parameter of the corresponding USM memory allocation function with `properties` support is a non-optional `const propertyListT &propList`.
|====

The description of every function in this extension contains the following sentences:

[options="header"]
|====
| Function | Sentences appended to the Description
a| any of the functions specified in this extension
|
The runtime properties and compile-time-constant property values of the returned annotated_ptr will be the same as those in propList. +

If propList contains the sycl::ext::oneapi::experimental::alignment property, the allocation will be aligned to this specified alignment. +

Available only if `propertyListT` is a specialization of the sycl::ext::oneapi::experimental::properties class.
|====

For every function added by this extension that contains the word "aligned" in its name, its description contains the following additional sentence:
[options="header"]
|====
| Function | Sentences appended to the Description
a| any of the functions specified in this extension that contain "aligned" in their name
|
If the sycl::ext::oneapi::experimental::alignment property is specified in propList, its compile-time-constant value must be the same as the value of the `alignment` parameter, otherwise an error will be output by the compiler.
|====


 
==== Example

The following example shows two of the functions specified by this extension:

[frame="topbot",options="header"]
|===
|Functions |Description
a|
[source,c++]
----
template <typename T, typename propertyListT>
annotated_ptr<T, propertyListT>
sycl::ext::oneapi::experimental::malloc_device(
    size_t count,
    const sycl::queue& syclQueue,
    const propertyListT &propList)
----
|
Simplified form where syclQueue
provides the device and context. +

Zero or more runtime or compile-time-constant properties can be
provided to the allocation function
via an instance of sycl::ext::oneapi::experimental::properties. +

Throws a synchronous exception
with the errc::feature_not_supported error code if the device does
not have aspect::usm_device_allocations. +

The runtime properties and compile-time-constant property values of the returned annotated_ptr will be the same as those in propList. +

If propList contains the sycl::ext::oneapi::experimental::alignment property, the allocation will be aligned to this specified alignment. +

Available only if `propertyListT` is a specialization of the sycl::ext::oneapi::experimental::properties class.

// --- ROW BREAK ---
a|
[source,c++]
----
template <typename propertyListT>
annotated_ptr<void, propertyListT>
sycl::ext::oneapi::experimental::aligned_alloc(
  size_t alignment,
  size_t numBytes,
  const device& syclDevice,
  const context& syclContext,
  usm::alloc kind,
  const propertyListT &propList)
----
| 
Returns a kind allocation. This allocation is specified in bytes and
aligned to the specified alignment.
This memory must be deallocated
with sycl::free to avoid memory
leaks. +

On failure, the raw pointer of the returned annotated_ptr will be nullptr. +

Zero or more runtime or compile-time-constant properties can be
provided to the allocation function
via an instance of sycl::ext::oneapi::experimental::properties. +

The syclDevice parameter is
ignored if kind is usm::alloc::host.
If kind is not usm::alloc::host,
syclDevice must either be contained by syclContext or it must be
a descendent device of some
device that is contained by that
context, otherwise this function
throws a synchronous exception
with the errc::invalid error code. +

The runtime properties and compile-time-constant property values of the returned annotated_ptr will be the same as those in propList. +

If propList contains the sycl::ext::oneapi::experimental::alignment property, the allocation will be aligned to this specified alignment. +

Available only if `propertyListT` is a specialization of the sycl::ext::oneapi::experimental::properties class. +

If the sycl::ext::oneapi::experimental::alignment property is specified in propList, its compile-time-constant value must be the same as the value of the `alignment` parameter, otherwise an error will be output by the compiler.
|===


==== Deallocation 

To avoid memory leaks, USM memory allocated using the USM memory allocation functions with properties support defined in this extension, must be deallocated using one of the `sycl::free` functions listed in Table 107 "USM Deallocation Functions" of Section 4.8.3.6 "Memory deallocation functions" of the core SYCL specification.

The following example shows how USM memory allocated using one of the functions defined in this extension should be deallocated, to avoid memory leaks.

[source,c++]
----
sycl::ext::oneapi::experimental::properties P1{bar};
// APtr is of type annotated_ptr<int*, decltype(P1)>;
auto APtr = sycl::ext::oneapi::experimental::malloc_device<int>(N, q, P1);

// Deallocate the memory using the raw pointer of APtr
sycl::free(APtr.get(), q);
----

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-06-09|Jessica Davies|*Initial public working draft*
|========================================
