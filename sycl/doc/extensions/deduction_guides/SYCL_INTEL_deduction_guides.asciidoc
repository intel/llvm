= SYCL_INTEL_deduction_guides
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Introduction
IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.

NOTE: This document is better viewed when rendered as html with asciidoctor.  GitHub does not render image icons.

This document describes an extension that adds deduction guides for {cpp}17 compilers supporting class template argument deduction.


== Name Strings

+SYCL_INTEL_deduction_guides+

== Notice

Copyright (c) 2019 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a preview extension specification, intended to provide early access to a feature for review and community feedback. When the feature matures, this specification may be released as a formal extension.

Because the interfaces defined by this specification are not final and are subject to change they are not intended to be used by shipping software products.

== Version

Built On: {docdate} +
Revision: 1

== Contact
Roland Schulz, Intel (roland 'dot' schulz 'at' intel 'dot' com)

== Dependencies

This extension is written against the SYCL 1.2.1 specification, Revision v1.2.1-5.

== Overview

SYCL 1.2.1 is based on {cpp}11. {cpp}17 adds **class template argument deduction** (CTAD). This extension adds {cpp}17 deduction guides for users which use SYCL with a {cpp}17 compiler. It simplifies usage of, e.g.:

[source,c++,UsageFrom,linenums]
buffer<int, 2> b(ptr, range<2>(5, 5));

to:

[source,c++,UsageTo,linenums]
buffer b(ptr, range(5, 5));

This extension only specifies explicit deduction guides. For many classes CTAD works implicitly without requiring deduction guides. A {cpp}17 compiler is required to support CTAD for all types according to the {cpp}17 standard. An example for a type without deduction guides but with CTAD support is `nd_range`:

[source,c++,ndrange,linenums]
nd_range r(range(4), range(2));

== Enabling the extension

This extension is enabled for any {cpp}17 compiler with CTAD support. The {cpp}17 compilation mode flag is implementation defined (e.g. `-std=c{plus}{plus}17` or `/std:c{plus}{plus}17`).

== Modifications of SYCL 1.2.1 specification

=== Add to the end of the header in 4.7.2.1 

[source,c++,buffer,linenums]
#ifdef __cpp_deduction_guides
template <class InputIterator, class AllocatorT>
buffer(InputIterator, InputIterator, AllocatorT, const property_list & = {})
    ->buffer<typename std::iterator_traits<InputIterator>::value_type, 1,
             AllocatorT>;
template <class InputIterator>
buffer(InputIterator, InputIterator, const property_list & = {})
    ->buffer<typename std::iterator_traits<InputIterator>::value_type, 1>;
template <class T, int dimensions, class AllocatorT>
buffer(const T *, const range<dimensions> &, AllocatorT,
       const property_list & = {})
    ->buffer<T, dimensions, AllocatorT>;
template <class T, int dimensions>
buffer(const T *, const range<dimensions> &, const property_list & = {})
    ->buffer<T, dimensions>;
#endif

=== Add to the end of the header in 4.7.7.1

[source,c++,multiptr,linenums]
#ifdef __cpp_deduction_guides
template <int dimensions, access::mode Mode, access::placeholder isPlaceholder,
          class T>
multi_ptr(
    accessor<T, dimensions, Mode, access::target::global_buffer, isPlaceholder>)
    ->multi_ptr<T, access::address_space::global_space>;
template <int dimensions, access::mode Mode, access::placeholder isPlaceholder,
          class T>
multi_ptr(accessor<T, dimensions, Mode, access::target::constant_buffer,
                   isPlaceholder>)
    ->multi_ptr<T, access::address_space::constant_space>;
template <int dimensions, access::mode Mode, access::placeholder isPlaceholder,
          class T>
multi_ptr(accessor<T, dimensions, Mode, access::target::local, isPlaceholder>)
    ->multi_ptr<T, access::address_space::local_space>;
#endif

=== Add to the end of the header in 4.8.1.1 

[source,c++,range,linenums]
#ifdef __cpp_deduction_guides
range(size_t)->range<1>;
range(size_t, size_t)->range<2>;
range(size_t, size_t, size_t)->range<3>;
#endif

=== Add to the end of the header in 4.8.1.3

[source,c++,id,linenums]
#ifdef __cpp_deduction_guides
id(size_t)->id<1>;
id(size_t, size_t)->id<2>;
id(size_t, size_t, size_t)->id<3>;
#endif

=== Add to the end of the header in 4.20.2.1

[source,c++,vec,linenums]
#ifdef __cpp_deduction_guides
// Available only when: (std::is_same_v<T, U> && ...)
template <class T, class... U>
vec(T, U...)->vec<T, sizeof...(U) + 1>;
#endif

=== Add to end of the last paragraph in 6.4

The SYCL specification defines some features requiring newer versions for {cpp} (e.g. {cpp}17 deduction guides).
These are available if the {cpp} compilers supports these features.

== Proof of concept implementation references

. https://github.com/intel/llvm/pull/772
. https://github.com/intel/llvm/pull/773
. https://github.com/intel/llvm/pull/834

== Issues

None.

//. asd
//+
//--
//*RESOLUTION*: Not resolved.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2019-11-05|Roland Schulz|*Initial public working draft*
|========================================

//************************************************************************
//Other formatting suggestions:
//
//* Use *bold* text for host APIs, or [source] syntax highlighting.
//* Use +mono+ text for device APIs, or [source] syntax highlighting.
//* Use +mono+ text for extension names, types, or enum values.
//* Use _italics_ for parameters.
//************************************************************************
