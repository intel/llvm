= sycl_ext_oneapi_kernel_compiler_spirv

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]
:cpp: pass:[C++]
:endnote: &#8212;{nbsp}end{nbsp}note

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2023-2024 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.
OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 8 specification.
All references below to the "core SYCL specification" or to section numbers in
the SYCL specification refer to that revision.
This extension also depends on the SPIR-V version 1.6, revision 2
specification.
All references below to the "SPIR-V specification" refer to that revision.

This extension also depends on the following other SYCL extensions:

* link:../experimental/sycl_ext_oneapi_kernel_compiler.asciidoc[
  sycl_ext_oneapi_kernel_compiler]


== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback. Interfaces defined in
this specification are implemented in {dpcpp}, but they are not finalized
and may change incompatibly in future versions of {dpcpp} without prior notice.
*Shipping software products should not rely on APIs defined in
this specification.*


== Overview

This is an extension to
link:../experimental/sycl_ext_oneapi_kernel_compiler.asciidoc[
sycl_ext_oneapi_kernel_compiler], which allows an application to define a
kernel as a SPIR-V binary module when dynamically compiling a kernel from
source.
One possible use case is an application that stores pre-compiled kernels as
individual SPIR-V files.
The application can load one of these files at runtime and then use this
extension to enqueue the kernel and set its arguments.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.
An implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_KERNEL_COMPILER_SPIRV`
to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

=== New source language enumerator

This extension adds the `spirv` enumerator to the `source_language`
enumeration, which indicates that a kernel bundle defines kernels as a SPIR-V
binary module.

[source,c++]
----
namespace sycl::ext::oneapi::experimental {

enum class source_language : /*unspecified*/ {
  // ...
  spirv
};

} // namespace sycl::ext::oneapi::experimental
----

=== Source code is binary format

Kernels written in the `spirv` language are SPIR-V binary modules.
As a result, the application must use the overload of
`create_kernel_bundle_from_source` taking `std::vector<std::byte>` when
creating a kernel bundle from this language.

=== Build options

This extension does not specify any options that may be passed via the
`build_options` property, however an implementation may allow
implementation-defined options to be passed this way.

=== SPIR-V execution environment

The precise rules for interpreting a SPIR-V module are defined both by the
SPIR-V specification and by the SPIR-V execution environment.
For the purposes of this SYCL extension, the SPIR-V execution environment is
defined by the SYCL backend.
Each SYCL backend that supports this extension must provide a SPIR-V client API
specification that formally defines the SPIR-V execution environment.

[_Note:_ {dpcpp} provides two backends that can support this SYCL extension,
and each has its own SPIR-V client API.
For the Level Zero backend, see the
https://spec.oneapi.io/level-zero/latest/core/SPIRV.html[SPIR-V Programming
Guide].
For the OpenCL backend, see the
https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_Env.html[
OpenCL SPIR-V Environment Specification].
_{endnote}_]

=== Obtaining a kernel

In SPIR-V, a kernel is represented as an *OpEntryPoint*, which has a literal
_Name_ parameter.
The `ext_oneapi_has_kernel` and `ext_oneapi_get_kernel` member functions
identify a kernel using the name, exactly as it appears in the *OpEntryPoint*
instruction.
For example, if the kernel is defined this way in SPIR-V:

[source]
----
OpEntryPoint Kernel %20 "foo"
----

Then the application's host code can query for the kernel like so:

[source,c++]
----
sycl::kernel_bundle<sycl::bundle_state::executable> kb = /*...*/;
sycl::kernel k = kb.ext_oneapi_get_kernel("foo");
----

=== Passing kernel arguments

The SPIR-V *OpEntryPoint* that defines a kernel has an associated *OpFunction*.
This *OpFunction* is followed by a list of *OpFunctionParameter* instructions,
one for each kernel argument.
The following table defines the set of argument types that are supported by
this extension and explains how to pass each type of argument from SYCL.
However, the set of supported argument types may be further limited by the
backend's SPIR-V client API specification.

[%header,cols="1,1"]
|===
|SPIR-V type
|Corresponding SYCL type

|*OpTypeInt*
|A {cpp} type that is device copyable, which has the same width and data
 representation.

[_Note:_ Applications typically use a fixed-width integer type where the width
matches the width of the *OpTypeInt*.
_{endnote}_]

|*OpTypeFloat*
|A {cpp} type that is device copyable, which has the same width and data
 representation.

[_Note:_ Applications typically use `float` when the *OpTypeFloat* has a width
of 32, `double` when the *OpTypeFloat* has a width of 64, and `sycl::half` when
the *OpTypeFloat* has a width of 16.
_{endnote}_]

|*OpTypePointer* with _Storage Class_ *CrossWorkgroup*
|Either a {cpp} pointer (typically a pointer to USM memory) or an `accessor`
 whose target is `target::device`.

|*OpTypePointer* with _Storage Class_ *Workgroup*
|A `local_accessor`.

[_Note:_ The `local_accessor` merely conveys the size of the local memory, such
that the *OpTypePointer* kernel argument points to a local memory buffer of _N_
bytes, where _N_ is the value returned by `local_accessor::byte_size`.
If the application wants to pass other information from the `local_accessor` to
the kernel (such as the value _N_), it must pass this as separate kernel
arguments.
_{endnote}_]

|*OpTypePointer* with _Storage Class_ *Function* and _Type_ *OpTypeStruct*
 (i.e. the pointed-at type is *OpTypeStruct*).
|A {cpp} struct or class that is device copyable, which has the same size and
 data representation as the *OpTypeStruct*.

[_Note:_ The SYCL argument is a structure even though the SPIR-V argument type
is a pointer because structures are passed by reference.

The SYCL argument must not contain any `accessor` or `local_accessor` members
because these types are not device copyable.
If the *OpTypeStruct* contains an *OpTypePointer* member, the corresponding SYCL
structure member is typically a USM pointer.
_{endnote}_]
|===

When data allocated on the host is accessed by the kernel via a pointer, the
application must ensure that the data has the same size and representation on
the host and inside the SPIR-V module.

[_Note:_ Applications should consider using the fixed-width integer types when
allocating integer data that will be accessed by the kernel through a pointer
because this helps ensure that the size of the integers on the host matches the
size in the kernel.
_{endnote}_]

=== Iteration space and built-in variables

A `kernel` object created from a SPIR-V module must be launched either as a
single-task kernel or as an nd-range kernel.
Attempting to launch such a kernel with a simple range iteration space results
in undefined behavior.

If the kernel is launched as a single-task kernel, it is executed with a
1-dimensional nd-range, with one work-group of one work-item.
Because it is launched as an nd-range kernel, the kernel can use features that
are normally prohibited in single-task kernels.
For example, the `local_accessor` type is allowed as a kernel argument, and the
kernel can use SPIR-V group and subgroup instructions.
Of course, these features have limited use because the kernel is launched with
just a single work-item.

If the kernel is launched as an nd-range kernel, the number of work-group
dimensions is the same as the number of dimensions in the `nd_range`.
The global size, local size, and the number of work-groups is determined in the
usual way from the `nd_range`.
If the SPIR-V kernel defines a fixed local size (e.g. via the *LocalSize*
execution mode), the local size in the `nd_range` must match this value.

The kernel may use SPIR-V built-in variables as they are defined in the SPIR-V
client API specification, with the following clarification.
Some of the built-in variables are defined as a 3-component vector (e.g.
*GlobalSize*).
The order of these components is inverted from their corresponding SYCL
objects.
To illustrate, consider a 3-dimensional kernel invocation.
Vector component 0 of the *GlobalSize* variable corresponds to dimension 2 of
the `nd_range`, and vector component 2 of the *GlobalSize* variable corresponds
to dimension 0 of the `nd_range`.


== Example

The following example shows a simple SYCL program that loads a SPIR-V module
from a file and then launches a kernel from that module.

[source,c++]
----
#include <cstddef>
#include <cstdint>
#include <fstream>
#include <vector>
#include <sycl/sycl.hpp>

namespace syclex = sycl::ext::oneapi::experimental;

int main() {
  sycl::queue q;

  // Read the SPIR-V module from disk.
  std::ifstream spv_stream("my-kernel.spv", std::ios::binary);
  spv_stream.seekg(0, std::ios::end);
  size_t sz = spv_stream.tellg();
  spv_stream.seekg(0);
  std::vector<std::byte> spv(sz);
  spv_stream.read((char*)spv.data(), sz);

  // Create a kernel bundle from the binary SPIR-V.
  sycl::kernel_bundle<sycl::bundle_state::ext_oneapi_source> kb_src =
    syclex::create_kernel_bundle_from_source(
      q.get_context(),
      syclex::source_language::spirv,
      spv);

  // Build the SPIR-V module for our device.
  sycl::kernel_bundle<sycl::bundle_state::executable> kb_exe =
    syclex::build(kb_src);

  // Get a "kernel" object representing the kernel from the SPIR-V module.
  sycl::kernel k = kb_exe.ext_oneapi_get_kernel("my_kernel");

  constexpr int N = 4;
  constexpr int WGSIZE = 1;
  int32_t input[N] = {0, 1, 2, 3};
  int32_t output[N] = {};

  sycl::buffer inputbuf(input, sycl::range{N});
  sycl::buffer outputbuf(output, sycl::range{N});

  q.submit([&](sycl::handler &cgh) {
    sycl::accessor in{inputbuf, cgh, sycl::read_only};
    sycl::accessor out{outputbuf, cgh, sycl::read_write};

    // Set the values for the kernel arguments.
    cgh.set_args(in, out);

    // Invoke the kernel over an nd-range.
    sycl::nd_range ndr{{N}, {WGSIZE}};
    cgh.parallel_for(ndr, k);
  });
}
----
