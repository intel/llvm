= sycl_ext_oneapi_kernel_compiler_opencl

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]
:endnote: &#8212;{nbsp}end{nbsp}note

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2023-2023 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.
OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 8 specification.
All references below to the "core SYCL specification" or to section numbers in
the SYCL specification refer to that revision.

This extension references sections of the OpenCL specification version 3.0.14.
References below to the "OpenCL specification" refer to that version.
It also references sections of the OpenCL C specification version 3.0.14.
References below to the "OpenCL C specification" refer to that version.

This extension also depends on the following other SYCL extensions:

* link:../experimental/sycl_ext_oneapi_kernel_compiler.asciidoc[
  sycl_ext_oneapi_kernel_compiler]


== Status

This is an experimental extension specification, intended to provide early 
access to features and gather community feedback. Interfaces defined in 
this specification are implemented in DPC++, but they are not finalized 
and may change incompatibly in future versions of DPC++ without prior notice. 
*Shipping software products should not rely on APIs defined in 
this specification.*


== Overview

This is an extension to
link:../experimental/sycl_ext_oneapi_kernel_compiler.asciidoc[
sycl_ext_oneapi_kernel_compiler], which allows an application to define a
kernel in the OpenCL C language when dynamically compiling a kernel from
source.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.
An implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_KERNEL_COMPILER_OPENCL`
to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

=== New source language enumerator

This extension adds the `opencl` enumerator to the `source_language`
enumeration, which indicates that a kernel bundle defines kernels in the
OpenCL C language.

```
namespace sycl::ext::oneapi::experimental {

enum class source_language : /*unspecified*/ {
  // ...
  opencl
};

} // namespace sycl::ext::oneapi::experimental
```

=== Source code is text format

Kernels written in the `opencl` language are text format.
As a result, the application must use the overload of
`create_kernel_bundle_from_source` taking `std::string` when creating a kernel
bundle from this language.

=== Queries

==== Version type

This extension adds the following type and constant definitions, which help
identify the version of OpenCL and its extensions.

|====
a|
[frame=all,grid=none]
!====
a!
[source]
----
namespace sycl::ext::oneapi::experimental {

struct cl_version {
  unsigned major:10;
  unsigned minor:10;
  unsigned patch:12;
};

inline constexpr cl_version opencl_c_1_0 = {1,0,0};
inline constexpr cl_version opencl_c_1_1 = {1,1,0};
inline constexpr cl_version opencl_c_1_2 = {1,2,0};
inline constexpr cl_version opencl_c_2_0 = {2,0,0};
inline constexpr cl_version opencl_c_3_0 = {3,0,0};

} // namespace ext::oneapi::experimental
----
!====

The meaning of the `major`, `minor`, and `patch` values are defined by section
3.4.3.1 "Versions" of the OpenCL specification.

The constant values (e.g. `opencl_c_1_0`) are shorthands that identify various
OpenCL C versions.

[_Note:_ The OpenCL C version is not the same as the the OpenCL version because
some minor releases of OpenCL did not change the OpenCL C language.
For example, there is no version of OpenCL C named "2.1" even though there is
an OpenCL version named "2.1".
_{endnote}_]
|====

==== New member functions for the device class

This extension also adds the following member functions to the `device` class,
which allow the application to query which OpenCL features and extensions the
device supports.

|====
a|
[frame=all,grid=none]
!====
a!
[source]
----
class device {
  bool ext_oneapi_supports_cl_c_version(
    const ext::oneapi::experimental::cl_version &version) const;
};
----
!====

_Returns:_ The value `true` only if the device supports kernel bundles written
in the OpenCL C version identified by `version`.
Returns `false` if the device does not support kernel bundles written in
`source_language::opencl`.

a|
[frame=all,grid=none]
!====
a!
[source]
----
class device {
  bool ext_oneapi_supports_cl_c_feature(const std::string &name) const;
};
----
!====

_Returns:_ The value `true` only if the device supports kernel bundles using
the OpenCL C feature whose feature macro is `name`.
The set of possible feature macros are defined in section 6.2.1 "Features" of
the OpenCL C specification.
Returns `false` if the device does not support kernel bundles written in
`source_language::opencl`.

a|
[frame=all,grid=none]
!====
a!
[source]
----
class device {
  bool ext_oneapi_supports_cl_extension(const std::string &name,
                                        ext::oneapi::experimental::cl_version *version = nullptr) const;
};
----
!====

_Effects:_ If the device supports kernel bundles using the OpenCL extension
identified by `name` and if `version` is not a null pointer, the supported
version of the extension is written to `version`.

_Returns:_ The value `true` only if the device supports kernel bundles using
the OpenCL extension identified by `name`.
Returns `false` if the device does not support kernel bundles written in
`source_language::opencl`.

a|
[frame=all,grid=none]
!====
a!
[source]
----
class device {
  std::string ext_oneapi_cl_profile() const;
};
----
!====

_Returns:_ If the device supports kernel bundles written in
`source_language::opencl`, returns the name of the OpenCL profile that is
supported.
The profile name is the same string that is returned by the query
`CL_DEVICE_PROFILE`, as defined in section 4.2 "Querying Devices" of the OpenCL
specification.
If the device does not support kernel bundles written in
`source_language::opencl`, returns the empty string.

|====

=== Build options

The `build_options` property accepts any of the compiler or linker options
defined by the OpenCL specification, except for those that are specific to
creating an OpenCL library.
The kernel compiler can be used to create an OpenCL program, but not an OpenCL
library.

The `-cl-std=` option is required when compiling kernels that use OpenCL C 2.0
or OpenCL C 3.0 features.
Otherwise, the implementation defaults to the highest OpenCL C 1.x language
version that each device supports.
See section 5.8.6.5 "Options Controlling the OpenCL C version" of the OpenCL
specification for details.

=== Obtaining a kernel

OpenCL C kernel functions do not support {cpp} features like overloads or
templates.
As a result, the function name itself uniquely identifies the kernel function.
Therefore, the `ext_oneapi_has_kernel` and `ext_oneapi_get_kernel` member
functions identify a kernel using the function name, exactly as it appears in
the OpenCL C source code.
For example, if the kernel is defined this way in OpenCL C:

```
__kernel
void foo(__global int *in, __global int *out) {/*...*/}
```

Then the application's host code can query for the kernel like so:

```
sycl::kernel_bundle<sycl::bundle_state::executable> kb = /*...*/;
sycl::kernel k = kb.ext_oneapi_get_kernel("foo");
```

=== Kernel argument restrictions

When a kernel is defined in OpenCL C and invoked from SYCL via a `kernel`
object, the arguments to the kernel are restricted to certain types.
In general, the host application passes an argument value via
`handler::set_arg` using one type and the kernel receives the argument value
as a corresponding OpenCL C type.
The following table lists the set of valid types for these kernel arguments:


[%header,cols="1,1"]
|===
|Type in SYCL host code
|Type in OpenCL C kernel

|One of the OpenCL scalar types (e.g. `cl_int`, `cl_float`, etc.)
|The corresponding OpenCL C type (e.g. `int`, `float`, etc.)

|A USM pointer.
|A `+__global+` pointer of the corresponding type.

|A class (or struct) that is device copyable in SYCL whose elements are
 composed of OpenCL scalar types or USM pointers.
|A class (or struct) passed by value whose elements have the corresponding
 OpenCL C types.

|An `accessor` with `target::device` whose `DataT` is an OpenCL scalar type,
 a USM pointer, or a device copyable class (or struct) whose elements are
 composed of these types.
|A `+__global+` pointer to the first element of the accessor's buffer.
 The pointer has the corresponding OpenCL C type.

[_Note:_ The accessor's size is not passed as a kernel argument, so the host
code must pass a separate argument with the size if this is desired.
_{endnote}_]

|A `local_accessor` whose `DataT` is an OpenCL scalar type, a USM pointer, or a
 device copyable class (or struct) whose elements are composed of these types.
|A `+__local+` pointer to the first element of the accessor's local memory.
 The pointer has the corresponding OpenCL C type.
|===


== Examples

=== Simple example

The following example shows a simple SYCL program that defines an OpenCL C
kernel as a string and then compiles and launches it.

```
#include <sycl/sycl.hpp>
#include <OpenCL/opencl.h>
namespace syclex = sycl::ext::oneapi::experimental;

int main() {
  sycl::queue q;

  // Kernel defined as an OpenCL C string.  This could be dynamically
  // generated instead of a literal.
  std::string source = R"""(
    __kernel void my_kernel(__global int *in, __global int *out) {
      size_t i = get_global_id(0);
      out[i] = in[i]*2 + 100;
    }
  )""";

  sycl::kernel_bundle<sycl::bundle_state::ext_oneapi_source> kb_src =
    syclex::create_kernel_bundle_from_source(
      q.get_context(),
      syclex::source_language::opencl,
      source);

  // Compile and link the kernel from the source definition.
  sycl::kernel_bundle<sycl::bundle_state::executable> kb_exe =
    syclex::build(kb_src);

  // Get a "kernel" object representing the kernel defined in the
  // source string.
  sycl::kernel k = kb_exe.ext_oneapi_get_kernel("my_kernel");

  constexpr int N = 4;
  cl_int input[N] = {0, 1, 2, 3};
  cl_int output[N] = {};

  sycl::buffer inputbuf(input, sycl::range{N});
  sycl::buffer outputbuf(output, sycl::range{N});

  q.submit([&](sycl::handler &cgh) {
    sycl::accessor in{inputbuf, cgh, sycl::read_only};
    sycl::accessor out{outputbuf, cgh, sycl::read_write};

    // Each argument to the kernel is a SYCL accessor.
    cgh.set_args(in, out);

    // Invoke the kernel over a range.
    cgh.parallel_for(sycl::range{N}, k);
  });
}
```

=== Querying supported features and extensions

This example demonstrates how to query the version of OpenCL C that is
supported, how to query the supported features, and how to query the
supported extensions.

```
#include <iostream>
#include <sycl/sycl.hpp>
namespace syclex = sycl::ext::oneapi::experimental;

int main() {
  sycl::queue q;
  sycl::device d = q.get_device();

  if (d.ext_oneapi_can_compile(syclex::source_language::opencl))
    std::cout << "Device supports online compilation of OpenCL C kernels\n";

  if (d.ext_oneapi_supports_cl_c_version(syclex::opencl_c_3_0))
    std::cout << "Device supports online compilation with OpenCL C 3.0\n";

  if (d.ext_oneapi_supports_cl_c_feature("__opencl_c_fp64"))
    std::cout << "Device supports online compilation with 64-bit FP in OpenCL C\n";

  syclex::cl_version version;
  if (d.ext_oneapi_supports_cl_extension("cl_intel_bfloat16_conversions", &version)) {
    std::cout << "Device supports online compilation of OpenCL C with bfloat16 "
      "conversions (version: " << version.major << "." << version.minor << "." <<
      version.patch << ")\n";
  }

  if (d.ext_oneapi_cl_profile() == "FULL_PROFILE")
    std::cout << "Device supports online compilation with the OpenCL full profile\n";

}
```


== Issues

* Do we need to document some restrictions on the OpenCL C
  https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_C.html#work-item-functions[
  work-item functions] that the kernel can call, which depends on how the
  kernel was launched?
  For example, can a kernel launched with the simple `range` form of
  `parallel_for` call `get_local_size`?
  In OpenCL, there is only one way to launch kernels
  (`clEnqueueNDRangeKernel`), so it is always legal to call any of the
  work-item functions.
  If an OpenCL kernel is launched with a NULL `local_work_size` (which is
  roughly equivalent to SYCL's `range` form of `parallel_for`), the
  `get_local_size` function returns the local work-group size that is chosen by
  the implementation.
  Level Zero, similarly, has only one way to launch kernels.
  Therefore, maybe it is OK to let kernels in this extension call any of the
  work-item functions, regardless of how they are launched?
