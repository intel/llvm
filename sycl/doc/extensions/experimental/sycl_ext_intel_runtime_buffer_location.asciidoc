= sycl_ext_intel_runtime_buffer_location

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

== Notice

[%hardbreaks]
Copyright (C) 2022-2022 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues

== Dependencies

This extension is written against the SYCL 2020 revision 4 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

== Status
This is an experimental extension specification, intended to provide early
access to features and gather community feedback.  Interfaces defined in this
specification are implemented in {dpcpp}, but they are not finalized and may
change incompatibly in future versions of {dpcpp} without prior notice.
*Shipping software products should not rely on APIs defined in this
specification.*

[NOTE]
====
This extension is currently implemented in {dpcpp} only for FPGA devices.  Attempting to use this extension on other devices or backends may result in no effect.

This serves as a temporary workaround for usm allocation to accept buffer location properties, and the formal solution will come in the future.
====

== Overview

This document propose a new buffer_location runtime property that can be passed to `malloc_device`.

On targets that provide more than one type of global memory, this provide users the flexibility of choosing which memory the device usm should be allocated to.

This information is not a hint; it is a functional requirement of the program that must be respected.

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_INTEL_RUNTIME_BUFFER_LOCATION` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

== Examples

[source,c++]
----
array = (int *)malloc_device<int>(
        N * sizeof(int), q,
        property_list{sycl::ext::intel::experimental::property::usm::buffer_location(2)});

sycl::queue q;
q.parallel_for(range<1>(N), [=] (id<1> i){
  data[i] *= 2;
}).wait();
----


=== Changes to runtime properties

To pass the runtime properties into malloc API, a new buffer properties is introduced.

[source,c++]
----
namespace sycl::ext::intel::experimental::property::usm {

class buffer_location {
 public:
  buffer_location(int location);
  int get_buffer_location() const;
};

} // namespace sycl::ext::intel::experimental::property::usm
----

== Issues

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-02-24|Sherry Yuan|*Initial public draft*
|========================================
