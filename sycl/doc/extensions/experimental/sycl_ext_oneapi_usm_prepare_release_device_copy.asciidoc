= sycl_ext_oneapi_usm_prepare_release_device_copy

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2022-2023 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 5 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback. Interfaces defined in this
specification are implemented in DPC\++ but they are not finalized and may
change incompatibly in future versions of DPC++ without prior notice.
Shipping software products should not rely on APIs defined in this
specification.


== Overview

Data transfer between Host and Device is a common operation when using SYCL. Data transfers may be explicit, using the SYCL memcpy functions, or implicit via use of SYCL buffers and accessors.
When these transfers are between USM memory and USM memory the transfer rate is maximized. When either source or destination is non-USM, data transfer is slower.

The Level Zero APIs ```zexDriverImportExternalPointer``` and ```zexDriverReleaseImportedPointer``` are available to temporarily promote system memory to USM. The import/release can be done for the duration that the host pointer is a source/destination of host/device data transfers without needing to change the original allocation.

This extension supports the Level Zero USM import/release functionality through SYCL interfaces.

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine
the macro `SYCL_EXT_ONEAPI_USM_IMPORT_RELEASE` to one of the values defined
in the table below.  Applications can test for the existence of this macro
to determine if the implementation supports this feature, or applications
can test the macro's value to determine which of the extension's features
the implementation supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|Initial version of this extension.
|===

=== API of the extension

SYCL USM import/release APIs give the programmer explicit control over the range and duration of imports. The APIs are analogous to the ```malloc_host``` APIs:

```c++
namespace sycl::ext::oneapi::experimental {

  void prepare_for_device_copy(void *Ptr, size_t NumBytes,
                               const context &Context);
  void prepare_for_device_copy(void *Ptr, size_t NumBytes,
                               const queue &Queue);

  void release_from_device_copy(void *Ptr, const context &Context);
  void release_from_device_copy(void *Ptr, const queue &Queue);

} // namespace sycl::ext::oneapi::experimental
```

