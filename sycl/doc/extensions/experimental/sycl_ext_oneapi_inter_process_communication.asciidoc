= sycl_ext_oneapi_inter_process_communication

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]
:endnote: &#8212;{nbsp}end{nbsp}note

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2025 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 10 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.


== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback.  Interfaces defined in this
specification are implemented in {dpcpp}, but they are not finalized and may
change incompatibly in future versions of {dpcpp} without prior notice.
*Shipping software products should not rely on APIs defined in this
specification.*


== Backend support status

The APIs in this extension may be used only on a device that has
`aspect::ext_oneapi_ipc_memory`.  The application must check that the device has
this aspect before submitting a kernel using any of the APIs in this
extension.  If the application fails to do this, the implementation throws
a synchronous exception with the `errc::kernel_not_supported` error code
when the kernel is submitted to the queue.


== Overview

This extension adds the ability for SYCL programs to share device USM memory
allocations between processes. This is done by the allocating process creating
a new IPC memory handle through the new free frunctions and transferring the
returned handle data to the other processes. The other processes can use the
handle data to retrieve the corresponding device USM memory.


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_IPC` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|The APIs of this experimental extension are not versioned, so the
 feature-test macro always has this value.
|===

=== Inter-process communicable memory


This extension adds new free functions under the `ipc_memory` experimental
namespace.

```
namespace sycl::ext::oneapi::experimental::ipc_memory {

using handle_data_t = std::vector<char>;

handle_data_t get(void *ptr, const sycl::context &ctx);

void put(handle_data_t &handle_data, const sycl::context &ctx);

static void *open(handle_data_t handle_data, const sycl::context &ctx,
                  const sycl::device &dev);

static void close(void *ptr, const sycl::context &ctx);

}
```

|====
a|
[frame=all,grid=none]
!====
a!
[source]
----
get(void *ptr, const sycl::context &ctx)
----
!====

_Returns:_ A `handle_data_t` object containing the data of the IPC memory handle
in `ctx` from a pointer `ptr` to device USM memory.
Calling this function with a `ptr` that does not point to device USM memory, the
behaviors is undefined.

!====
a!
[source]
----
void put(handle_data_t &handle_data, const sycl::context &ctx)
----
!====

_Effects:_ Instructs the underlying IPC memory resources to be returned to
the backend. Freeing the device USM memory used when the handle data was created
through a call to `get()` will have the same effect as calling this function,
so a direct call to this function is not strictly required.
Calling this function after `sycl::free()` has been called on the device USM
memory used when the handle data was created through a call to `get()` will
result in undefined behavior.

!====
a!
[source]
----
static void *open(handle_data_t &handle_data, const sycl::context &ctx,
                  const sycl::device &dev)
----
!====

_Effects:_ Returns a pointer to the same device USM memory as the device USM
memory associated with `handle_data`.
The handle data is allowed to be from another process on the host system.
If the handle data has been destroyed, calling this function results in
undefined behavior.

!====
a!
[source]
----
static void close(void *ptr, const sycl::context &ctx)
----
!====

_Effects:_ Closes a device USM pointer previously returned by a call to
`open()`.

|====


== Issues

=== Level Zero file descriptor duplication dependency

The IPC memory APIs in Level Zero on Linux currently requires the ability to
duplicate file descriptors between processes. For security this is not allowed
by default on Linux-based systems, so in order for the IPC memory APIs to work
with Level Zero on Linux the user must either call `prctl(PR_SET_PTRACER, ...)`
in the IPC handle owner process or enable the functionality globally using

```bash
sudo bash -c "echo 0 > /proc/sys/kernel/yama/ptrace_scope"
```

See also https://github.com/oneapi-src/unified-memory-framework/tree/main?tab=readme-ov-file#level-zero-memory-provider.


=== Level Zero IPC memory Windows support

The new IPC memory APIs are not currently supported on the Level Zero backend on
Windows systems.

