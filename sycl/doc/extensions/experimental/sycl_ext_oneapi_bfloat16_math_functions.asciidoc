= sycl_ext_oneapi_bfloat16_math_functions

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++

== Notice

Copyright © 2022-2023 Intel Corporation. All rights reserved.

Khronos® is a registered trademark and SYCL™ and SPIR™ are trademarks of
The Khronos Group Inc. OpenCL™ is a trademark of Apple Inc. used by permission
by Khronos.

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues

== Dependencies

This extension is written against the SYCL 2020 revision 5 specification.
All references below to the "core SYCL specification" or to section
numbers in the SYCL specification refer to that revision.

This extension depends on the following other SYCL extension:

* sycl_ext_oneapi_bfloat16

== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback. Interfaces defined in this
specification are implemented in DPC\++ but they are not finalized and may
change incompatibly in future versions of DPC++ without prior notice.
Shipping software products should not rely on APIs defined in this
specification.

== Overview

This extension adds `bfloat16` support to the `fma`, `fmin`, `fmax`, `fabs`,
`isnan`, `ceil`, `floor`, `cos`, `sin`, `exp`, `exp2`, `exp10`, `log`, `log2`,
`log10`, `rint`, `sqrt`, `rsqrt` and `trunc` SYCL floating point math functions.
These functions can be used as element wise operations on matrices, supplementing
the `bfloat16` support in the sycl_ext_oneapi_matrix extension.

The descriptions of the `fma`, `fmin`, `fmax`, `fabs`, `isnan`, `ceil`, `floor`,
`cos`, `sin`, `exp`, `exp2`, `exp10`, `log`, `log2`, `log10`, `rint`, `sqrt`,
`rsqrt` and `trunc` SYCL floating point math functions can be found in the SYCL
specification:
https://www.khronos.org/registry/SYCL/specs/sycl-2020/html/sycl-2020.html#_math_functions.

== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros". Therefore, an implementation
supporting this extension must predefine the macro 
`SYCL_EXT_ONEAPI_BFLOAT16_MATH_FUNCTIONS` to one of the values defined in the
table below. Applications can test for the existence of this macro to determine
if the implementation supports this feature, or applications can test the
macro's value to determine which of the extension's APIs the implementation
supports.
 
[%header,cols="1,5"]
|===
|Value |Description
|1     |The APIs of this experimental extension are not versioned, so the feature-test macro always has this value.
|===   

=== Extension to `enum class aspect`

[source]
----
namespace sycl {
enum class aspect {
  ...
  sycl_ext_oneapi_bfloat16_math_functions
}
}
----

If a SYCL device has the `sycl_ext_oneapi_bfloat16_math_functions` aspect,
then it supports the `bfloat16` math functions described in the next section.

=== Math Functions

The following functions are only available when `T` is `bfloat16` or
`sycl::marray<bfloat16, {N}>`, where `{N}` means any positive value of
`size_t` type.

==== isnan

```c++
namespace sycl::ext::oneapi::experimental {

bool isnan(bfloat16 x);

template <size_t N>
sycl::marray<bool, N> isnan(sycl::marray<bfloat16, N> x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns true if x is NAN value, otherwise returns false.

==== fma

```c++
namespace sycl::ext::oneapi::experimental {

template <typename T>
T fma(T a, T b, T c);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns the correctly rounded floating-point representation of the
sum of `c` with the infinitely precise product of `a` and `b`.
Rounding of intermediate products shall not occur. The mantissa
LSB rounds to the nearest even. Subnormal numbers are supported.

==== fmax

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T fmax(T x, T y);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `y` if
`x < y`, otherwise it
returns `x`. If one argument is a
NaN, `fmax()` returns the other
argument. If both arguments are
NaNs, `fmax()` returns a NaN.

==== fmin

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T fmin(T x, T y);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `y` if
`y < x`, otherwise it
returns `x`. If one argument is a
NaN, `fmax()` returns the other
argument. If both arguments are
NaNs, `fmax()` returns a NaN.

==== fabs

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T fabs(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute absolute value of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== ceil

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T ceil(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `x` rounded to an integral value using the round to positive infinity rounding mode

==== floor

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T floor(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `x` rounded to an integral value using the round to negative infinity rounding mode
for a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== cos

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T cos(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute cosine of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== sin

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T sin(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute sine of a `bfloat16` value or `sycl::marray<bfloat16, N>`.


==== exp

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T exp(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute the base-e exponential of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== exp2

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T exp2(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute the base-2 exponential of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== exp10

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T exp10(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute the base-10 exponential of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== log

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T log(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute natural logarithm of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== log2

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T log2(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute base-2 logarithm of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== log10

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T log10(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute base-10 logarithm of a `bfloat16` value or `sycl::marray<bfloat16, N>`.


==== rint

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T rint(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `x` rounded to an integral value using the round to nearest even rounding mode
for a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== sqrt

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T sqrt(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute square root of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== rsqrt

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T rsqrt(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Compute inverse square root of a `bfloat16` value or `sycl::marray<bfloat16, N>`.

==== trunc

```c++
namespace sycl::ext::oneapi::experimental {
template <typename T>
T trunc(T x);
} // namespace sycl::ext::oneapi::experimental
```

===== Description

Returns `x` rounded to an integral value using the round to zero rounding mode
for a `bfloat16` value or `sycl::marray<bfloat16, N>`.

== Issues

1. The CUDA backend does not have a use case that would necessitate support
of the `vec` class in bfloat16 math functions, and `marray` would always be
preferred over `vec` if `vec` support were to be added in the CUDA backend.
For portability reasons, support for the `vec` class can be easily added if
other backends require it.

2. We should decide on a roadmap to extend support of `bfloat16` to other
SYCL 2020 math functions.
