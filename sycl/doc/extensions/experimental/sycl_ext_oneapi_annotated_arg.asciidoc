= sycl_ext_oneapi_annotated_arg
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++
:dpcpp: DPC++

== Notice

[%hardbreaks]
Copyright (c) 2022-2023 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.

== Contact

To report problems with this extension, please open a new issue at:
https://github.com/intel/llvm/issues

== Contributors

Joe Garvey, Intel +
Abhishek Tiwari, Intel

== Dependencies

This extension is written against the SYCL 2020 specification, Revision 5 and
the following extensions:

- link:../experimental/sycl_ext_oneapi_properties.asciidoc[sycl_ext_oneapi_properties]

== Status

This is an experimental extension specification, intended to provide early
access to features and gather community feedback.  Interfaces defined in this
specification are implemented in {dpcpp}, but they are not finalized and may
change incompatibly in future versions of {dpcpp} without prior notice.
*Shipping software products should not rely on APIs defined in this
specification.*

== Overview
This extension introduces a wrapper class
`sycl::ext::oneapi::experimental::annotated_arg`
that provides a mechanism to attach compile-time constant information to
kernel arguments in a reliable manner.

[NOTE]
====
In this document, we use the shortened form `annotated_arg` to refer to the
proposed `sycl::ext::oneapi::experimental::annotated_arg` class.
====

The purpose of this document is to clearly describe and specify
`annotated_arg` and related concepts, types, and mechanisms, and to give
examples and context for their usage.

== Specification

=== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros".  Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_ANNOTATED_ARG` to one of the values defined
in the table below.  Applications can test for the existence of this macro to
determine if the implementation supports this feature, or applications can test
the macro's value to determine which of the extension's APIs the implementation
supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|===

=== Introduction

The `annotated_arg` class enables users to attach compile-time constant
information to kernel arguments with properties.

The example below shows a use case with some properties.

.Toy Example
[source,c++]
----
using sycl::ext::oneapi::experimental;
struct MyKernel {
  annotated_arg<int, properties<PropA>> a;
  annotated_arg<int, properties<PropB>> b;
  annotated_arg<int*, properties<PropC>> c;
  MyKernel(int a_, int b_, int* c_) : a(a_), b(b_), c(c_) { }
  void operator()() const {
    *c = a + b;
  }
};

int main () {
  sycl::queue q;
  auto result_ptr = ...
  q.single_task(MyKernel{2, 5, result_ptr}).wait();
  ...
  sycl::free(result_ptr, q);
}
----

`PropA`, `PropB` and `PropC` are expected to be preserved on the kernel
arguments in a reliable manner.

NOTE: `PropC` will only influence the kernel argument and not any pointer
dereference sites. Use the `sycl::ext::oneapi::experimental::annotated_ptr`
class template to apply properties that must be preserved at pointer dereference
sites.

The example below shows a type of use-case which is not meant to be supported
by `annotated_arg`:

.Unsupported Usage Example
[source,c++]
----
using sycl::ext::oneapi::experimental;
struct MyType {
  annotated_arg<int, properties<PropC>> a;
  annotated_arg<int, properties<PropD>> b;
};

struct MyKernel {
  MyType arg_a;
  MyType arg_b;
  ...
  void operator()() const {
    ...
  }
};
----
It is illegal to apply `annotated_arg` to members of kernel arguments. In the
above example, encapsulating `annotated_arg` within `MyType` is illegal.

=== Representation of `annotated_arg`

[source,c++]
----
namespace sycl::ext::oneapi::experimental {
template < typename T, typename PropertyListT = empty_properties_t>
class annotated_arg {
  ...
----

`annotated_arg` is a class template, parameterized by the type of the underlying
allocation `T` and a list of associated properties specified by `PropertyListT`.

`T` can be any type except the following types or a structure containing one of
the following types:

* sycl::accessor
* sycl::stream
* sycl::local_accessor
* sycl::unsampled_image_accessor
* sycl::sampled_image_accessor
* sycl::half

The properties supported with `annotated_arg` may be defined in
separate extensions. Please note that there cannot be duplicated property in a 
properties list. Otherwise, a compiler time error is triggered.

If the type `T` is trivially copyable, then `annotated_arg<T, ...>` is also
trivially copyable.

If the type `T` is device copyable, then `annotated_arg<T, ...>` is also device
copyable and the implementation sets the `is_device_copyable_v` trait to `true`
for this type.

The section below describes the constructors and member functions for
`annotated_arg`.

The template parameter `T` in the definition of `annotated_arg` template below
must be a legal parameter type as defined by the SYCL specification. Given `annotated_arg<T, ...>`,
`T` must be a device copy-able type.

[source,c++]
----
namespace sycl::ext::oneapi::experimental {
template <typename T, typename PropertyListT = empty_properties_t>
class annotated_arg {
  public:
    annotated_arg() noexcept;
    annotated_arg(const T& v_, const PropertyListT &P = properties{}) noexcept;
    template<typename... PropertyValueTs>
    annotated_arg(const T& v_, PropertyValueTs... props) noexcept;

    template <typename T2, typename P> explicit annotated_arg(
      const annotated_arg<T2, P>&) noexcept;
    template <typename T2, typename PropertyListU, typename PropertyListV>
    explicit annotated_arg(const annotated_arg<T2, PropertyListU>&,
      properties<PropertyListV>) noexcept;

    annotated_arg(const annotated_arg&) = default;
    annotated_arg& operator=(annotated_arg&) = default;

    // Conversion operator to convert to the underlying type
    operator T() noexcept;
    operator T() const noexcept;

    // Available if type T is pointer type
    T operator->() const noexcept;

    // Available if the operator[] is valid for objects of type T, return
    // type will match the return type of T::operator[](std::ptrdiff_t)
    /* ... */ operator[](std::ptrdiff_t idx) const noexcept;

    template<typename propertyT>
    static constexpr bool has_property();

    // The return type is an unspecified internal class used to represent 
    // instances of propertyT
    template<typename propertyT>
    static constexpr /*unspecified*/ get_property();
};

//Deduction guides
template <typename T, typename... PropertyValueTs>
annotated_arg(T, PropertyValueTs... values) ->
    annotated_arg<T, decltype(properties{PropertyValueTs...})>;

template <typename T, typename PropertiesA, typename PropertiesB>
annotated_arg(annotated_arg<T, PropertiesA>, PropertiesB>) ->
    annotated_arg<T, /* a type that combines the properties of PropertiesA and PropertiesB */>;
} // namespace sycl::ext::oneapi::experimental
----

[frame="topbot",options="header"]
|===
|Functions |Description

// --- ROW BREAK ---
a|
[source,c++]
----
annotated_arg() noexcept;
----
| Not available in device code.
Constructs an `annotated_arg` object which is default initialized.

// --- ROW BREAK ---
a|
[source,c++]
----
annotated_arg(const T& v_, const PropertyListT &P = properties{}) noexcept;
----
| Not available in device code.
Constructs an `annotated_arg` object from the input object `v_`.

The new property set `PropertyListT` contains all properties in `P`.

// --- ROW BREAK ---
a|
[source,c++]
----
template<typename... PropertyValueTs>
annotated_arg(const T& v_, const PropertyValueTs... props) noexcept;
----
| Not available in device code.
Constructs an `annotated_arg` object from the input object `v_`. 

The new property set `PropertyListT` contains all properties listed in `props`.

// --- ROW BREAK ---
a|
[source,c++]
----
template <typename T2, typename P> explicit annotated_arg(
  const annotated_arg<T2, P> &ConvertFrom);
----
| Not available in device code.
Constructs the `annotated_arg` object from the `ConvertFrom` object if
the list of properties in `PropertyListT` is a superset of the list of
properties in `P`.

`T2` must be implicitly convertible to `T`.

// --- ROW BREAK ---
a|
[source,c++]
----
template <typename T2, typename PropertyListU, typename PropertyListV>
explicit annotated_arg(const annotated_arg<T2, PropertyListU>& v_,
  properties<PropertyListV> P) noexcept;
----
| Not available in device code.
Constructs the `annotated_arg` object from the input object `v_`.

The new `PropertyListT` is the union of all properties contained within
`PropertyListU` and `PropertyListV`. If there are any common properties in the
two lists with different values, a compile-time error is triggered. Common
properties with the same value (or no value) are allowed.

`T2` must be implicitly convertible to `T`.

// --- ROW BREAK ---
a|
[source,c++]
----
annotated_arg(const annotated_arg&) = default;
----
| Not available in device code.
Compiler generated copy constructor.

// --- ROW BREAK ---
a|
[source,c++]
----
annotated_arg& operator=(annotated_arg&) = default;
----
| Compiler generated assignment operator.

// --- ROW BREAK ---
a|
[source,c++]
----
operator T() noexcept;
operator const T() const noexcept;
----
| Implicit conversion to a reference to the underlying type `T`.

// --- ROW BREAK ---
a|
[source,c++]
----
T operator->() const noexcept;
----
| Member access of type `T` if `T` is a pointer type.

// --- ROW BREAK ---
a|
[source,c++]
----
/* ... */ operator[](std::ptrdiff_t idx) const noexcept;
----
|
Available if the `operator[]` is valid for objects of type `T`. This function
will call the subscript operator defined for `T`.

// --- ROW BREAK ---
a|
[source,c++]
----
template<typename propertyT>
static constexpr bool has_property();
----
|
Returns true if `PropertyListT` contains the property with property key class
`propertyT`. Returns false if it does not.

Available only when `propertyT` is a property key class.

// --- ROW BREAK ---
a|
[source,c++]
----
template<typename propertyT>
static constexpr /* unspecified */ get_property();
----
|
Returns a copy of the property value contained in `PropertyListT`. Must produce
a compile error if `PropertyListT` does not contain a property with the
`propertyT` key.

Available only if `propertyT` is the property key class of a compile-time
constant property.

|===

== Issues

None.

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2022-03-09|Abhishek Tiwari|*Initial working draft*
|========================================
