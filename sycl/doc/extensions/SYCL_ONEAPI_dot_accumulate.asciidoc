= SYCL_INTEL_dot_accumulate
:source-highlighter: coderay
:coderay-linenums-mode: table
:doctype: book
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C,
// for syntax highlighting purposes.
:language: c

// This is what is needed for C++, since docbook uses c++
// and everything else uses cpp.  This doesn't work when
// source blocks are in table cells, though, so don't use
// C++ unless it is required.
//:language: {basebackend@docbook:c++:cpp}

== Introduction

IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by permission by Khronos.

NOTE: This document is better viewed when rendered as html with asciidoctor.  GitHub does not render image icons.

== Name Strings

`SYCL_ONEAPI_dot_accumulate`

This is a placeholder name.

== Notice

Copyright (c) 2020 Intel Corporation.  All rights reserved.

== Status

Working Draft

This is a preview extension specification, intended to provide early access to a feature for review and community feedback. When the feature matures, this specification may be released as a formal extension.

Because the interfaces defined by this specification are not final and are subject to change they are not intended to be used by shipping software products.

== Version

Built On: {docdate} +
Revision: B

== Contact

Ben Ashbaugh, Intel (ben 'dot' ashbaugh 'at' intel 'dot' com)

== Dependencies

This extension is written against the SYCL 1.2.1 specification, Revision v1.2.1-6.

== Overview

This extension adds new SYCL built-in functions that may simplify development and provide access specialized hardware instructions when a SYCL kernel needs to perform a dot product of two vectors followed by a scalar accumulation.

== Enabling the extension

The extension is always enabled. The dot product functionality may be emulated in software or executed using hardware when suitable instructions are available.

== Modifications of SYCL 1.2.1 specification

=== Add to Section 4.13.6 - Geometric Functions

Additionally, the following additional functions are available in the namespace `cl::sycl::intel` on the host and device.

[cols="4a,4",options="header"]
|====
| *Function*
| *Description*

|[source,c]
----
int32_t dot_acc(vec<int8_t,4>  a,
                vec<int8_t,4>  b,
                int32_t c)
int32_t dot_acc(vec<int8_t,4>  a,
                vec<uint8_t,4> b,
                int32_t c)
int32_t dot_acc(vec<uint8_t,4> a,
                vec<int8_t,4>  b,
                int32_t c)
int32_t dot_acc(vec<uint8_t,4> a,
                vec<uint8_t,4> b,
                int32_t c)
----

|Performs a four-component integer dot product accumulate operation. +
{blank}
The value that is returned is equivalent to +
{blank}
*dot*(_a_, _b_) + _c_

|====

== Sample Header

[source,c++]
----
namespace cl {
namespace sycl {
namespace ONEAPI {

int32_t dot_acc(vec<int8_t,4>  a, vec<int8_t,4>  b, int32_t c);
int32_t dot_acc(vec<int8_t,4>  a, vec<uint8_t,4> b, int32_t c);
int32_t dot_acc(vec<uint8_t,4> a, vec<int8_t,4>  b, int32_t c);
int32_t dot_acc(vec<uint8_t,4> a, vec<uint8_t,4> b, int32_t c);

int32_t dot_acc(int32_t a, int32_t b, int32_t c);
int32_t dot_acc(int32_t a, uint32_t b, int32_t c);
int32_t dot_acc(uint32_t a, int32_t b, int32_t c);
int32_t dot_acc(uint32_t a, uint32_t b, int32_t c);

} // ONEAPI
} // sycl
} // cl
----

== Issues

None.

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|A|2019-12-13|Ben Ashbaugh|*Initial draft*
|B|2019-12-18|Ben Ashbaugh|Switched to standard C++ fixed width types.
|C|2020-10-26|Rajiv Deodhar|Added int32 types.
|========================================

//************************************************************************
//Other formatting suggestions:
//
//* Use *bold* text for host APIs, or [source] syntax highlighting.
//* Use `mono` text for device APIs, or [source] syntax highlighting.
//* Use `mono` text for extension names, types, or enum values.
//* Use _italics_ for parameters.
//************************************************************************
