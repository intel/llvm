= SPV_INTEL_global_variable_decorations

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++

IMPORTANT: This extension is being deprecated in favour of link:https://github.com/KhronosGroup/SPIRV-Registry/blob/main/extensions/INTEL/SPV_INTEL_global_variable_fpga_decorations.asciidoc[SPV_INTEL_global_variable_fpga_decorations] and link:https://github.com/KhronosGroup/SPIRV-Registry/blob/main/extensions/INTEL/SPV_INTEL_global_variable_host_access.asciidoc[SPV_INTEL_global_variable_host_access] which are available in the Khronos SPIR-V registry. 

== Name Strings

SPV_INTEL_global_variable_decorations

== Contact

To report problems with this extension, please open a new issue at:

https://github.com/KhronosGroup/SPIRV-Headers

== Contributors

Artem Radzikhovskyy, Intel +
Michael Kinsner, Intel +
Joe Garvey, Intel +
Mohammad Fawaz, Intel +
Gregory Lueck, Intel

== Notice

Copyright (c) 2021 Intel Corporation.  All rights reserved.

== Status

Final Draft

== Version

Built On: {docdate} +
Revision: 2

== Dependencies

This extension is written against the SPIR-V Specification,
Version 1.5 Revision 5.

This extension requires SPIR-V 1.0.

== Overview

This extension adds decorations that can be applied to global (module scope)
variables.  These decorations are mostly intended to help code generation for
FPGA devices, but they must be recognized by any consumer that supports this
extension.

== Extension Name
To use this extension within a SPIR-V module, the following *OpExtension* must
be present in the module:

----
OpExtension "SPV_INTEL_global_variable_decorations"
----

== New Capabilities
This extension introduces a new capability:

----
GlobalVariableDecorationsINTEL
----

== Token Number Assignments

--
[width="40%"]
[cols="70%,30%"]
[grid="rows"]
|====
|GlobalVariableDecorationsINTEL | 6146
|HostAccessINTEL | 6147
|InitModeINTEL | 6148
|ImplementInCSRINTEL | 6149
|====
--

== Modifications to the SPIR-V Specification, Version 1.5

=== Decoration

Modify Section 3.20, Decoration, adding these rows to the Decoration table:

--
[options="header"]
|====
2+^| Decoration 2+^| Extra Operands | Enabling Capabilities

// --- ROW BREAK ---
| 6147
a|
*HostAccessINTEL* +
Only valid on global (module scope) *OpVariable*.

The client API's execution environment may provide a way to access a global
variable's value from the host system.  If it does, this decoration provides
two pieces of information.  _Access_ is an assertion by the producer about the
types of these accesses, which may allow the consumer to perform certain
optimizations, especially for FPGA devices.  _Name_ is a name which the client
API's execution environment may use to identify this variable.

Legal values of _Access_:

* 0 [Read] - The execution environment may read the variable from the host but
  will never write it.  On an FPGA device, only a read memory port is exposed.
* 1 [Write] - The execution environment may write the variable from the host
  but will never read it.  On an FPGA device, only a write memory port is
  exposed.
* 2 [Read/Write] - The execution environment may read or write the variable
  from the host.  On an FPGA device, a read/write memory port is exposed.
* 3 [None] - The execution environment may neither read nor write the variable
  from the host.  On an FPGA device, no memory port is exposed.

If a global *OpVariable* is not decorated with *HostAccessINTEL*, the default
behavior is [Read/Write].
| Literal Number +
_Access_
| Literal String +
_Name_
| *GlobalVariableDecorationsINTEL*

// --- ROW BREAK ---
| 6148
a|
*InitModeINTEL* +
Only valid on global (module scope) *OpVariable* which has an _Initializer_
operand.

This decoration only has an effect when the consumer is an FPGA or similar
device.  The _Trigger_ value tells how the global variable should be
initialized.

Legal values of _Trigger_:

* 0 [init on device reprogram] - Initialization is performed by reprogramming
  the device.  This may require more frequent reprogramming but may reduce
  area.
* 1 [init on device reset] - Initialization is performed by sending a reset
  signal to the device.  This may increase area but may reduce reprogramming
  frequency.

If a global *OpVariable* with an _Initializer_ operand is not decorated with
*InitModeINTEL*, the method by which the variable's value is initialized is
implementation defined.

2+| Literal Number +
_Trigger_
| *GlobalVariableDecorationsINTEL*

// --- ROW BREAK ---
| 6149
a|
*ImplementInCSRINTEL* +
Only valid on global (module scope) *OpVariable*.

This decoration only has an effect when the consumer is an FPGA or similar
device.  The _Value_ value controls the interface of this global variable with
hardware outside the boundary of the SPIR-V module.

Legal values of _Value_:

* 0 [False] - Access to this memory is through a dedicated interface.
* 1 [True] - Access to this memory is through a CSR interface shared with the
  kernel arguments.

If a global *OpVariable* is not decorated with *ImplementInCSRINTEL*, the
interface for the variable is implementation defined.

2+| Literal Number +
_Value_
| *GlobalVariableDecorationsINTEL*

|====
--

=== Capability

Modify Section 3.31, Capability, adding a row to the Capability table:
--
[options="header"]
|====
2+^| Capability ^| Implicitly Declares
| 6146
| GlobalVariableDecorationsINTEL
|
|====
--

=== Validation Rules

* It is invalid for two *HostAccessINTEL* decorations in the same module to
  have the same _Name_ operand.

== Issues

This extension is being deprecated in favour of link:https://github.com/KhronosGroup/SPIRV-Registry/blob/main/extensions/INTEL/SPV_INTEL_global_variable_fpga_decorations.asciidoc[SPV_INTEL_global_variable_fpga_decorations] and link:https://github.com/KhronosGroup/SPIRV-Registry/blob/main/extensions/INTEL/SPV_INTEL_global_variable_host_access.asciidoc[SPV_INTEL_global_variable_host_access] which are available in the Khronos SPIR-V registry. 

//. Issue.
//+
//--
//*RESOLVED*: Resolution.
//--

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2021-8-9|Artem Radzikhovskyy|*Initial draft*
|2|2021-10-1|Gregory Lueck|*Clarify wording and change names*
|========================================
