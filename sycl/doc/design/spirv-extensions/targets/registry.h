// This header is automatically generated by generate.py.

#define FNVAR_VERSION (0)

// Targets

typedef enum FnVarTarget_ {
    FnVarTarget_Unknown = 0, // Unknown target
    FnVarTarget_Arm = 1, // ARM (32-bit)
    FnVarTarget_Arm32 = 1, // ARM (32-bit)
    FnVarTarget_Arm64 = 2, // ARM (64-bit)
    FnVarTarget_Aarch64 = 2, // ARM (64-bit)
    FnVarTarget_X86 = 3, // x86 (32-bit)
    FnVarTarget_X8664 = 4, // x86 (64-bit)
    FnVarTarget_Riscv32 = 5, // RISC-V (32-bit)
    FnVarTarget_Riscv64 = 6, // RISC-V (64-bit)
    FnVarTarget_Nvptx = 7, // NVIDIA PTX (32-bit)
    FnVarTarget_Nvptx64 = 8, // NVIDIA PTX (64-bit)
    FnVarTarget_Amdgcn = 9, // AMD GCN
    FnVarTarget_Max = 0x7fffffff,
} FnVarTarget;

// Features

typedef enum FnVarFeature_Unknown_ {
    FnVarFeature_Unknown_None = 0, // No features
    FnVarFeature_Unknown_Max = 0x7fffffff,
} FnVarFeature_Unknown;

typedef enum FnVarFeature_Arm32_ {
    FnVarFeature_Arm32_None = 0, // No features
    FnVarFeature_Arm32_Neon = 1, // Enable NEON instructions
    FnVarFeature_Arm32_Max = 0x7fffffff,
} FnVarFeature_Arm32;

typedef enum FnVarFeature_Arm64_ {
    FnVarFeature_Arm64_None = 0, // No features
    FnVarFeature_Arm64_Fp8 = 1, // Enable FP8 instructions
    FnVarFeature_Arm64_Fp8dot2 = 2, // Enable FP8 2-way dot product instructions
    FnVarFeature_Arm64_Fp8dot4 = 3, // Enable FP8 4-way dot product instructions
    FnVarFeature_Arm64_Neon = 4, // Enable NEON instructions
    FnVarFeature_Arm64_Sve = 5, // Enable SVE instructions
    FnVarFeature_Arm64_Max = 0x7fffffff,
} FnVarFeature_Arm64;

typedef enum FnVarFeature_X86_ {
    FnVarFeature_X86_None = 0, // No features
    FnVarFeature_X86_Fma = 1, // Enable fused three-operand multiply-add
    FnVarFeature_X86_Fma4 = 2, // Enable fused four-operand multiply-add
    FnVarFeature_X86_Mmx = 3, // Enable MMX instructions
    FnVarFeature_X86_Sse = 4, // Enable SSE instructions
    FnVarFeature_X86_Sse2 = 5, // Enable SSE2 instructions
    FnVarFeature_X86_Sse3 = 6, // Enable SSE3 instructions
    FnVarFeature_X86_Sse41 = 7, // Enable SSE4_1 instructions
    FnVarFeature_X86_Sse42 = 8, // Enable SSE4_2 instructions
    FnVarFeature_X86_Sse4a = 9, // Enable SSE4a instructions
    FnVarFeature_X86_Avx = 10, // Enable AVX instructions
    FnVarFeature_X86_Avx2 = 11, // Enable AVX2 instructions
    FnVarFeature_X86_Avx512f = 12, // Enable AVX512 instructions
    FnVarFeature_X86_Max = 0x7fffffff,
} FnVarFeature_X86;

typedef enum FnVarFeature_X8664_ {
    FnVarFeature_X8664_None = 0, // No features
    FnVarFeature_X8664_Fma = 1, // Enable fused three-operand multiply-add
    FnVarFeature_X8664_Fma4 = 2, // Enable fused four-operand multiply-add
    FnVarFeature_X8664_Mmx = 3, // Enable MMX instructions
    FnVarFeature_X8664_Sse = 4, // Enable SSE instructions
    FnVarFeature_X8664_Sse2 = 5, // Enable SSE2 instructions
    FnVarFeature_X8664_Sse3 = 6, // Enable SSE3 instructions
    FnVarFeature_X8664_Sse41 = 7, // Enable SSE4_1 instructions
    FnVarFeature_X8664_Sse42 = 8, // Enable SSE4_2 instructions
    FnVarFeature_X8664_Sse4a = 9, // Enable SSE4a instructions
    FnVarFeature_X8664_Avx = 10, // Enable AVX instructions
    FnVarFeature_X8664_Avx2 = 11, // Enable AVX2 instructions
    FnVarFeature_X8664_Avx512f = 12, // Enable AVX512 instructions
    FnVarFeature_X8664_Max = 0x7fffffff,
} FnVarFeature_X8664;

// Architecture Categories

typedef enum FnVarArchCategory_ {
    FnVarArchCategory_Unknown = 0, // Unknown category
    FnVarArchCategory_Cpu = 1, // Central processing unit
    FnVarArchCategory_Gpu = 2, // Graphics processing unit
    FnVarArchCategory_Npu = 3, // Neural processing unit (AI accelerator)
    FnVarArchCategory_Max = 0x7fffffff,
} FnVarArchCategory;

// Architecture Families

typedef enum FnVarArchFamily_Unknown_ {
    FnVarArchFamily_Unknown_Generic = 0, // Generic family
    FnVarArchFamily_Unknown_Max = 0x7fffffff,
} FnVarArchFamily_Unknown;

typedef enum FnVarArchFamily_Cpu_ {
    FnVarArchFamily_Cpu_Generic = 0, // Generic CPU
    FnVarArchFamily_Cpu_Intel = 1, // Intel main line of CPUs
    FnVarArchFamily_Cpu_IntelAtom = 2, // Intel Atom/Low-power line of CPUs
    FnVarArchFamily_Cpu_Amd = 3, // AMD CPU
    FnVarArchFamily_Cpu_ArmA = 4, // ARM Cortex-A CPU family
    FnVarArchFamily_Cpu_ArmM = 5, // ARM Cortex-M CPU family
    FnVarArchFamily_Cpu_ArmR = 6, // ARM Cortex-R CPU family
    FnVarArchFamily_Cpu_Max = 0x7fffffff,
} FnVarArchFamily_Cpu;

typedef enum FnVarArchFamily_Gpu_ {
    FnVarArchFamily_Gpu_Generic = 0, // Generic GPU
    FnVarArchFamily_Gpu_Intel = 1, // Intel GPU
    FnVarArchFamily_Gpu_Amd = 2, // AMD GPU
    FnVarArchFamily_Gpu_Nvidia = 3, // NVIDIA GPU
    FnVarArchFamily_Gpu_Max = 0x7fffffff,
} FnVarArchFamily_Gpu;

typedef enum FnVarArchFamily_Npu_ {
    FnVarArchFamily_Npu_Generic = 0, // Generic NPU
    FnVarArchFamily_Npu_Intel = 1, // Intel NPU
    FnVarArchFamily_Npu_AmdXdna = 2, // AMD XDNA NPU
    FnVarArchFamily_Npu_Max = 0x7fffffff,
} FnVarArchFamily_Npu;

// Architectures

typedef enum FnVarArch_Unknown_Generic_ {
    FnVarArch_Unknown_Generic_Any = 0, // Any architecture
    FnVarArch_Unknown_Generic_Max = 0x7fffffff,
} FnVarArch_Unknown_Generic;

typedef enum FnVarArch_Cpu_Generic_ {
    FnVarArch_Cpu_Generic_Any = 0, // Any CPU
    FnVarArch_Cpu_Generic_Max = 0x7fffffff,
} FnVarArch_Cpu_Generic;

typedef enum FnVarArch_Cpu_Intel_ {
    FnVarArch_Cpu_Intel_Any = 0, // Any Intel CPU
    FnVarArch_Cpu_Intel_Nhm = 1, // Intel Nehalem microarchitecture
    FnVarArch_Cpu_Intel_Wsm = 2, // Intel Westmere microarchitecture
    FnVarArch_Cpu_Intel_Sdb = 3, // Intel Sandy Bridge microarchitecture
    FnVarArch_Cpu_Intel_Ivb = 4, // Intel Ivy Bridge microarchitecture
    FnVarArch_Cpu_Intel_Hsw = 5, // Intel Haswell microarchitecture
    FnVarArch_Cpu_Intel_Bdw = 6, // Intel Broadwell microarchitecture
    FnVarArch_Cpu_Intel_Skl = 7, // Intel Skylake microarchitecture
    FnVarArch_Cpu_Intel_Pmc = 8, // Intel Palm Cove microarchitecture
    FnVarArch_Cpu_Intel_Snc = 9, // Intel Sunny Cove microarchitecture
    FnVarArch_Cpu_Intel_Wlc = 10, // Intel Willow Cove microarchitecture
    FnVarArch_Cpu_Intel_Cpc = 11, // Intel Cypress Cove microarchitecture
    FnVarArch_Cpu_Intel_Gdc = 12, // Intel Golden Cove microarchitecture
    FnVarArch_Cpu_Intel_Rpc = 13, // Intel Raptor Cove microarchitecture
    FnVarArch_Cpu_Intel_Rdc = 14, // Intel Redwood Cove microarchitecture
    FnVarArch_Cpu_Intel_Lnc = 15, // Intel Lion Cove microarchitecture
    FnVarArch_Cpu_Intel_Max = 0x7fffffff,
} FnVarArch_Cpu_Intel;

typedef enum FnVarArch_Cpu_IntelAtom_ {
    FnVarArch_Cpu_IntelAtom_Any = 0, // Any Intel Atom/Low-power CPU
    FnVarArch_Cpu_IntelAtom_Bnl = 1, // Intel Bonnell microarchitecture
    FnVarArch_Cpu_IntelAtom_Slw = 2, // Intel Saltwell microarchitecture
    FnVarArch_Cpu_IntelAtom_Svm = 3, // Intel Silvermont microarchitecture
    FnVarArch_Cpu_IntelAtom_Aim = 4, // Intel Airmont microarchitecture
    FnVarArch_Cpu_IntelAtom_Gdm = 5, // Intel Goldmont microarchitecture
    FnVarArch_Cpu_IntelAtom_GdmP = 6, // Intel Goldmont Plus microarchitecture
    FnVarArch_Cpu_IntelAtom_Trm = 7, // Intel Tremont microarchitecture
    FnVarArch_Cpu_IntelAtom_Gcm = 8, // Intel Gracemont microarchitecture
    FnVarArch_Cpu_IntelAtom_Csm = 9, // Intel Crestmont microarchitecture
    FnVarArch_Cpu_IntelAtom_Skm = 10, // Intel Skymont microarchitecture
    FnVarArch_Cpu_IntelAtom_Max = 0x7fffffff,
} FnVarArch_Cpu_IntelAtom;

typedef enum FnVarArch_Cpu_Amd_ {
    FnVarArch_Cpu_Amd_Any = 0, // Any AMD CPU
    FnVarArch_Cpu_Amd_Max = 0x7fffffff,
} FnVarArch_Cpu_Amd;

typedef enum FnVarArch_Cpu_ArmA_ {
    FnVarArch_Cpu_ArmA_Any = 0, // Any CPU microarchitecture from the ARM Cortex-A family
    FnVarArch_Cpu_ArmA_A8 = 1, // ARM Cortex-A8 (32-bit)
    FnVarArch_Cpu_ArmA_A9 = 2, // ARM Cortex-A9 (32-bit)
    FnVarArch_Cpu_ArmA_A5 = 3, // ARM Cortex-A5 (32-bit)
    FnVarArch_Cpu_ArmA_A15 = 4, // ARM Cortex-A15 (32-bit)
    FnVarArch_Cpu_ArmA_A7 = 5, // ARM Cortex-A7 (32-bit)
    FnVarArch_Cpu_ArmA_A53 = 6, // ARM Cortex-A53 (32/64-bit)
    FnVarArch_Cpu_ArmA_A57 = 7, // ARM Cortex-A57 (32/64-bit)
    FnVarArch_Cpu_ArmA_A12 = 8, // ARM Cortex-A12 (32-bit)
    FnVarArch_Cpu_ArmA_A17 = 9, // ARM Cortex-A17 (32-bit)
    FnVarArch_Cpu_ArmA_A32 = 10, // ARM Cortex-A32 (32-bit)
    FnVarArch_Cpu_ArmA_A34 = 11, // ARM Cortex-A34 (64-bit)
    FnVarArch_Cpu_ArmA_A73 = 12, // ARM Cortex-A73 (32/64-bit)
    FnVarArch_Cpu_ArmA_A55 = 13, // ARM Cortex-A55 (32/64-bit)
    FnVarArch_Cpu_ArmA_A75 = 14, // ARM Cortex-A75 (32/64-bit)
    FnVarArch_Cpu_ArmA_A65 = 15, // ARM Cortex-A65 (64-bit)
    FnVarArch_Cpu_ArmA_A76 = 16, // ARM Cortex-A76 (32/64-bit)
    FnVarArch_Cpu_ArmA_A77 = 17, // ARM Cortex-A77 (32/64-bit)
    FnVarArch_Cpu_ArmA_A78 = 18, // ARM Cortex-A78 (32/64-bit)
    FnVarArch_Cpu_ArmA_A78ae = 19, // ARM Cortex-A78AE (32/64-bit)
    FnVarArch_Cpu_ArmA_A510 = 20, // ARM Cortex-A510 (64-bit)
    FnVarArch_Cpu_ArmA_A710 = 21, // ARM Cortex-A710 (32/64-bit)
    FnVarArch_Cpu_ArmA_A510r = 22, // ARM Cortex-A510 (refresh) (32/64-bit)
    FnVarArch_Cpu_ArmA_A715 = 23, // ARM Cortex-A715 (64-bit)
    FnVarArch_Cpu_ArmA_A520 = 24, // ARM Cortex-A520 (64-bit)
    FnVarArch_Cpu_ArmA_A720 = 25, // ARM Cortex-A720 (64-bit)
    FnVarArch_Cpu_ArmA_A520ae = 26, // ARM Cortex-A520AE (64-bit)
    FnVarArch_Cpu_ArmA_A720ae = 27, // ARM Cortex-A720AE (64-bit)
    FnVarArch_Cpu_ArmA_A725 = 28, // ARM Cortex-A725 (64-bit)
    FnVarArch_Cpu_ArmA_A320 = 29, // ARM Cortex-A320 (64-bit)
    FnVarArch_Cpu_ArmA_A530 = 30, // ARM Cortex-A530 (64-bit)
    FnVarArch_Cpu_ArmA_A730 = 31, // ARM Cortex-A730 (64-bit)
    FnVarArch_Cpu_ArmA_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmA;

typedef enum FnVarArch_Cpu_ArmM_ {
    FnVarArch_Cpu_ArmM_Any = 0, // Any CPU microarchitecture from the ARM Cortex-M family
    FnVarArch_Cpu_ArmM_M3 = 1, // ARM Cortex-M3
    FnVarArch_Cpu_ArmM_M1 = 2, // ARM Cortex-M1
    FnVarArch_Cpu_ArmM_M0 = 3, // ARM Cortex-M0
    FnVarArch_Cpu_ArmM_M4 = 4, // ARM Cortex-M4
    FnVarArch_Cpu_ArmM_M0p = 5, // ARM Cortex-M0+
    FnVarArch_Cpu_ArmM_M7 = 6, // ARM Cortex-M7
    FnVarArch_Cpu_ArmM_M23 = 7, // ARM Cortex-M23
    FnVarArch_Cpu_ArmM_M33 = 8, // ARM Cortex-M33
    FnVarArch_Cpu_ArmM_M35p = 9, // ARM Cortex-M35P
    FnVarArch_Cpu_ArmM_M55 = 10, // ARM Cortex-M55
    FnVarArch_Cpu_ArmM_M85 = 11, // ARM Cortex-M85
    FnVarArch_Cpu_ArmM_M52 = 12, // ARM Cortex-M52
    FnVarArch_Cpu_ArmM_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmM;

typedef enum FnVarArch_Cpu_ArmR_ {
    FnVarArch_Cpu_ArmR_Any = 0, // Any CPU microarchitecture from the ARM Cortex-R family
    FnVarArch_Cpu_ArmR_R4 = 1, // ARM Cortex-R4 (32-bit)
    FnVarArch_Cpu_ArmR_R5 = 2, // ARM Cortex-R5 (32-bit)
    FnVarArch_Cpu_ArmR_R7 = 3, // ARM Cortex-R7 (32-bit)
    FnVarArch_Cpu_ArmR_R8 = 4, // ARM Cortex-R8 (32-bit)
    FnVarArch_Cpu_ArmR_R52 = 5, // ARM Cortex-R52 (32-bit)
    FnVarArch_Cpu_ArmR_R82 = 6, // ARM Cortex-R82 (64-bit)
    FnVarArch_Cpu_ArmR_R52p = 7, // ARM Cortex-R52+ (32-bit)
    FnVarArch_Cpu_ArmR_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmR;

typedef enum FnVarArch_Gpu_Generic_ {
    FnVarArch_Gpu_Generic_Any = 0, // Any GPU
    FnVarArch_Gpu_Generic_Max = 0x7fffffff,
} FnVarArch_Gpu_Generic;

typedef enum FnVarArch_Gpu_Intel_ {
    FnVarArch_Gpu_Intel_Any = 0, // Any Intel GPU
    FnVarArch_Gpu_Intel_Bdw = 1, // Broadwell Intel graphics architecture
    FnVarArch_Gpu_Intel_V800 = 1, // Broadwell Intel graphics architecture
    FnVarArch_Gpu_Intel_Skl = 2, // Skylake Intel graphics architecture
    FnVarArch_Gpu_Intel_V909 = 2, // Skylake Intel graphics architecture
    FnVarArch_Gpu_Intel_Kbl = 3, // Kaby Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V919 = 3, // Kaby Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Cfl = 4, // Coffee Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V929 = 4, // Coffee Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Apl = 5, // Apollo Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V930 = 5, // Apollo Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Bxt = 5, // Broxton Intel graphics architecture
    FnVarArch_Gpu_Intel_Glk = 6, // Gemini Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V940 = 6, // Gemini Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Whl = 7, // Whiskey Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V950 = 7, // Whiskey Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Aml = 8, // Amber Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V960 = 8, // Amber Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Cml = 9, // Comet Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V970 = 9, // Comet Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Icllp = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Icl = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1100 = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Ehl = 11, // Elkhart Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1120 = 11, // Elkhart Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Jsl = 11, // Jasper Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Tgllp = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Tgl = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1200 = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Rkl = 13, // Rocket Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1210 = 13, // Rocket Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlS = 14, // Alder Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_V1220 = 14, // Alder Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_RplS = 14, // Raptor Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlP = 15, // Alder Lake P Intel graphics architecture
    FnVarArch_Gpu_Intel_V1230 = 15, // Alder Lake P Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlN = 16, // Alder Lake N Intel graphics architecture
    FnVarArch_Gpu_Intel_V1240 = 16, // Alder Lake N Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg1 = 17, // DG1 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12100 = 17, // DG1 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG10 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G10 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12558 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG11 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G11 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12565 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG12 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G12 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12570 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_Pvc = 21, // Ponte Vecchio Intel graphics architecture
    FnVarArch_Gpu_Intel_V12607 = 21, // Ponte Vecchio Intel graphics architecture
    FnVarArch_Gpu_Intel_PvcVg = 22, // Ponte Vecchio VG Intel graphics architecture
    FnVarArch_Gpu_Intel_V12617 = 22, // Ponte Vecchio VG Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlU = 23, // Meteor Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlS = 23, // Meteor Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlU = 23, // Arrow Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlS = 23, // Arrow Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_V12704 = 23, // Meteor Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlH = 24, // Meteor Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V12714 = 24, // Meteor Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlH = 25, // Arrow Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V12744 = 25, // Arrow Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_BmgG21 = 26, // Battlemage G21 Intel graphics architecture
    FnVarArch_Gpu_Intel_V2014 = 26, // Battlemage G21 Intel graphics architecture
    FnVarArch_Gpu_Intel_LnlM = 27, // Lunar Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V2044 = 27, // Lunar Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_PtlH = 28, // Panther Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V3004 = 28, // Panther Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_PtlU = 29, // Panther Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_V3011 = 29, // Panther Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_Max = 0x7fffffff,
} FnVarArch_Gpu_Intel;

typedef enum FnVarArch_Gpu_Amd_ {
    FnVarArch_Gpu_Amd_Any = 0, // Any AMD GPU
    FnVarArch_Gpu_Amd_Gfx700 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx701 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx702 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx703 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx704 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx705 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx801 = 2, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx802 = 2, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx803 = 3, // AMD GCN 4.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx805 = 4, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx810 = 4, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx900 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx902 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx904 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx906 = 6, // AMD GCN 5.1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx908 = 7, // AMD CDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx909 = 8, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx90a = 9, // AMD CDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx90c = 10, // AMD GCN 5.1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx940 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx941 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx942 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1010 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1011 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1012 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1013 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1030 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1031 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1032 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1033 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1034 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1035 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1036 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1100 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1101 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1102 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1103 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1150 = 15, // AMD RDNA 3.5 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1151 = 15, // AMD RDNA 3.5 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1200 = 16, // AMD RDNA 4 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1201 = 16, // AMD RDNA 4 microarchitecture
    FnVarArch_Gpu_Amd_Max = 0x7fffffff,
} FnVarArch_Gpu_Amd;

typedef enum FnVarArch_Gpu_Nvidia_ {
    FnVarArch_Gpu_Nvidia_Any = 0, // Any NVIDIA GPU
    FnVarArch_Gpu_Nvidia_Sm50 = 1, // NVIDIA Maxwell microarchitecture (compute capability 5.0)
    FnVarArch_Gpu_Nvidia_Sm52 = 2, // NVIDIA Maxwell microarchitecture (compute capability 5.2)
    FnVarArch_Gpu_Nvidia_Sm53 = 3, // NVIDIA Maxwell microarchitecture (compute capability 5.3)
    FnVarArch_Gpu_Nvidia_Sm60 = 4, // NVIDIA Pascal microarchitecture (compute capability 6.0)
    FnVarArch_Gpu_Nvidia_Sm61 = 5, // NVIDIA Pascal microarchitecture (compute capability 6.1)
    FnVarArch_Gpu_Nvidia_Sm62 = 6, // NVIDIA Pascal microarchitecture (compute capability 6.2)
    FnVarArch_Gpu_Nvidia_Sm70 = 6, // NVIDIA Volta microarchitecture (compute capability 7.0)
    FnVarArch_Gpu_Nvidia_Sm72 = 7, // NVIDIA Volta microarchitecture (compute capability 7.2)
    FnVarArch_Gpu_Nvidia_Sm75 = 8, // NVIDIA Turing microarchitecture (compute capability 7.5)
    FnVarArch_Gpu_Nvidia_Sm80 = 9, // NVIDIA Ampere microarchitecture (compute capability 8.0)
    FnVarArch_Gpu_Nvidia_Sm86 = 10, // NVIDIA Ampere microarchitecture (compute capability 8.6)
    FnVarArch_Gpu_Nvidia_Sm87 = 11, // NVIDIA Jetson/Drive AGX Orin microarchitecture
    FnVarArch_Gpu_Nvidia_Sm89 = 12, // NVIDIA Ada Lovelace arhitecture
    FnVarArch_Gpu_Nvidia_Sm90 = 13, // NVIDIA Hopper arhitecture
    FnVarArch_Gpu_Nvidia_Sm90a = 13, // NVIDIA Hopper arhitecture
    FnVarArch_Gpu_Nvidia_Max = 0x7fffffff,
} FnVarArch_Gpu_Nvidia;

typedef enum FnVarArch_Npu_Generic_ {
    FnVarArch_Npu_Generic_Any = 0, // Any NPU
    FnVarArch_Npu_Generic_Max = 0x7fffffff,
} FnVarArch_Npu_Generic;

typedef enum FnVarArch_Npu_Intel_ {
    FnVarArch_Npu_Intel_Any = 0, // Any Intel NPU
    FnVarArch_Npu_Intel_Mtl = 1, // Intel NPU used in Meteor Lake processors
    FnVarArch_Npu_Intel_Lnl = 2, // Intel NPU used in Lunar Lake processors
    FnVarArch_Npu_Intel_Max = 0x7fffffff,
} FnVarArch_Npu_Intel;

typedef enum FnVarArch_Npu_AmdXdna_ {
    FnVarArch_Npu_AmdXdna_Any = 0, // Any AMD XDNA architecture
    FnVarArch_Npu_AmdXdna_Max = 0x7fffffff,
} FnVarArch_Npu_AmdXdna;
