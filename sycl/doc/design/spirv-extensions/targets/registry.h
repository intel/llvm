// This header is automatically generated by generate.py.

#define FNVAR_VERSION (0)

// Targets

typedef enum FnVarTarget_ {
    FnVarTarget_Unknown = 0, // Unknown target
    FnVarTarget_Arm = 1, // ARM (32-bit)
    FnVarTarget_Arm32 = 1, // ARM (32-bit)
    FnVarTarget_Arm64 = 2, // ARM (64-bit)
    FnVarTarget_Aarch64 = 2, // ARM (64-bit)
    FnVarTarget_X86 = 3, // x86 (32-bit)
    FnVarTarget_X8664 = 4, // x86 (64-bit)
    FnVarTarget_Riscv32 = 5, // RISC-V (32-bit)
    FnVarTarget_Riscv64 = 6, // RISC-V (64-bit)
    FnVarTarget_Nvptx = 7, // NVIDIA PTX (32-bit)
    FnVarTarget_Nvptx64 = 8, // NVIDIA PTX (64-bit)
    FnVarTarget_Amdgcn = 9, // AMD GCN
    FnVarTarget_Max = 0x7fffffff,
} FnVarTarget;

// Features

typedef enum FnVarFeature_Unknown_ {
    FnVarFeature_Unknown_None = 0, // No features
    FnVarFeature_Unknown_Max = 0x7fffffff,
} FnVarFeature_Unknown;

typedef enum FnVarFeature_Arm32_ {
    FnVarFeature_Arm32_None = 0, // No features
    FnVarFeature_Arm32_Neon = 1, // Enable NEON instructions
    FnVarFeature_Arm32_Max = 0x7fffffff,
} FnVarFeature_Arm32;

typedef enum FnVarFeature_Arm64_ {
    FnVarFeature_Arm64_None = 0, // No features
    FnVarFeature_Arm64_Fp8 = 1, // Enable FP8 instructions
    FnVarFeature_Arm64_Fp8dot2 = 2, // Enable FP8 2-way dot product instructions
    FnVarFeature_Arm64_Fp8dot4 = 3, // Enable FP8 4-way dot product instructions
    FnVarFeature_Arm64_Neon = 4, // Enable NEON instructions
    FnVarFeature_Arm64_Sve = 5, // Enable SVE instructions
    FnVarFeature_Arm64_Max = 0x7fffffff,
} FnVarFeature_Arm64;

typedef enum FnVarFeature_X86_ {
    FnVarFeature_X86_None = 0, // No features
    FnVarFeature_X86_Fma = 1, // Enable fused three-operand multiply-add
    FnVarFeature_X86_Fma4 = 2, // Enable fused four-operand multiply-add
    FnVarFeature_X86_Mmx = 3, // Enable MMX instructions
    FnVarFeature_X86_Sse = 4, // Enable SSE instructions
    FnVarFeature_X86_Sse2 = 5, // Enable SSE2 instructions
    FnVarFeature_X86_Sse3 = 6, // Enable SSE3 instructions
    FnVarFeature_X86_Sse41 = 7, // Enable SSE4.1 instructions
    FnVarFeature_X86_Sse42 = 8, // Enable SSE4.2 instructions
    FnVarFeature_X86_Sse4a = 9, // Enable SSE4a instructions
    FnVarFeature_X86_Avx = 10, // Enable AVX instructions
    FnVarFeature_X86_Avx2 = 11, // Enable AVX2 instructions
    FnVarFeature_X86_Avx512f = 12, // Enable AVX512 instructions
    FnVarFeature_X86_Max = 0x7fffffff,
} FnVarFeature_X86;

typedef enum FnVarFeature_X8664_ {
    FnVarFeature_X8664_None = 0, // No features
    FnVarFeature_X8664_Fma = 1, // Enable fused three-operand multiply-add
    FnVarFeature_X8664_Fma4 = 2, // Enable fused four-operand multiply-add
    FnVarFeature_X8664_Mmx = 3, // Enable MMX instructions
    FnVarFeature_X8664_Sse = 4, // Enable SSE instructions
    FnVarFeature_X8664_Sse2 = 5, // Enable SSE2 instructions
    FnVarFeature_X8664_Sse3 = 6, // Enable SSE3 instructions
    FnVarFeature_X8664_Sse41 = 7, // Enable SSE4.1 instructions
    FnVarFeature_X8664_Sse42 = 8, // Enable SSE4.2 instructions
    FnVarFeature_X8664_Sse4a = 9, // Enable SSE4a instructions
    FnVarFeature_X8664_Avx = 10, // Enable AVX instructions
    FnVarFeature_X8664_Avx2 = 11, // Enable AVX2 instructions
    FnVarFeature_X8664_Avx512f = 12, // Enable AVX512 instructions
    FnVarFeature_X8664_Max = 0x7fffffff,
} FnVarFeature_X8664;

typedef enum FnVarFeature_Riscv32_ {
    FnVarFeature_Riscv32_32bit = 0, // Implements RV32.
    FnVarFeature_Riscv32_64bit = 1, // Implements RV64.
    FnVarFeature_Riscv32_A = 2, // 'A' (Atomic Instructions).
    FnVarFeature_Riscv32_AuipcAddiFusion = 3, // Enable AUIPC+ADDI macrofusion.
    FnVarFeature_Riscv32_B = 4, // 'B' (the collection of the Zba, Zbb, Zbs extensions).
    FnVarFeature_Riscv32_C = 5, // 'C' (Compressed Instructions).
    FnVarFeature_Riscv32_ConditionalCmvFusion = 6, // Enable branch+c.mv fusion.
    FnVarFeature_Riscv32_D = 7, // 'D' (Double-Precision Floating-Point).
    FnVarFeature_Riscv32_DlenFactor2 = 8, // Vector unit DLEN(data path width) is half of VLEN.
    FnVarFeature_Riscv32_E = 9, // Implements RV{32,64}E (provides 16 rather than 32 GPRs).
    FnVarFeature_Riscv32_Experimental = 10, // Experimental intrinsics.
    FnVarFeature_Riscv32_ExperimentalRva23s64 = 11, // RISC-V experimental-rva23s64 profile.
    FnVarFeature_Riscv32_ExperimentalRva23u64 = 12, // RISC-V experimental-rva23u64 profile.
    FnVarFeature_Riscv32_ExperimentalRvb23s64 = 13, // RISC-V experimental-rvb23s64 profile.
    FnVarFeature_Riscv32_ExperimentalRvb23u64 = 14, // RISC-V experimental-rvb23u64 profile.
    FnVarFeature_Riscv32_ExperimentalRvm23u32 = 15, // RISC-V experimental-rvm23u32 profile.
    FnVarFeature_Riscv32_ExperimentalSmmpm = 16, // 'Smmpm' (Machine-level Pointer Masking for M-mode).
    FnVarFeature_Riscv32_ExperimentalSmnpm = 17, // 'Smnpm' (Machine-level Pointer Masking for next lower privilege mode).
    FnVarFeature_Riscv32_ExperimentalSsnpm = 18, // 'Ssnpm' (Supervisor-level Pointer Masking for next lower privilege mode).
    FnVarFeature_Riscv32_ExperimentalSspm = 19, // 'Sspm' (Indicates Supervisor-mode Pointer Masking).
    FnVarFeature_Riscv32_ExperimentalSsqosid = 20, // 'Ssqosid' (Quality-of-Service (QoS) Identifiers).
    FnVarFeature_Riscv32_ExperimentalSupm = 21, // 'Supm' (Indicates User-mode Pointer Masking).
    FnVarFeature_Riscv32_ExperimentalZacas = 22, // 'Zacas' (Atomic Compare-And-Swap Instructions).
    FnVarFeature_Riscv32_ExperimentalZalasr = 23, // 'Zalasr' (Load-Acquire and Store-Release Instructions).
    FnVarFeature_Riscv32_ExperimentalZicfilp = 24, // 'Zicfilp' (Landing pad).
    FnVarFeature_Riscv32_ExperimentalZicfiss = 25, // 'Zicfiss' (Shadow stack).
    FnVarFeature_Riscv32_F = 26, // 'F' (Single-Precision Floating-Point).
    FnVarFeature_Riscv32_ForcedAtomics = 27, // Assume that lock-free native-width atomics are available.
    FnVarFeature_Riscv32_ForcedSwShadowStack = 28, // Implement shadow stack with software..
    FnVarFeature_Riscv32_H = 29, // 'H' (Hypervisor).
    FnVarFeature_Riscv32_I = 30, // 'I' (Base Integer Instruction Set).
    FnVarFeature_Riscv32_LdAddFusion = 31, // Enable LD+ADD macrofusion.
    FnVarFeature_Riscv32_LuiAddiFusion = 32, // Enable LUI+ADDI macro fusion.
    FnVarFeature_Riscv32_M = 33, // 'M' (Integer Multiplication and Division).
    FnVarFeature_Riscv32_NoDefaultUnroll = 34, // Disable default unroll preference..
    FnVarFeature_Riscv32_NoRvcHints = 35, // Disable RVC Hint Instructions..
    FnVarFeature_Riscv32_NoSinkSplatOperands = 36, // Disable sink splat operands to enable .vx, .vf,.wx, and .wf instructions.
    FnVarFeature_Riscv32_NoTrailingSeqCstFence = 37, // Disable trailing fence for seq-cst store..
    FnVarFeature_Riscv32_OptimizedZeroStrideLoad = 38, // Optimized (perform fewer memory operations)zero-stride vector load.
    FnVarFeature_Riscv32_PredictableSelectExpensive = 39, // Prefer likely predicted branches over selects.
    FnVarFeature_Riscv32_PreferWInst = 40, // Prefer instructions with W suffix.
    FnVarFeature_Riscv32_Relax = 41, // Enable Linker relaxation..
    FnVarFeature_Riscv32_ReserveX1 = 42, // Reserve X1.
    FnVarFeature_Riscv32_ReserveX10 = 43, // Reserve X10.
    FnVarFeature_Riscv32_ReserveX11 = 44, // Reserve X11.
    FnVarFeature_Riscv32_ReserveX12 = 45, // Reserve X12.
    FnVarFeature_Riscv32_ReserveX13 = 46, // Reserve X13.
    FnVarFeature_Riscv32_ReserveX14 = 47, // Reserve X14.
    FnVarFeature_Riscv32_ReserveX15 = 48, // Reserve X15.
    FnVarFeature_Riscv32_ReserveX16 = 49, // Reserve X16.
    FnVarFeature_Riscv32_ReserveX17 = 50, // Reserve X17.
    FnVarFeature_Riscv32_ReserveX18 = 51, // Reserve X18.
    FnVarFeature_Riscv32_ReserveX19 = 52, // Reserve X19.
    FnVarFeature_Riscv32_ReserveX2 = 53, // Reserve X2.
    FnVarFeature_Riscv32_ReserveX20 = 54, // Reserve X20.
    FnVarFeature_Riscv32_ReserveX21 = 55, // Reserve X21.
    FnVarFeature_Riscv32_ReserveX22 = 56, // Reserve X22.
    FnVarFeature_Riscv32_ReserveX23 = 57, // Reserve X23.
    FnVarFeature_Riscv32_ReserveX24 = 58, // Reserve X24.
    FnVarFeature_Riscv32_ReserveX25 = 59, // Reserve X25.
    FnVarFeature_Riscv32_ReserveX26 = 60, // Reserve X26.
    FnVarFeature_Riscv32_ReserveX27 = 61, // Reserve X27.
    FnVarFeature_Riscv32_ReserveX28 = 62, // Reserve X28.
    FnVarFeature_Riscv32_ReserveX29 = 63, // Reserve X29.
    FnVarFeature_Riscv32_ReserveX3 = 64, // Reserve X3.
    FnVarFeature_Riscv32_ReserveX30 = 65, // Reserve X30.
    FnVarFeature_Riscv32_ReserveX31 = 66, // Reserve X31.
    FnVarFeature_Riscv32_ReserveX4 = 67, // Reserve X4.
    FnVarFeature_Riscv32_ReserveX5 = 68, // Reserve X5.
    FnVarFeature_Riscv32_ReserveX6 = 69, // Reserve X6.
    FnVarFeature_Riscv32_ReserveX7 = 70, // Reserve X7.
    FnVarFeature_Riscv32_ReserveX8 = 71, // Reserve X8.
    FnVarFeature_Riscv32_ReserveX9 = 72, // Reserve X9.
    FnVarFeature_Riscv32_Rva20s64 = 73, // RISC-V rva20s64 profile.
    FnVarFeature_Riscv32_Rva20u64 = 74, // RISC-V rva20u64 profile.
    FnVarFeature_Riscv32_Rva22s64 = 75, // RISC-V rva22s64 profile.
    FnVarFeature_Riscv32_Rva22u64 = 76, // RISC-V rva22u64 profile.
    FnVarFeature_Riscv32_Rvi20u32 = 77, // RISC-V rvi20u32 profile.
    FnVarFeature_Riscv32_Rvi20u64 = 78, // RISC-V rvi20u64 profile.
    FnVarFeature_Riscv32_SaveRestore = 79, // Enable save/restore..
    FnVarFeature_Riscv32_Shcounterenw = 80, // 'Shcounterenw' (Support writeable hcounteren enable bit for any hpmcounter that is not read-only zero).
    FnVarFeature_Riscv32_Shgatpa = 81, // 'Sgatpa' (SvNNx4 mode supported for all modes supported by satp, as well as Bare).
    FnVarFeature_Riscv32_ShiftedZextwFusion = 82, // Enable SLLI+SRLI to be fused when computing (shifted) word zero extension.
    FnVarFeature_Riscv32_ShortForwardBranchOpt = 83, // Enable short forward branch optimization.
    FnVarFeature_Riscv32_Shtvala = 84, // 'Shtvala' (htval provides all needed values).
    FnVarFeature_Riscv32_Shvsatpa = 85, // 'Svsatpa' (vsatp supports all modes supported by satp).
    FnVarFeature_Riscv32_Shvstvala = 86, // 'Shvstvala' (vstval provides all needed values).
    FnVarFeature_Riscv32_Shvstvecd = 87, // 'Shvstvecd' (vstvec supports Direct mode).
    FnVarFeature_Riscv32_Sifive7 = 88, // SiFive 7-Series processors.
    FnVarFeature_Riscv32_Smaia = 89, // 'Smaia' (Advanced Interrupt Architecture Machine Level).
    FnVarFeature_Riscv32_Smcdeleg = 90, // 'Smcdeleg' (Counter Delegation Machine Level).
    FnVarFeature_Riscv32_Smcsrind = 91, // 'Smcsrind' (Indirect CSR Access Machine Level).
    FnVarFeature_Riscv32_Smepmp = 92, // 'Smepmp' (Enhanced Physical Memory Protection).
    FnVarFeature_Riscv32_Smstateen = 93, // 'Smstateen' (Machine-mode view of the state-enable extension).
    FnVarFeature_Riscv32_Ssaia = 94, // 'Ssaia' (Advanced Interrupt Architecture Supervisor Level).
    FnVarFeature_Riscv32_Ssccfg = 95, // 'Ssccfg' (Counter Configuration Supervisor Level).
    FnVarFeature_Riscv32_Ssccptr = 96, // 'Ssccptr' (Main memory supports page table reads).
    FnVarFeature_Riscv32_Sscofpmf = 97, // 'Sscofpmf' (Count Overflow and Mode-Based Filtering).
    FnVarFeature_Riscv32_Sscounterenw = 98, // 'Sscounterenw' (Support writeable scounteren enable bit for any hpmcounter that is not read-only zero).
    FnVarFeature_Riscv32_Sscsrind = 99, // 'Sscsrind' (Indirect CSR Access Supervisor Level).
    FnVarFeature_Riscv32_Ssstateen = 100, // 'Ssstateen' (Supervisor-mode view of the state-enable extension).
    FnVarFeature_Riscv32_Ssstrict = 101, // 'Ssstrict' (No non-conforming extensions are present).
    FnVarFeature_Riscv32_Sstc = 102, // 'Sstc' (Supervisor-mode timer interrupts).
    FnVarFeature_Riscv32_Sstvala = 103, // 'Sstvala' (stval provides all needed values).
    FnVarFeature_Riscv32_Sstvecd = 104, // 'Sstvecd' (stvec supports Direct mode).
    FnVarFeature_Riscv32_Ssu64xl = 105, // 'Ssu64xl' (UXLEN=64 supported).
    FnVarFeature_Riscv32_Svade = 106, // 'Svade' (Raise exceptions on improper A/D bits).
    FnVarFeature_Riscv32_Svadu = 107, // 'Svadu' (Hardware A/D updates).
    FnVarFeature_Riscv32_Svbare = 108, // 'Svbare' $(satp mode Bare supported).
    FnVarFeature_Riscv32_Svinval = 109, // 'Svinval' (Fine-Grained Address-Translation Cache Invalidation).
    FnVarFeature_Riscv32_Svnapot = 110, // 'Svnapot' (NAPOT Translation Contiguity).
    FnVarFeature_Riscv32_Svpbmt = 111, // 'Svpbmt' (Page-Based Memory Types).
    FnVarFeature_Riscv32_TaggedGlobals = 112, // Use an instruction sequence for taking the address of a global that allows a memory tag in the upper address bits.
    FnVarFeature_Riscv32_UnalignedScalarMem = 113, // Has reasonably performant unaligned scalar loads and stores.
    FnVarFeature_Riscv32_UnalignedVectorMem = 114, // Has reasonably performant unaligned vector loads and stores.
    FnVarFeature_Riscv32_UsePostraScheduler = 115, // Schedule again after register allocation.
    FnVarFeature_Riscv32_V = 116, // 'V' (Vector Extension for Application Processors).
    FnVarFeature_Riscv32_VentanaVeyron = 117, // Ventana Veyron-Series processors.
    FnVarFeature_Riscv32_Xcvalu = 118, // 'XCValu' (CORE-V ALU Operations).
    FnVarFeature_Riscv32_Xcvbi = 119, // 'XCVbi' (CORE-V Immediate Branching).
    FnVarFeature_Riscv32_Xcvbitmanip = 120, // 'XCVbitmanip' (CORE-V Bit Manipulation).
    FnVarFeature_Riscv32_Xcvelw = 121, // 'XCVelw' (CORE-V Event Load Word).
    FnVarFeature_Riscv32_Xcvmac = 122, // 'XCVmac' (CORE-V Multiply-Accumulate).
    FnVarFeature_Riscv32_Xcvmem = 123, // 'XCVmem' (CORE-V Post-incrementing Load & Store).
    FnVarFeature_Riscv32_Xcvsimd = 124, // 'XCVsimd' (CORE-V SIMD ALU).
    FnVarFeature_Riscv32_Xsfcease = 125, // 'XSfcease' (SiFive sf.cease Instruction).
    FnVarFeature_Riscv32_Xsfvcp = 126, // 'XSfvcp' (SiFive Custom Vector Coprocessor Interface Instructions).
    FnVarFeature_Riscv32_Xsfvfnrclipxfqf = 127, // 'XSfvfnrclipxfqf' (SiFive FP32-to-int8 Ranged Clip Instructions).
    FnVarFeature_Riscv32_Xsfvfwmaccqqq = 128, // 'XSfvfwmaccqqq' (SiFive Matrix Multiply Accumulate Instruction and 4-by-4)).
    FnVarFeature_Riscv32_Xsfvqmaccdod = 129, // 'XSfvqmaccdod' (SiFive Int8 Matrix Multiplication Instructions (2-by-8 and 8-by-2)).
    FnVarFeature_Riscv32_Xsfvqmaccqoq = 130, // 'XSfvqmaccqoq' (SiFive Int8 Matrix Multiplication Instructions (4-by-8 and 8-by-4)).
    FnVarFeature_Riscv32_Xsifivecdiscarddlone = 131, // 'XSiFivecdiscarddlone' (SiFive sf.cdiscard.d.l1 Instruction).
    FnVarFeature_Riscv32_Xsifivecflushdlone = 132, // 'XSiFivecflushdlone' (SiFive sf.cflush.d.l1 Instruction).
    FnVarFeature_Riscv32_Xtheadba = 133, // 'XTHeadBa' (T-Head address calculation instructions).
    FnVarFeature_Riscv32_Xtheadbb = 134, // 'XTHeadBb' (T-Head basic bit-manipulation instructions).
    FnVarFeature_Riscv32_Xtheadbs = 135, // 'XTHeadBs' (T-Head single-bit instructions).
    FnVarFeature_Riscv32_Xtheadcmo = 136, // 'XTHeadCmo' (T-Head cache management instructions).
    FnVarFeature_Riscv32_Xtheadcondmov = 137, // 'XTHeadCondMov' (T-Head conditional move instructions).
    FnVarFeature_Riscv32_Xtheadfmemidx = 138, // 'XTHeadFMemIdx' (T-Head FP Indexed Memory Operations).
    FnVarFeature_Riscv32_Xtheadmac = 139, // 'XTHeadMac' (T-Head Multiply-Accumulate Instructions).
    FnVarFeature_Riscv32_Xtheadmemidx = 140, // 'XTHeadMemIdx' (T-Head Indexed Memory Operations).
    FnVarFeature_Riscv32_Xtheadmempair = 141, // 'XTHeadMemPair' (T-Head two-GPR Memory Operations).
    FnVarFeature_Riscv32_Xtheadsync = 142, // 'XTHeadSync' (T-Head multicore synchronization instructions).
    FnVarFeature_Riscv32_Xtheadvdot = 143, // 'XTHeadVdot' (T-Head Vector Extensions for Dot).
    FnVarFeature_Riscv32_Xventanacondops = 144, // 'XVentanaCondOps' (Ventana Conditional Ops).
    FnVarFeature_Riscv32_Xwchc = 145, // 'Xwchc' (WCH/QingKe additional compressed opcodes).
    FnVarFeature_Riscv32_Za128rs = 146, // 'Za128rs' (Reservation Set Size of at Most 128 Bytes).
    FnVarFeature_Riscv32_Za64rs = 147, // 'Za64rs' (Reservation Set Size of at Most 64 Bytes).
    FnVarFeature_Riscv32_Zaamo = 148, // 'Zaamo' (Atomic Memory Operations).
    FnVarFeature_Riscv32_Zabha = 149, // 'Zabha' (Byte and Halfword Atomic Memory Operations).
    FnVarFeature_Riscv32_Zalrsc = 150, // 'Zalrsc' (Load-Reserved/Store-Conditional).
    FnVarFeature_Riscv32_Zama16b = 151, // 'Zama16b' (Atomic 16-byte misaligned loads, stores and AMOs).
    FnVarFeature_Riscv32_Zawrs = 152, // 'Zawrs' (Wait on Reservation Set).
    FnVarFeature_Riscv32_Zba = 153, // 'Zba' (Address Generation Instructions).
    FnVarFeature_Riscv32_Zbb = 154, // 'Zbb' (Basic Bit-Manipulation).
    FnVarFeature_Riscv32_Zbc = 155, // 'Zbc' (Carry-Less Multiplication).
    FnVarFeature_Riscv32_Zbkb = 156, // 'Zbkb' (Bitmanip instructions for Cryptography).
    FnVarFeature_Riscv32_Zbkc = 157, // 'Zbkc' (Carry-less multiply instructions for Cryptography).
    FnVarFeature_Riscv32_Zbkx = 158, // 'Zbkx' (Crossbar permutation instructions).
    FnVarFeature_Riscv32_Zbs = 159, // 'Zbs' (Single-Bit Instructions).
    FnVarFeature_Riscv32_Zca = 160, // 'Zca' (part of the C extension, excluding compressed floating point loads/stores).
    FnVarFeature_Riscv32_Zcb = 161, // 'Zcb' (Compressed basic bit manipulation instructions).
    FnVarFeature_Riscv32_Zcd = 162, // 'Zcd' (Compressed Double-Precision Floating-Point Instructions).
    FnVarFeature_Riscv32_Zce = 163, // 'Zce' (Compressed extensions for microcontrollers).
    FnVarFeature_Riscv32_Zcf = 164, // 'Zcf' (Compressed Single-Precision Floating-Point Instructions).
    FnVarFeature_Riscv32_Zcmop = 165, // 'Zcmop' (Compressed May-Be-Operations).
    FnVarFeature_Riscv32_Zcmp = 166, // 'Zcmp' (sequenced instructions for code-size reduction).
    FnVarFeature_Riscv32_Zcmt = 167, // 'Zcmt' (table jump instructions for code-size reduction).
    FnVarFeature_Riscv32_Zdinx = 168, // 'Zdinx' (Double in Integer).
    FnVarFeature_Riscv32_ZexthFusion = 169, // Enable SLLI+SRLI to be fused to zero extension of halfword.
    FnVarFeature_Riscv32_ZextwFusion = 170, // Enable SLLI+SRLI to be fused to zero extension of word.
    FnVarFeature_Riscv32_Zfa = 171, // 'Zfa' (Additional Floating-Point).
    FnVarFeature_Riscv32_Zfbfmin = 172, // 'Zfbfmin' (Scalar BF16 Converts).
    FnVarFeature_Riscv32_Zfh = 173, // 'Zfh' (Half-Precision Floating-Point).
    FnVarFeature_Riscv32_Zfhmin = 174, // 'Zfhmin' (Half-Precision Floating-Point Minimal).
    FnVarFeature_Riscv32_Zfinx = 175, // 'Zfinx' (Float in Integer).
    FnVarFeature_Riscv32_Zhinx = 176, // 'Zhinx' (Half Float in Integer).
    FnVarFeature_Riscv32_Zhinxmin = 177, // 'Zhinxmin' (Half Float in Integer Minimal).
    FnVarFeature_Riscv32_Zic64b = 178, // 'Zic64b' (Cache Block Size Is 64 Bytes).
    FnVarFeature_Riscv32_Zicbom = 179, // 'Zicbom' (Cache-Block Management Instructions).
    FnVarFeature_Riscv32_Zicbop = 180, // 'Zicbop' (Cache-Block Prefetch Instructions).
    FnVarFeature_Riscv32_Zicboz = 181, // 'Zicboz' (Cache-Block Zero Instructions).
    FnVarFeature_Riscv32_Ziccamoa = 182, // 'Ziccamoa' (Main Memory Supports All Atomics in A).
    FnVarFeature_Riscv32_Ziccif = 183, // 'Ziccif' (Main Memory Supports Instruction Fetch with Atomicity Requirement).
    FnVarFeature_Riscv32_Zicclsm = 184, // 'Zicclsm' (Main Memory Supports Misaligned Loads/Stores).
    FnVarFeature_Riscv32_Ziccrse = 185, // 'Ziccrse' (Main Memory Supports Forward Progress on LR/SC Sequences).
    FnVarFeature_Riscv32_Zicntr = 186, // 'Zicntr' (Base Counters and Timers).
    FnVarFeature_Riscv32_Zicond = 187, // 'Zicond' (Integer Conditional Operations).
    FnVarFeature_Riscv32_Zicsr = 188, // 'zicsr' (CSRs).
    FnVarFeature_Riscv32_Zifencei = 189, // 'Zifencei' (fence.i).
    FnVarFeature_Riscv32_Zihintntl = 190, // 'Zihintntl' (Non-Temporal Locality Hints).
    FnVarFeature_Riscv32_Zihintpause = 191, // 'Zihintpause' (Pause Hint).
    FnVarFeature_Riscv32_Zihpm = 192, // 'Zihpm' (Hardware Performance Counters).
    FnVarFeature_Riscv32_Zimop = 193, // 'Zimop' (May-Be-Operations).
    FnVarFeature_Riscv32_Zk = 194, // 'Zk' (Standard scalar cryptography extension).
    FnVarFeature_Riscv32_Zkn = 195, // 'Zkn' (NIST Algorithm Suite).
    FnVarFeature_Riscv32_Zknd = 196, // 'Zknd' (NIST Suite: AES Decryption).
    FnVarFeature_Riscv32_Zkne = 197, // 'Zkne' (NIST Suite: AES Encryption).
    FnVarFeature_Riscv32_Zknh = 198, // 'Zknh' (NIST Suite: Hash Function Instructions).
    FnVarFeature_Riscv32_Zkr = 199, // 'Zkr' (Entropy Source Extension).
    FnVarFeature_Riscv32_Zks = 200, // 'Zks' (ShangMi Algorithm Suite).
    FnVarFeature_Riscv32_Zksed = 201, // 'Zksed' (ShangMi Suite: SM4 Block Cipher Instructions).
    FnVarFeature_Riscv32_Zksh = 202, // 'Zksh' (ShangMi Suite: SM3 Hash Function Instructions).
    FnVarFeature_Riscv32_Zkt = 203, // 'Zkt' (Data Independent Execution Latency).
    FnVarFeature_Riscv32_Zmmul = 204, // 'Zmmul' (Integer Multiplication).
    FnVarFeature_Riscv32_Ztso = 205, // 'Ztso' (Memory Model
    FnVarFeature_Riscv32_Zvbb = 206, // 'Zvbb' (Vector basic bit-manipulation instructions).
    FnVarFeature_Riscv32_Zvbc = 207, // 'Zvbc' (Vector Carryless Multiplication).
    FnVarFeature_Riscv32_Zve32f = 208, // 'Zve32f' (Vector Extensions for Embedded Processors with maximal 32 EEW and F extension).
    FnVarFeature_Riscv32_Zve32x = 209, // 'Zve32x' (Vector Extensions for Embedded Processors with maximal 32 EEW).
    FnVarFeature_Riscv32_Zve64d = 210, // 'Zve64d' (Vector Extensions for Embedded Processors with maximal 64 EEW, F and D extension).
    FnVarFeature_Riscv32_Zve64f = 211, // 'Zve64f' (Vector Extensions for Embedded Processors with maximal 64 EEW and F extension).
    FnVarFeature_Riscv32_Zve64x = 212, // 'Zve64x' (Vector Extensions for Embedded Processors with maximal 64 EEW).
    FnVarFeature_Riscv32_Zvfbfmin = 213, // 'Zvbfmin' (Vector BF16 Converts).
    FnVarFeature_Riscv32_Zvfbfwma = 214, // 'Zvfbfwma' (Vector BF16 widening mul-add).
    FnVarFeature_Riscv32_Zvfh = 215, // 'Zvfh' (Vector Half-Precision Floating-Point).
    FnVarFeature_Riscv32_Zvfhmin = 216, // 'Zvfhmin' (Vector Half-Precision Floating-Point Minimal).
    FnVarFeature_Riscv32_Zvkb = 217, // 'Zvkb' (Vector Bit-manipulation used in Cryptography).
    FnVarFeature_Riscv32_Zvkg = 218, // 'Zvkg' (Vector GCM instructions for Cryptography).
    FnVarFeature_Riscv32_Zvkn = 219, // 'Zvkn' (shorthand for 'Zvkned', 'Zvknhb', 'Zvkb', and 'Zvkt').
    FnVarFeature_Riscv32_Zvknc = 220, // 'Zvknc' (shorthand for 'Zvknc' and 'Zvbc').
    FnVarFeature_Riscv32_Zvkned = 221, // 'Zvkned' (Vector AES Encryption & Decryption (Single Round)).
    FnVarFeature_Riscv32_Zvkng = 222, // 'zvkng' (shorthand for 'Zvkn' and 'Zvkg').
    FnVarFeature_Riscv32_Zvknha = 223, // 'Zvknha' (Vector SHA-2 (SHA-256 only)).
    FnVarFeature_Riscv32_Zvknhb = 224, // 'Zvknhb' (Vector SHA-2 (SHA-256 and SHA-512)).
    FnVarFeature_Riscv32_Zvks = 225, // 'Zvks' (shorthand for 'Zvksed', 'Zvksh', 'Zvkb', and 'Zvkt').
    FnVarFeature_Riscv32_Zvksc = 226, // 'Zvksc' (shorthand for 'Zvks' and 'Zvbc').
    FnVarFeature_Riscv32_Zvksed = 227, // 'Zvksed' (SM4 Block Cipher Instructions).
    FnVarFeature_Riscv32_Zvksg = 228, // 'Zvksg' (shorthand for 'Zvks' and 'Zvkg').
    FnVarFeature_Riscv32_Zvksh = 229, // 'Zvksh' (SM3 Hash Function Instructions).
    FnVarFeature_Riscv32_Zvkt = 230, // 'Zvkt' (Vector Data-Independent Execution Latency).
    FnVarFeature_Riscv32_Zvl1024b = 231, // 'Zvl' (Minimum Vector Length) 1024.
    FnVarFeature_Riscv32_Zvl128b = 232, // 'Zvl' (Minimum Vector Length) 128.
    FnVarFeature_Riscv32_Zvl16384b = 233, // 'Zvl' (Minimum Vector Length) 16384.
    FnVarFeature_Riscv32_Zvl2048b = 234, // 'Zvl' (Minimum Vector Length) 2048.
    FnVarFeature_Riscv32_Zvl256b = 235, // 'Zvl' (Minimum Vector Length) 256.
    FnVarFeature_Riscv32_Zvl32768b = 236, // 'Zvl' (Minimum Vector Length) 32768.
    FnVarFeature_Riscv32_Zvl32b = 237, // 'Zvl' (Minimum Vector Length) 32.
    FnVarFeature_Riscv32_Zvl4096b = 238, // 'Zvl' (Minimum Vector Length) 4096.
    FnVarFeature_Riscv32_Zvl512b = 239, // 'Zvl' (Minimum Vector Length) 512.
    FnVarFeature_Riscv32_Zvl64b = 240, // 'Zvl' (Minimum Vector Length) 64.
    FnVarFeature_Riscv32_Zvl65536b = 241, // 'Zvl' (Minimum Vector Length) 65536.
    FnVarFeature_Riscv32_Zvl8192b = 242, // 'Zvl' (Minimum Vector Length) 8192.
    FnVarFeature_Riscv32_Max = 0x7fffffff,
} FnVarFeature_Riscv32;

typedef enum FnVarFeature_Riscv64_ {
    FnVarFeature_Riscv64_32bit = 0, // Implements RV32.
    FnVarFeature_Riscv64_64bit = 1, // Implements RV64.
    FnVarFeature_Riscv64_A = 2, // 'A' (Atomic Instructions).
    FnVarFeature_Riscv64_AuipcAddiFusion = 3, // Enable AUIPC+ADDI macrofusion.
    FnVarFeature_Riscv64_B = 4, // 'B' (the collection of the Zba, Zbb, Zbs extensions).
    FnVarFeature_Riscv64_C = 5, // 'C' (Compressed Instructions).
    FnVarFeature_Riscv64_ConditionalCmvFusion = 6, // Enable branch+c.mv fusion.
    FnVarFeature_Riscv64_D = 7, // 'D' (Double-Precision Floating-Point).
    FnVarFeature_Riscv64_DlenFactor2 = 8, // Vector unit DLEN(data path width) is half of VLEN.
    FnVarFeature_Riscv64_E = 9, // Implements RV{32,64}E (provides 16 rather than 32 GPRs).
    FnVarFeature_Riscv64_Experimental = 10, // Experimental intrinsics.
    FnVarFeature_Riscv64_ExperimentalRva23s64 = 11, // RISC-V experimental-rva23s64 profile.
    FnVarFeature_Riscv64_ExperimentalRva23u64 = 12, // RISC-V experimental-rva23u64 profile.
    FnVarFeature_Riscv64_ExperimentalRvb23s64 = 13, // RISC-V experimental-rvb23s64 profile.
    FnVarFeature_Riscv64_ExperimentalRvb23u64 = 14, // RISC-V experimental-rvb23u64 profile.
    FnVarFeature_Riscv64_ExperimentalRvm23u32 = 15, // RISC-V experimental-rvm23u32 profile.
    FnVarFeature_Riscv64_ExperimentalSmmpm = 16, // 'Smmpm' (Machine-level Pointer Masking for M-mode).
    FnVarFeature_Riscv64_ExperimentalSmnpm = 17, // 'Smnpm' (Machine-level Pointer Masking for next lower privilege mode).
    FnVarFeature_Riscv64_ExperimentalSsnpm = 18, // 'Ssnpm' (Supervisor-level Pointer Masking for next lower privilege mode).
    FnVarFeature_Riscv64_ExperimentalSspm = 19, // 'Sspm' (Indicates Supervisor-mode Pointer Masking).
    FnVarFeature_Riscv64_ExperimentalSsqosid = 20, // 'Ssqosid' (Quality-of-Service (QoS) Identifiers).
    FnVarFeature_Riscv64_ExperimentalSupm = 21, // 'Supm' (Indicates User-mode Pointer Masking).
    FnVarFeature_Riscv64_ExperimentalZacas = 22, // 'Zacas' (Atomic Compare-And-Swap Instructions).
    FnVarFeature_Riscv64_ExperimentalZalasr = 23, // 'Zalasr' (Load-Acquire and Store-Release Instructions).
    FnVarFeature_Riscv64_ExperimentalZicfilp = 24, // 'Zicfilp' (Landing pad).
    FnVarFeature_Riscv64_ExperimentalZicfiss = 25, // 'Zicfiss' (Shadow stack).
    FnVarFeature_Riscv64_F = 26, // 'F' (Single-Precision Floating-Point).
    FnVarFeature_Riscv64_ForcedAtomics = 27, // Assume that lock-free native-width atomics are available.
    FnVarFeature_Riscv64_ForcedSwShadowStack = 28, // Implement shadow stack with software..
    FnVarFeature_Riscv64_H = 29, // 'H' (Hypervisor).
    FnVarFeature_Riscv64_I = 30, // 'I' (Base Integer Instruction Set).
    FnVarFeature_Riscv64_LdAddFusion = 31, // Enable LD+ADD macrofusion.
    FnVarFeature_Riscv64_LuiAddiFusion = 32, // Enable LUI+ADDI macro fusion.
    FnVarFeature_Riscv64_M = 33, // 'M' (Integer Multiplication and Division).
    FnVarFeature_Riscv64_NoDefaultUnroll = 34, // Disable default unroll preference..
    FnVarFeature_Riscv64_NoRvcHints = 35, // Disable RVC Hint Instructions..
    FnVarFeature_Riscv64_NoSinkSplatOperands = 36, // Disable sink splat operands to enable .vx, .vf,.wx, and .wf instructions.
    FnVarFeature_Riscv64_NoTrailingSeqCstFence = 37, // Disable trailing fence for seq-cst store..
    FnVarFeature_Riscv64_OptimizedZeroStrideLoad = 38, // Optimized (perform fewer memory operations)zero-stride vector load.
    FnVarFeature_Riscv64_PredictableSelectExpensive = 39, // Prefer likely predicted branches over selects.
    FnVarFeature_Riscv64_PreferWInst = 40, // Prefer instructions with W suffix.
    FnVarFeature_Riscv64_Relax = 41, // Enable Linker relaxation..
    FnVarFeature_Riscv64_ReserveX1 = 42, // Reserve X1.
    FnVarFeature_Riscv64_ReserveX10 = 43, // Reserve X10.
    FnVarFeature_Riscv64_ReserveX11 = 44, // Reserve X11.
    FnVarFeature_Riscv64_ReserveX12 = 45, // Reserve X12.
    FnVarFeature_Riscv64_ReserveX13 = 46, // Reserve X13.
    FnVarFeature_Riscv64_ReserveX14 = 47, // Reserve X14.
    FnVarFeature_Riscv64_ReserveX15 = 48, // Reserve X15.
    FnVarFeature_Riscv64_ReserveX16 = 49, // Reserve X16.
    FnVarFeature_Riscv64_ReserveX17 = 50, // Reserve X17.
    FnVarFeature_Riscv64_ReserveX18 = 51, // Reserve X18.
    FnVarFeature_Riscv64_ReserveX19 = 52, // Reserve X19.
    FnVarFeature_Riscv64_ReserveX2 = 53, // Reserve X2.
    FnVarFeature_Riscv64_ReserveX20 = 54, // Reserve X20.
    FnVarFeature_Riscv64_ReserveX21 = 55, // Reserve X21.
    FnVarFeature_Riscv64_ReserveX22 = 56, // Reserve X22.
    FnVarFeature_Riscv64_ReserveX23 = 57, // Reserve X23.
    FnVarFeature_Riscv64_ReserveX24 = 58, // Reserve X24.
    FnVarFeature_Riscv64_ReserveX25 = 59, // Reserve X25.
    FnVarFeature_Riscv64_ReserveX26 = 60, // Reserve X26.
    FnVarFeature_Riscv64_ReserveX27 = 61, // Reserve X27.
    FnVarFeature_Riscv64_ReserveX28 = 62, // Reserve X28.
    FnVarFeature_Riscv64_ReserveX29 = 63, // Reserve X29.
    FnVarFeature_Riscv64_ReserveX3 = 64, // Reserve X3.
    FnVarFeature_Riscv64_ReserveX30 = 65, // Reserve X30.
    FnVarFeature_Riscv64_ReserveX31 = 66, // Reserve X31.
    FnVarFeature_Riscv64_ReserveX4 = 67, // Reserve X4.
    FnVarFeature_Riscv64_ReserveX5 = 68, // Reserve X5.
    FnVarFeature_Riscv64_ReserveX6 = 69, // Reserve X6.
    FnVarFeature_Riscv64_ReserveX7 = 70, // Reserve X7.
    FnVarFeature_Riscv64_ReserveX8 = 71, // Reserve X8.
    FnVarFeature_Riscv64_ReserveX9 = 72, // Reserve X9.
    FnVarFeature_Riscv64_Rva20s64 = 73, // RISC-V rva20s64 profile.
    FnVarFeature_Riscv64_Rva20u64 = 74, // RISC-V rva20u64 profile.
    FnVarFeature_Riscv64_Rva22s64 = 75, // RISC-V rva22s64 profile.
    FnVarFeature_Riscv64_Rva22u64 = 76, // RISC-V rva22u64 profile.
    FnVarFeature_Riscv64_Rvi20u32 = 77, // RISC-V rvi20u32 profile.
    FnVarFeature_Riscv64_Rvi20u64 = 78, // RISC-V rvi20u64 profile.
    FnVarFeature_Riscv64_SaveRestore = 79, // Enable save/restore..
    FnVarFeature_Riscv64_Shcounterenw = 80, // 'Shcounterenw' (Support writeable hcounteren enable bit for any hpmcounter that is not read-only zero).
    FnVarFeature_Riscv64_Shgatpa = 81, // 'Sgatpa' (SvNNx4 mode supported for all modes supported by satp, as well as Bare).
    FnVarFeature_Riscv64_ShiftedZextwFusion = 82, // Enable SLLI+SRLI to be fused when computing (shifted) word zero extension.
    FnVarFeature_Riscv64_ShortForwardBranchOpt = 83, // Enable short forward branch optimization.
    FnVarFeature_Riscv64_Shtvala = 84, // 'Shtvala' (htval provides all needed values).
    FnVarFeature_Riscv64_Shvsatpa = 85, // 'Svsatpa' (vsatp supports all modes supported by satp).
    FnVarFeature_Riscv64_Shvstvala = 86, // 'Shvstvala' (vstval provides all needed values).
    FnVarFeature_Riscv64_Shvstvecd = 87, // 'Shvstvecd' (vstvec supports Direct mode).
    FnVarFeature_Riscv64_Sifive7 = 88, // SiFive 7-Series processors.
    FnVarFeature_Riscv64_Smaia = 89, // 'Smaia' (Advanced Interrupt Architecture Machine Level).
    FnVarFeature_Riscv64_Smcdeleg = 90, // 'Smcdeleg' (Counter Delegation Machine Level).
    FnVarFeature_Riscv64_Smcsrind = 91, // 'Smcsrind' (Indirect CSR Access Machine Level).
    FnVarFeature_Riscv64_Smepmp = 92, // 'Smepmp' (Enhanced Physical Memory Protection).
    FnVarFeature_Riscv64_Smstateen = 93, // 'Smstateen' (Machine-mode view of the state-enable extension).
    FnVarFeature_Riscv64_Ssaia = 94, // 'Ssaia' (Advanced Interrupt Architecture Supervisor Level).
    FnVarFeature_Riscv64_Ssccfg = 95, // 'Ssccfg' (Counter Configuration Supervisor Level).
    FnVarFeature_Riscv64_Ssccptr = 96, // 'Ssccptr' (Main memory supports page table reads).
    FnVarFeature_Riscv64_Sscofpmf = 97, // 'Sscofpmf' (Count Overflow and Mode-Based Filtering).
    FnVarFeature_Riscv64_Sscounterenw = 98, // 'Sscounterenw' (Support writeable scounteren enable bit for any hpmcounter that is not read-only zero).
    FnVarFeature_Riscv64_Sscsrind = 99, // 'Sscsrind' (Indirect CSR Access Supervisor Level).
    FnVarFeature_Riscv64_Ssstateen = 100, // 'Ssstateen' (Supervisor-mode view of the state-enable extension).
    FnVarFeature_Riscv64_Ssstrict = 101, // 'Ssstrict' (No non-conforming extensions are present).
    FnVarFeature_Riscv64_Sstc = 102, // 'Sstc' (Supervisor-mode timer interrupts).
    FnVarFeature_Riscv64_Sstvala = 103, // 'Sstvala' (stval provides all needed values).
    FnVarFeature_Riscv64_Sstvecd = 104, // 'Sstvecd' (stvec supports Direct mode).
    FnVarFeature_Riscv64_Ssu64xl = 105, // 'Ssu64xl' (UXLEN=64 supported).
    FnVarFeature_Riscv64_Svade = 106, // 'Svade' (Raise exceptions on improper A/D bits).
    FnVarFeature_Riscv64_Svadu = 107, // 'Svadu' (Hardware A/D updates).
    FnVarFeature_Riscv64_Svbare = 108, // 'Svbare' $(satp mode Bare supported).
    FnVarFeature_Riscv64_Svinval = 109, // 'Svinval' (Fine-Grained Address-Translation Cache Invalidation).
    FnVarFeature_Riscv64_Svnapot = 110, // 'Svnapot' (NAPOT Translation Contiguity).
    FnVarFeature_Riscv64_Svpbmt = 111, // 'Svpbmt' (Page-Based Memory Types).
    FnVarFeature_Riscv64_TaggedGlobals = 112, // Use an instruction sequence for taking the address of a global that allows a memory tag in the upper address bits.
    FnVarFeature_Riscv64_UnalignedScalarMem = 113, // Has reasonably performant unaligned scalar loads and stores.
    FnVarFeature_Riscv64_UnalignedVectorMem = 114, // Has reasonably performant unaligned vector loads and stores.
    FnVarFeature_Riscv64_UsePostraScheduler = 115, // Schedule again after register allocation.
    FnVarFeature_Riscv64_V = 116, // 'V' (Vector Extension for Application Processors).
    FnVarFeature_Riscv64_VentanaVeyron = 117, // Ventana Veyron-Series processors.
    FnVarFeature_Riscv64_Xcvalu = 118, // 'XCValu' (CORE-V ALU Operations).
    FnVarFeature_Riscv64_Xcvbi = 119, // 'XCVbi' (CORE-V Immediate Branching).
    FnVarFeature_Riscv64_Xcvbitmanip = 120, // 'XCVbitmanip' (CORE-V Bit Manipulation).
    FnVarFeature_Riscv64_Xcvelw = 121, // 'XCVelw' (CORE-V Event Load Word).
    FnVarFeature_Riscv64_Xcvmac = 122, // 'XCVmac' (CORE-V Multiply-Accumulate).
    FnVarFeature_Riscv64_Xcvmem = 123, // 'XCVmem' (CORE-V Post-incrementing Load & Store).
    FnVarFeature_Riscv64_Xcvsimd = 124, // 'XCVsimd' (CORE-V SIMD ALU).
    FnVarFeature_Riscv64_Xsfcease = 125, // 'XSfcease' (SiFive sf.cease Instruction).
    FnVarFeature_Riscv64_Xsfvcp = 126, // 'XSfvcp' (SiFive Custom Vector Coprocessor Interface Instructions).
    FnVarFeature_Riscv64_Xsfvfnrclipxfqf = 127, // 'XSfvfnrclipxfqf' (SiFive FP32-to-int8 Ranged Clip Instructions).
    FnVarFeature_Riscv64_Xsfvfwmaccqqq = 128, // 'XSfvfwmaccqqq' (SiFive Matrix Multiply Accumulate Instruction and 4-by-4)).
    FnVarFeature_Riscv64_Xsfvqmaccdod = 129, // 'XSfvqmaccdod' (SiFive Int8 Matrix Multiplication Instructions (2-by-8 and 8-by-2)).
    FnVarFeature_Riscv64_Xsfvqmaccqoq = 130, // 'XSfvqmaccqoq' (SiFive Int8 Matrix Multiplication Instructions (4-by-8 and 8-by-4)).
    FnVarFeature_Riscv64_Xsifivecdiscarddlone = 131, // 'XSiFivecdiscarddlone' (SiFive sf.cdiscard.d.l1 Instruction).
    FnVarFeature_Riscv64_Xsifivecflushdlone = 132, // 'XSiFivecflushdlone' (SiFive sf.cflush.d.l1 Instruction).
    FnVarFeature_Riscv64_Xtheadba = 133, // 'XTHeadBa' (T-Head address calculation instructions).
    FnVarFeature_Riscv64_Xtheadbb = 134, // 'XTHeadBb' (T-Head basic bit-manipulation instructions).
    FnVarFeature_Riscv64_Xtheadbs = 135, // 'XTHeadBs' (T-Head single-bit instructions).
    FnVarFeature_Riscv64_Xtheadcmo = 136, // 'XTHeadCmo' (T-Head cache management instructions).
    FnVarFeature_Riscv64_Xtheadcondmov = 137, // 'XTHeadCondMov' (T-Head conditional move instructions).
    FnVarFeature_Riscv64_Xtheadfmemidx = 138, // 'XTHeadFMemIdx' (T-Head FP Indexed Memory Operations).
    FnVarFeature_Riscv64_Xtheadmac = 139, // 'XTHeadMac' (T-Head Multiply-Accumulate Instructions).
    FnVarFeature_Riscv64_Xtheadmemidx = 140, // 'XTHeadMemIdx' (T-Head Indexed Memory Operations).
    FnVarFeature_Riscv64_Xtheadmempair = 141, // 'XTHeadMemPair' (T-Head two-GPR Memory Operations).
    FnVarFeature_Riscv64_Xtheadsync = 142, // 'XTHeadSync' (T-Head multicore synchronization instructions).
    FnVarFeature_Riscv64_Xtheadvdot = 143, // 'XTHeadVdot' (T-Head Vector Extensions for Dot).
    FnVarFeature_Riscv64_Xventanacondops = 144, // 'XVentanaCondOps' (Ventana Conditional Ops).
    FnVarFeature_Riscv64_Xwchc = 145, // 'Xwchc' (WCH/QingKe additional compressed opcodes).
    FnVarFeature_Riscv64_Za128rs = 146, // 'Za128rs' (Reservation Set Size of at Most 128 Bytes).
    FnVarFeature_Riscv64_Za64rs = 147, // 'Za64rs' (Reservation Set Size of at Most 64 Bytes).
    FnVarFeature_Riscv64_Zaamo = 148, // 'Zaamo' (Atomic Memory Operations).
    FnVarFeature_Riscv64_Zabha = 149, // 'Zabha' (Byte and Halfword Atomic Memory Operations).
    FnVarFeature_Riscv64_Zalrsc = 150, // 'Zalrsc' (Load-Reserved/Store-Conditional).
    FnVarFeature_Riscv64_Zama16b = 151, // 'Zama16b' (Atomic 16-byte misaligned loads, stores and AMOs).
    FnVarFeature_Riscv64_Zawrs = 152, // 'Zawrs' (Wait on Reservation Set).
    FnVarFeature_Riscv64_Zba = 153, // 'Zba' (Address Generation Instructions).
    FnVarFeature_Riscv64_Zbb = 154, // 'Zbb' (Basic Bit-Manipulation).
    FnVarFeature_Riscv64_Zbc = 155, // 'Zbc' (Carry-Less Multiplication).
    FnVarFeature_Riscv64_Zbkb = 156, // 'Zbkb' (Bitmanip instructions for Cryptography).
    FnVarFeature_Riscv64_Zbkc = 157, // 'Zbkc' (Carry-less multiply instructions for Cryptography).
    FnVarFeature_Riscv64_Zbkx = 158, // 'Zbkx' (Crossbar permutation instructions).
    FnVarFeature_Riscv64_Zbs = 159, // 'Zbs' (Single-Bit Instructions).
    FnVarFeature_Riscv64_Zca = 160, // 'Zca' (part of the C extension, excluding compressed floating point loads/stores).
    FnVarFeature_Riscv64_Zcb = 161, // 'Zcb' (Compressed basic bit manipulation instructions).
    FnVarFeature_Riscv64_Zcd = 162, // 'Zcd' (Compressed Double-Precision Floating-Point Instructions).
    FnVarFeature_Riscv64_Zce = 163, // 'Zce' (Compressed extensions for microcontrollers).
    FnVarFeature_Riscv64_Zcf = 164, // 'Zcf' (Compressed Single-Precision Floating-Point Instructions).
    FnVarFeature_Riscv64_Zcmop = 165, // 'Zcmop' (Compressed May-Be-Operations).
    FnVarFeature_Riscv64_Zcmp = 166, // 'Zcmp' (sequenced instructions for code-size reduction).
    FnVarFeature_Riscv64_Zcmt = 167, // 'Zcmt' (table jump instructions for code-size reduction).
    FnVarFeature_Riscv64_Zdinx = 168, // 'Zdinx' (Double in Integer).
    FnVarFeature_Riscv64_ZexthFusion = 169, // Enable SLLI+SRLI to be fused to zero extension of halfword.
    FnVarFeature_Riscv64_ZextwFusion = 170, // Enable SLLI+SRLI to be fused to zero extension of word.
    FnVarFeature_Riscv64_Zfa = 171, // 'Zfa' (Additional Floating-Point).
    FnVarFeature_Riscv64_Zfbfmin = 172, // 'Zfbfmin' (Scalar BF16 Converts).
    FnVarFeature_Riscv64_Zfh = 173, // 'Zfh' (Half-Precision Floating-Point).
    FnVarFeature_Riscv64_Zfhmin = 174, // 'Zfhmin' (Half-Precision Floating-Point Minimal).
    FnVarFeature_Riscv64_Zfinx = 175, // 'Zfinx' (Float in Integer).
    FnVarFeature_Riscv64_Zhinx = 176, // 'Zhinx' (Half Float in Integer).
    FnVarFeature_Riscv64_Zhinxmin = 177, // 'Zhinxmin' (Half Float in Integer Minimal).
    FnVarFeature_Riscv64_Zic64b = 178, // 'Zic64b' (Cache Block Size Is 64 Bytes).
    FnVarFeature_Riscv64_Zicbom = 179, // 'Zicbom' (Cache-Block Management Instructions).
    FnVarFeature_Riscv64_Zicbop = 180, // 'Zicbop' (Cache-Block Prefetch Instructions).
    FnVarFeature_Riscv64_Zicboz = 181, // 'Zicboz' (Cache-Block Zero Instructions).
    FnVarFeature_Riscv64_Ziccamoa = 182, // 'Ziccamoa' (Main Memory Supports All Atomics in A).
    FnVarFeature_Riscv64_Ziccif = 183, // 'Ziccif' (Main Memory Supports Instruction Fetch with Atomicity Requirement).
    FnVarFeature_Riscv64_Zicclsm = 184, // 'Zicclsm' (Main Memory Supports Misaligned Loads/Stores).
    FnVarFeature_Riscv64_Ziccrse = 185, // 'Ziccrse' (Main Memory Supports Forward Progress on LR/SC Sequences).
    FnVarFeature_Riscv64_Zicntr = 186, // 'Zicntr' (Base Counters and Timers).
    FnVarFeature_Riscv64_Zicond = 187, // 'Zicond' (Integer Conditional Operations).
    FnVarFeature_Riscv64_Zicsr = 188, // 'zicsr' (CSRs).
    FnVarFeature_Riscv64_Zifencei = 189, // 'Zifencei' (fence.i).
    FnVarFeature_Riscv64_Zihintntl = 190, // 'Zihintntl' (Non-Temporal Locality Hints).
    FnVarFeature_Riscv64_Zihintpause = 191, // 'Zihintpause' (Pause Hint).
    FnVarFeature_Riscv64_Zihpm = 192, // 'Zihpm' (Hardware Performance Counters).
    FnVarFeature_Riscv64_Zimop = 193, // 'Zimop' (May-Be-Operations).
    FnVarFeature_Riscv64_Zk = 194, // 'Zk' (Standard scalar cryptography extension).
    FnVarFeature_Riscv64_Zkn = 195, // 'Zkn' (NIST Algorithm Suite).
    FnVarFeature_Riscv64_Zknd = 196, // 'Zknd' (NIST Suite: AES Decryption).
    FnVarFeature_Riscv64_Zkne = 197, // 'Zkne' (NIST Suite: AES Encryption).
    FnVarFeature_Riscv64_Zknh = 198, // 'Zknh' (NIST Suite: Hash Function Instructions).
    FnVarFeature_Riscv64_Zkr = 199, // 'Zkr' (Entropy Source Extension).
    FnVarFeature_Riscv64_Zks = 200, // 'Zks' (ShangMi Algorithm Suite).
    FnVarFeature_Riscv64_Zksed = 201, // 'Zksed' (ShangMi Suite: SM4 Block Cipher Instructions).
    FnVarFeature_Riscv64_Zksh = 202, // 'Zksh' (ShangMi Suite: SM3 Hash Function Instructions).
    FnVarFeature_Riscv64_Zkt = 203, // 'Zkt' (Data Independent Execution Latency).
    FnVarFeature_Riscv64_Zmmul = 204, // 'Zmmul' (Integer Multiplication).
    FnVarFeature_Riscv64_Ztso = 205, // 'Ztso' (Memory Model
    FnVarFeature_Riscv64_Zvbb = 206, // 'Zvbb' (Vector basic bit-manipulation instructions).
    FnVarFeature_Riscv64_Zvbc = 207, // 'Zvbc' (Vector Carryless Multiplication).
    FnVarFeature_Riscv64_Zve32f = 208, // 'Zve32f' (Vector Extensions for Embedded Processors with maximal 32 EEW and F extension).
    FnVarFeature_Riscv64_Zve32x = 209, // 'Zve32x' (Vector Extensions for Embedded Processors with maximal 32 EEW).
    FnVarFeature_Riscv64_Zve64d = 210, // 'Zve64d' (Vector Extensions for Embedded Processors with maximal 64 EEW, F and D extension).
    FnVarFeature_Riscv64_Zve64f = 211, // 'Zve64f' (Vector Extensions for Embedded Processors with maximal 64 EEW and F extension).
    FnVarFeature_Riscv64_Zve64x = 212, // 'Zve64x' (Vector Extensions for Embedded Processors with maximal 64 EEW).
    FnVarFeature_Riscv64_Zvfbfmin = 213, // 'Zvbfmin' (Vector BF16 Converts).
    FnVarFeature_Riscv64_Zvfbfwma = 214, // 'Zvfbfwma' (Vector BF16 widening mul-add).
    FnVarFeature_Riscv64_Zvfh = 215, // 'Zvfh' (Vector Half-Precision Floating-Point).
    FnVarFeature_Riscv64_Zvfhmin = 216, // 'Zvfhmin' (Vector Half-Precision Floating-Point Minimal).
    FnVarFeature_Riscv64_Zvkb = 217, // 'Zvkb' (Vector Bit-manipulation used in Cryptography).
    FnVarFeature_Riscv64_Zvkg = 218, // 'Zvkg' (Vector GCM instructions for Cryptography).
    FnVarFeature_Riscv64_Zvkn = 219, // 'Zvkn' (shorthand for 'Zvkned', 'Zvknhb', 'Zvkb', and 'Zvkt').
    FnVarFeature_Riscv64_Zvknc = 220, // 'Zvknc' (shorthand for 'Zvknc' and 'Zvbc').
    FnVarFeature_Riscv64_Zvkned = 221, // 'Zvkned' (Vector AES Encryption & Decryption (Single Round)).
    FnVarFeature_Riscv64_Zvkng = 222, // 'zvkng' (shorthand for 'Zvkn' and 'Zvkg').
    FnVarFeature_Riscv64_Zvknha = 223, // 'Zvknha' (Vector SHA-2 (SHA-256 only)).
    FnVarFeature_Riscv64_Zvknhb = 224, // 'Zvknhb' (Vector SHA-2 (SHA-256 and SHA-512)).
    FnVarFeature_Riscv64_Zvks = 225, // 'Zvks' (shorthand for 'Zvksed', 'Zvksh', 'Zvkb', and 'Zvkt').
    FnVarFeature_Riscv64_Zvksc = 226, // 'Zvksc' (shorthand for 'Zvks' and 'Zvbc').
    FnVarFeature_Riscv64_Zvksed = 227, // 'Zvksed' (SM4 Block Cipher Instructions).
    FnVarFeature_Riscv64_Zvksg = 228, // 'Zvksg' (shorthand for 'Zvks' and 'Zvkg').
    FnVarFeature_Riscv64_Zvksh = 229, // 'Zvksh' (SM3 Hash Function Instructions).
    FnVarFeature_Riscv64_Zvkt = 230, // 'Zvkt' (Vector Data-Independent Execution Latency).
    FnVarFeature_Riscv64_Zvl1024b = 231, // 'Zvl' (Minimum Vector Length) 1024.
    FnVarFeature_Riscv64_Zvl128b = 232, // 'Zvl' (Minimum Vector Length) 128.
    FnVarFeature_Riscv64_Zvl16384b = 233, // 'Zvl' (Minimum Vector Length) 16384.
    FnVarFeature_Riscv64_Zvl2048b = 234, // 'Zvl' (Minimum Vector Length) 2048.
    FnVarFeature_Riscv64_Zvl256b = 235, // 'Zvl' (Minimum Vector Length) 256.
    FnVarFeature_Riscv64_Zvl32768b = 236, // 'Zvl' (Minimum Vector Length) 32768.
    FnVarFeature_Riscv64_Zvl32b = 237, // 'Zvl' (Minimum Vector Length) 32.
    FnVarFeature_Riscv64_Zvl4096b = 238, // 'Zvl' (Minimum Vector Length) 4096.
    FnVarFeature_Riscv64_Zvl512b = 239, // 'Zvl' (Minimum Vector Length) 512.
    FnVarFeature_Riscv64_Zvl64b = 240, // 'Zvl' (Minimum Vector Length) 64.
    FnVarFeature_Riscv64_Zvl65536b = 241, // 'Zvl' (Minimum Vector Length) 65536.
    FnVarFeature_Riscv64_Zvl8192b = 242, // 'Zvl' (Minimum Vector Length) 8192.
    FnVarFeature_Riscv64_Max = 0x7fffffff,
} FnVarFeature_Riscv64;

// Architecture Categories

typedef enum FnVarArchCategory_ {
    FnVarArchCategory_Unknown = 0, // Unknown category
    FnVarArchCategory_Cpu = 1, // Central processing unit
    FnVarArchCategory_Gpu = 2, // Graphics processing unit
    FnVarArchCategory_Npu = 3, // Neural processing unit (AI accelerator)
    FnVarArchCategory_Max = 0x7fffffff,
} FnVarArchCategory;

// Architecture Families

typedef enum FnVarArchFamily_Unknown_ {
    FnVarArchFamily_Unknown_Generic = 0, // Generic family
    FnVarArchFamily_Unknown_Max = 0x7fffffff,
} FnVarArchFamily_Unknown;

typedef enum FnVarArchFamily_Cpu_ {
    FnVarArchFamily_Cpu_Generic = 0, // Generic CPU
    FnVarArchFamily_Cpu_Intel = 1, // Intel main line of CPUs
    FnVarArchFamily_Cpu_IntelAtom = 2, // Intel Atom/Low-power line of CPUs
    FnVarArchFamily_Cpu_Amd = 3, // AMD CPU
    FnVarArchFamily_Cpu_ArmA = 4, // ARM Cortex-A CPU family
    FnVarArchFamily_Cpu_ArmM = 5, // ARM Cortex-M CPU family
    FnVarArchFamily_Cpu_ArmR = 6, // ARM Cortex-R CPU family
    FnVarArchFamily_Cpu_Max = 0x7fffffff,
} FnVarArchFamily_Cpu;

typedef enum FnVarArchFamily_Gpu_ {
    FnVarArchFamily_Gpu_Generic = 0, // Generic GPU
    FnVarArchFamily_Gpu_Intel = 1, // Intel GPU
    FnVarArchFamily_Gpu_Amd = 2, // AMD GPU
    FnVarArchFamily_Gpu_Nvidia = 3, // NVIDIA GPU
    FnVarArchFamily_Gpu_Max = 0x7fffffff,
} FnVarArchFamily_Gpu;

typedef enum FnVarArchFamily_Npu_ {
    FnVarArchFamily_Npu_Generic = 0, // Generic NPU
    FnVarArchFamily_Npu_Intel = 1, // Intel NPU
    FnVarArchFamily_Npu_AmdXdna = 2, // AMD XDNA NPU
    FnVarArchFamily_Npu_Max = 0x7fffffff,
} FnVarArchFamily_Npu;

// Architectures

typedef enum FnVarArch_Unknown_Generic_ {
    FnVarArch_Unknown_Generic_Any = 0, // Any architecture
    FnVarArch_Unknown_Generic_Max = 0x7fffffff,
} FnVarArch_Unknown_Generic;

typedef enum FnVarArch_Cpu_Generic_ {
    FnVarArch_Cpu_Generic_Any = 0, // Any CPU
    FnVarArch_Cpu_Generic_Max = 0x7fffffff,
} FnVarArch_Cpu_Generic;

typedef enum FnVarArch_Cpu_Intel_ {
    FnVarArch_Cpu_Intel_Any = 0, // Any Intel CPU
    FnVarArch_Cpu_Intel_Nhm = 1, // Intel Nehalem microarchitecture
    FnVarArch_Cpu_Intel_Wsm = 2, // Intel Westmere microarchitecture
    FnVarArch_Cpu_Intel_Sdb = 3, // Intel Sandy Bridge microarchitecture
    FnVarArch_Cpu_Intel_Ivb = 4, // Intel Ivy Bridge microarchitecture
    FnVarArch_Cpu_Intel_Hsw = 5, // Intel Haswell microarchitecture
    FnVarArch_Cpu_Intel_Bdw = 6, // Intel Broadwell microarchitecture
    FnVarArch_Cpu_Intel_Skl = 7, // Intel Skylake microarchitecture
    FnVarArch_Cpu_Intel_Pmc = 8, // Intel Palm Cove microarchitecture
    FnVarArch_Cpu_Intel_Snc = 9, // Intel Sunny Cove microarchitecture
    FnVarArch_Cpu_Intel_Wlc = 10, // Intel Willow Cove microarchitecture
    FnVarArch_Cpu_Intel_Cpc = 11, // Intel Cypress Cove microarchitecture
    FnVarArch_Cpu_Intel_Gdc = 12, // Intel Golden Cove microarchitecture
    FnVarArch_Cpu_Intel_Rpc = 13, // Intel Raptor Cove microarchitecture
    FnVarArch_Cpu_Intel_Rdc = 14, // Intel Redwood Cove microarchitecture
    FnVarArch_Cpu_Intel_Lnc = 15, // Intel Lion Cove microarchitecture
    FnVarArch_Cpu_Intel_Max = 0x7fffffff,
} FnVarArch_Cpu_Intel;

typedef enum FnVarArch_Cpu_IntelAtom_ {
    FnVarArch_Cpu_IntelAtom_Any = 0, // Any Intel Atom/Low-power CPU
    FnVarArch_Cpu_IntelAtom_Bnl = 1, // Intel Bonnell microarchitecture
    FnVarArch_Cpu_IntelAtom_Slw = 2, // Intel Saltwell microarchitecture
    FnVarArch_Cpu_IntelAtom_Svm = 3, // Intel Silvermont microarchitecture
    FnVarArch_Cpu_IntelAtom_Aim = 4, // Intel Airmont microarchitecture
    FnVarArch_Cpu_IntelAtom_Gdm = 5, // Intel Goldmont microarchitecture
    FnVarArch_Cpu_IntelAtom_GdmP = 6, // Intel Goldmont Plus microarchitecture
    FnVarArch_Cpu_IntelAtom_Trm = 7, // Intel Tremont microarchitecture
    FnVarArch_Cpu_IntelAtom_Gcm = 8, // Intel Gracemont microarchitecture
    FnVarArch_Cpu_IntelAtom_Csm = 9, // Intel Crestmont microarchitecture
    FnVarArch_Cpu_IntelAtom_Skm = 10, // Intel Skymont microarchitecture
    FnVarArch_Cpu_IntelAtom_Max = 0x7fffffff,
} FnVarArch_Cpu_IntelAtom;

typedef enum FnVarArch_Cpu_Amd_ {
    FnVarArch_Cpu_Amd_Any = 0, // Any AMD CPU
    FnVarArch_Cpu_Amd_Max = 0x7fffffff,
} FnVarArch_Cpu_Amd;

typedef enum FnVarArch_Cpu_ArmA_ {
    FnVarArch_Cpu_ArmA_Any = 0, // Any CPU microarchitecture from the ARM Cortex-A family
    FnVarArch_Cpu_ArmA_A8 = 1, // ARM Cortex-A8 (32-bit)
    FnVarArch_Cpu_ArmA_A9 = 2, // ARM Cortex-A9 (32-bit)
    FnVarArch_Cpu_ArmA_A5 = 3, // ARM Cortex-A5 (32-bit)
    FnVarArch_Cpu_ArmA_A15 = 4, // ARM Cortex-A15 (32-bit)
    FnVarArch_Cpu_ArmA_A7 = 5, // ARM Cortex-A7 (32-bit)
    FnVarArch_Cpu_ArmA_A53 = 6, // ARM Cortex-A53 (32/64-bit)
    FnVarArch_Cpu_ArmA_A57 = 7, // ARM Cortex-A57 (32/64-bit)
    FnVarArch_Cpu_ArmA_A12 = 8, // ARM Cortex-A12 (32-bit)
    FnVarArch_Cpu_ArmA_A17 = 9, // ARM Cortex-A17 (32-bit)
    FnVarArch_Cpu_ArmA_A32 = 10, // ARM Cortex-A32 (32-bit)
    FnVarArch_Cpu_ArmA_A34 = 11, // ARM Cortex-A34 (64-bit)
    FnVarArch_Cpu_ArmA_A73 = 12, // ARM Cortex-A73 (32/64-bit)
    FnVarArch_Cpu_ArmA_A55 = 13, // ARM Cortex-A55 (32/64-bit)
    FnVarArch_Cpu_ArmA_A75 = 14, // ARM Cortex-A75 (32/64-bit)
    FnVarArch_Cpu_ArmA_A65 = 15, // ARM Cortex-A65 (64-bit)
    FnVarArch_Cpu_ArmA_A76 = 16, // ARM Cortex-A76 (32/64-bit)
    FnVarArch_Cpu_ArmA_A77 = 17, // ARM Cortex-A77 (32/64-bit)
    FnVarArch_Cpu_ArmA_A78 = 18, // ARM Cortex-A78 (32/64-bit)
    FnVarArch_Cpu_ArmA_A78ae = 19, // ARM Cortex-A78AE (32/64-bit)
    FnVarArch_Cpu_ArmA_A510 = 20, // ARM Cortex-A510 (64-bit)
    FnVarArch_Cpu_ArmA_A710 = 21, // ARM Cortex-A710 (32/64-bit)
    FnVarArch_Cpu_ArmA_A510r = 22, // ARM Cortex-A510 (refresh) (32/64-bit)
    FnVarArch_Cpu_ArmA_A715 = 23, // ARM Cortex-A715 (64-bit)
    FnVarArch_Cpu_ArmA_A520 = 24, // ARM Cortex-A520 (64-bit)
    FnVarArch_Cpu_ArmA_A720 = 25, // ARM Cortex-A720 (64-bit)
    FnVarArch_Cpu_ArmA_A520ae = 26, // ARM Cortex-A520AE (64-bit)
    FnVarArch_Cpu_ArmA_A720ae = 27, // ARM Cortex-A720AE (64-bit)
    FnVarArch_Cpu_ArmA_A725 = 28, // ARM Cortex-A725 (64-bit)
    FnVarArch_Cpu_ArmA_A320 = 29, // ARM Cortex-A320 (64-bit)
    FnVarArch_Cpu_ArmA_A530 = 30, // ARM Cortex-A530 (64-bit)
    FnVarArch_Cpu_ArmA_A730 = 31, // ARM Cortex-A730 (64-bit)
    FnVarArch_Cpu_ArmA_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmA;

typedef enum FnVarArch_Cpu_ArmM_ {
    FnVarArch_Cpu_ArmM_Any = 0, // Any CPU microarchitecture from the ARM Cortex-M family
    FnVarArch_Cpu_ArmM_M3 = 1, // ARM Cortex-M3
    FnVarArch_Cpu_ArmM_M1 = 2, // ARM Cortex-M1
    FnVarArch_Cpu_ArmM_M0 = 3, // ARM Cortex-M0
    FnVarArch_Cpu_ArmM_M4 = 4, // ARM Cortex-M4
    FnVarArch_Cpu_ArmM_M0p = 5, // ARM Cortex-M0+
    FnVarArch_Cpu_ArmM_M7 = 6, // ARM Cortex-M7
    FnVarArch_Cpu_ArmM_M23 = 7, // ARM Cortex-M23
    FnVarArch_Cpu_ArmM_M33 = 8, // ARM Cortex-M33
    FnVarArch_Cpu_ArmM_M35p = 9, // ARM Cortex-M35P
    FnVarArch_Cpu_ArmM_M55 = 10, // ARM Cortex-M55
    FnVarArch_Cpu_ArmM_M85 = 11, // ARM Cortex-M85
    FnVarArch_Cpu_ArmM_M52 = 12, // ARM Cortex-M52
    FnVarArch_Cpu_ArmM_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmM;

typedef enum FnVarArch_Cpu_ArmR_ {
    FnVarArch_Cpu_ArmR_Any = 0, // Any CPU microarchitecture from the ARM Cortex-R family
    FnVarArch_Cpu_ArmR_R4 = 1, // ARM Cortex-R4 (32-bit)
    FnVarArch_Cpu_ArmR_R5 = 2, // ARM Cortex-R5 (32-bit)
    FnVarArch_Cpu_ArmR_R7 = 3, // ARM Cortex-R7 (32-bit)
    FnVarArch_Cpu_ArmR_R8 = 4, // ARM Cortex-R8 (32-bit)
    FnVarArch_Cpu_ArmR_R52 = 5, // ARM Cortex-R52 (32-bit)
    FnVarArch_Cpu_ArmR_R82 = 6, // ARM Cortex-R82 (64-bit)
    FnVarArch_Cpu_ArmR_R52p = 7, // ARM Cortex-R52+ (32-bit)
    FnVarArch_Cpu_ArmR_Max = 0x7fffffff,
} FnVarArch_Cpu_ArmR;

typedef enum FnVarArch_Gpu_Generic_ {
    FnVarArch_Gpu_Generic_Any = 0, // Any GPU
    FnVarArch_Gpu_Generic_Max = 0x7fffffff,
} FnVarArch_Gpu_Generic;

typedef enum FnVarArch_Gpu_Intel_ {
    FnVarArch_Gpu_Intel_Any = 0, // Any Intel GPU
    FnVarArch_Gpu_Intel_Bdw = 1, // Broadwell Intel graphics architecture
    FnVarArch_Gpu_Intel_V800 = 1, // Broadwell Intel graphics architecture
    FnVarArch_Gpu_Intel_Skl = 2, // Skylake Intel graphics architecture
    FnVarArch_Gpu_Intel_V909 = 2, // Skylake Intel graphics architecture
    FnVarArch_Gpu_Intel_Kbl = 3, // Kaby Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V919 = 3, // Kaby Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Cfl = 4, // Coffee Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V929 = 4, // Coffee Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Apl = 5, // Apollo Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V930 = 5, // Apollo Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Bxt = 5, // Broxton Intel graphics architecture
    FnVarArch_Gpu_Intel_Glk = 6, // Gemini Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V940 = 6, // Gemini Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Whl = 7, // Whiskey Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V950 = 7, // Whiskey Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Aml = 8, // Amber Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V960 = 8, // Amber Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Cml = 9, // Comet Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V970 = 9, // Comet Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Icllp = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Icl = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1100 = 10, // Ice Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Ehl = 11, // Elkhart Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1120 = 11, // Elkhart Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Jsl = 11, // Jasper Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Tgllp = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Tgl = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1200 = 12, // Tiger Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_Rkl = 13, // Rocket Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V1210 = 13, // Rocket Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlS = 14, // Alder Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_V1220 = 14, // Alder Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_RplS = 14, // Raptor Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlP = 15, // Alder Lake P Intel graphics architecture
    FnVarArch_Gpu_Intel_V1230 = 15, // Alder Lake P Intel graphics architecture
    FnVarArch_Gpu_Intel_AdlN = 16, // Alder Lake N Intel graphics architecture
    FnVarArch_Gpu_Intel_V1240 = 16, // Alder Lake N Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg1 = 17, // DG1 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12100 = 17, // DG1 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG10 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G10 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12558 = 18, // Alchemist G10 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG11 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G11 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12565 = 19, // Alchemist G11 Intel graphics architecture
    FnVarArch_Gpu_Intel_AcmG12 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_Dg2G12 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_V12570 = 20, // Alchemist G12 Intel graphics architecture
    FnVarArch_Gpu_Intel_Pvc = 21, // Ponte Vecchio Intel graphics architecture
    FnVarArch_Gpu_Intel_V12607 = 21, // Ponte Vecchio Intel graphics architecture
    FnVarArch_Gpu_Intel_PvcVg = 22, // Ponte Vecchio VG Intel graphics architecture
    FnVarArch_Gpu_Intel_V12617 = 22, // Ponte Vecchio VG Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlU = 23, // Meteor Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlS = 23, // Meteor Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlU = 23, // Arrow Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlS = 23, // Arrow Lake S Intel graphics architecture
    FnVarArch_Gpu_Intel_V12704 = 23, // Meteor Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_MtlH = 24, // Meteor Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V12714 = 24, // Meteor Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_ArlH = 25, // Arrow Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V12744 = 25, // Arrow Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_BmgG21 = 26, // Battlemage G21 Intel graphics architecture
    FnVarArch_Gpu_Intel_V2014 = 26, // Battlemage G21 Intel graphics architecture
    FnVarArch_Gpu_Intel_LnlM = 27, // Lunar Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_V2044 = 27, // Lunar Lake Intel graphics architecture
    FnVarArch_Gpu_Intel_PtlH = 28, // Panther Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_V3004 = 28, // Panther Lake H Intel graphics architecture
    FnVarArch_Gpu_Intel_PtlU = 29, // Panther Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_V3011 = 29, // Panther Lake U Intel graphics architecture
    FnVarArch_Gpu_Intel_Max = 0x7fffffff,
} FnVarArch_Gpu_Intel;

typedef enum FnVarArch_Gpu_Amd_ {
    FnVarArch_Gpu_Amd_Any = 0, // Any AMD GPU
    FnVarArch_Gpu_Amd_Gfx700 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx701 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx702 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx703 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx704 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx705 = 1, // AMD GCN 2.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx801 = 2, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx802 = 2, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx803 = 3, // AMD GCN 4.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx805 = 4, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx810 = 4, // AMD GCN 3.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx900 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx902 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx904 = 5, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx906 = 6, // AMD GCN 5.1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx908 = 7, // AMD CDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx909 = 8, // AMD GCN 5.0 microarchitecture
    FnVarArch_Gpu_Amd_Gfx90a = 9, // AMD CDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx90c = 10, // AMD GCN 5.1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx940 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx941 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx942 = 11, // AMD CDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1010 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1011 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1012 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1013 = 12, // AMD RDNA 1 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1030 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1031 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1032 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1033 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1034 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1035 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1036 = 13, // AMD RDNA 2 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1100 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1101 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1102 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1103 = 14, // AMD RDNA 3 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1150 = 15, // AMD RDNA 3.5 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1151 = 15, // AMD RDNA 3.5 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1200 = 16, // AMD RDNA 4 microarchitecture
    FnVarArch_Gpu_Amd_Gfx1201 = 16, // AMD RDNA 4 microarchitecture
    FnVarArch_Gpu_Amd_Max = 0x7fffffff,
} FnVarArch_Gpu_Amd;

typedef enum FnVarArch_Gpu_Nvidia_ {
    FnVarArch_Gpu_Nvidia_Any = 0, // Any NVIDIA GPU
    FnVarArch_Gpu_Nvidia_Sm50 = 1, // NVIDIA Maxwell microarchitecture (compute capability 5.0)
    FnVarArch_Gpu_Nvidia_Sm52 = 2, // NVIDIA Maxwell microarchitecture (compute capability 5.2)
    FnVarArch_Gpu_Nvidia_Sm53 = 3, // NVIDIA Maxwell microarchitecture (compute capability 5.3)
    FnVarArch_Gpu_Nvidia_Sm60 = 4, // NVIDIA Pascal microarchitecture (compute capability 6.0)
    FnVarArch_Gpu_Nvidia_Sm61 = 5, // NVIDIA Pascal microarchitecture (compute capability 6.1)
    FnVarArch_Gpu_Nvidia_Sm62 = 6, // NVIDIA Pascal microarchitecture (compute capability 6.2)
    FnVarArch_Gpu_Nvidia_Sm70 = 6, // NVIDIA Volta microarchitecture (compute capability 7.0)
    FnVarArch_Gpu_Nvidia_Sm72 = 7, // NVIDIA Volta microarchitecture (compute capability 7.2)
    FnVarArch_Gpu_Nvidia_Sm75 = 8, // NVIDIA Turing microarchitecture (compute capability 7.5)
    FnVarArch_Gpu_Nvidia_Sm80 = 9, // NVIDIA Ampere microarchitecture (compute capability 8.0)
    FnVarArch_Gpu_Nvidia_Sm86 = 10, // NVIDIA Ampere microarchitecture (compute capability 8.6)
    FnVarArch_Gpu_Nvidia_Sm87 = 11, // NVIDIA Jetson/Drive AGX Orin microarchitecture
    FnVarArch_Gpu_Nvidia_Sm89 = 12, // NVIDIA Ada Lovelace arhitecture
    FnVarArch_Gpu_Nvidia_Sm90 = 13, // NVIDIA Hopper arhitecture
    FnVarArch_Gpu_Nvidia_Sm90a = 13, // NVIDIA Hopper arhitecture
    FnVarArch_Gpu_Nvidia_Max = 0x7fffffff,
} FnVarArch_Gpu_Nvidia;

typedef enum FnVarArch_Npu_Generic_ {
    FnVarArch_Npu_Generic_Any = 0, // Any NPU
    FnVarArch_Npu_Generic_Max = 0x7fffffff,
} FnVarArch_Npu_Generic;

typedef enum FnVarArch_Npu_Intel_ {
    FnVarArch_Npu_Intel_Any = 0, // Any Intel NPU
    FnVarArch_Npu_Intel_Mtl = 1, // Intel NPU used in Meteor Lake processors
    FnVarArch_Npu_Intel_Lnl = 2, // Intel NPU used in Lunar Lake processors
    FnVarArch_Npu_Intel_Max = 0x7fffffff,
} FnVarArch_Npu_Intel;

typedef enum FnVarArch_Npu_AmdXdna_ {
    FnVarArch_Npu_AmdXdna_Any = 0, // Any AMD XDNA architecture
    FnVarArch_Npu_AmdXdna_Max = 0x7fffffff,
} FnVarArch_Npu_AmdXdna;
