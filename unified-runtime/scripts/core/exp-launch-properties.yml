#
# Copyright (C) 2024 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime Experimental APIs for (kernel) Launch Properties"
ordinal: "99"
--- #--------------------------------------------------------------------------
type: macro
desc: "The extension string that defines support for the Launch Properties extension, which is returned when querying device extensions."
name: $X_LAUNCH_PROPERTIES_EXTENSION_STRING_EXP
value: "\"$x_exp_launch_properties\""
--- #--------------------------------------------------------------------------
type: enum
desc: "Specifies a launch property id"
name: $x_exp_launch_property_id_t
analogue:
    - "**CUlaunchAttributeID**"
etors:
    - name: IGNORE
      desc: "The property has no effect"
    - name: COOPERATIVE
      desc: "Whether to launch a cooperative kernel"
    - name: CLUSTER_DIMENSION
      desc: "work-group cluster dimensions"
    - name: WORK_GROUP_MEMORY
      desc: "Implicit work group memory allocation"
--- #--------------------------------------------------------------------------
type: union
desc: "Specifies a launch property value"
name: $x_exp_launch_property_value_t
tag: $x_exp_launch_property_id_t
analogue:
    - "**CUlaunchAttributeValue**"
members:
    - type: uint32_t[3]
      name: clusterDim
      desc: "[in] dimensions of the cluster (units of work-group) (x, y, z). Each value must be a divisor of the corresponding global work-size dimension (in units of work-group)."
      tag: $X_EXP_LAUNCH_PROPERTY_ID_CLUSTER_DIMENSION
    - type: int
      name: cooperative
      desc: "[in] non-zero value indicates a cooperative kernel"
      tag: $X_EXP_LAUNCH_PROPERTY_ID_COOPERATIVE
    - type: size_t
      name: workgroup_mem_size
      desc: "[in] non-zero value indicates the amount of work group memory to allocate in bytes"
      tag: $X_EXP_LAUNCH_PROPERTY_ID_WORK_GROUP_MEMORY
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel launch property"
name: $x_exp_launch_property_t
analogue:
    - "**cuLaunchAttribute**"
members:
    - type: $x_exp_launch_property_id_t
      name: id
      desc: "[in] launch property id"
      init: $X_EXP_LAUNCH_PROPERTY_ID_IGNORE
    - type: $x_exp_launch_property_value_t
      name: value
      desc: "[in][tagged_by(id)] launch property value"
      init: nullptr
--- #--------------------------------------------------------------------------
type: function
desc: "Launch kernel with custom launch properties"
class: $xEnqueue
name: KernelLaunchCustomExp
ordinal: "0"
analogue:
    - "**cuLaunchKernelEx**"
details:
    - "Launches the kernel using the specified launch properties"
    - "If numPropsInLaunchPropList == 0 then a regular kernel launch is used: `urEnqueueKernelLaunch`"
    - "Consult the appropriate adapter driver documentation for details of adapter specific behavior and native error codes that may be returned."
params:
    - type: $x_queue_handle_t
      name: hQueue
      desc: "[in] handle of the queue object"
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: uint32_t
      name: workDim
      desc: "[in] number of dimensions, from 1 to 3, to specify the global and work-group work-items"
    - type: "const size_t*"
      name: pGlobalWorkOffset
      desc: "[in] pointer to an array of workDim unsigned values that specify the offset used to calculate the global ID of a work-item"
    - type: const size_t*
      name: pGlobalWorkSize
      desc: "[in] pointer to an array of workDim unsigned values that specify the number of global work-items in workDim that will execute the kernel function"
    - type: const size_t*
      name: pLocalWorkSize
      desc: "[in][optional] pointer to an array of workDim unsigned values that specify the number of local work-items forming a work-group that will execute the kernel function. If nullptr, the runtime implementation will choose the work-group size."
    - type: uint32_t
      name: numPropsInLaunchPropList
      desc: "[in] size of the launch prop list"
    - type: const $x_exp_launch_property_t*
      name: launchPropList
      desc: "[in][range(0, numPropsInLaunchPropList)] pointer to a list of launch properties"
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] size of the event wait list"
    - type: const $x_event_handle_t*
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the kernel execution. If nullptr, the numEventsInWaitList must be 0, indicating that no wait event. "
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that identifies this particular kernel execution instance. If phEventWaitList and phEvent are not NULL, phEvent must not refer to an element of the phEventWaitList array."
returns:
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_UNINITIALIZED
    - $X_RESULT_ERROR_DEVICE_LOST
    - $X_RESULT_ERROR_ADAPTER_SPECIFIC
    - $X_RESULT_ERROR_INVALID_NULL_HANDLE:
        - "NULL == hQueue"
        - "NULL == hKernel"
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "NULL == pGlobalWorkSize"
        - "numPropsInLaunchpropList != 0 && launchPropList == NULL"
    - $X_RESULT_ERROR_INVALID_QUEUE
    - $X_RESULT_ERROR_INVALID_KERNEL
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "phEventWaitList == NULL && numEventsInWaitList > 0"
        - "phEventWaitList != NULL && numEventsInWaitList == 0"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_IN_EVENT_LIST_EXEC_STATUS:
        - "An event in phEventWaitList has $X_EVENT_STATUS_ERROR"
    - $X_RESULT_ERROR_INVALID_WORK_DIMENSION
    - $X_RESULT_ERROR_INVALID_WORK_GROUP_SIZE
    - $X_RESULT_ERROR_INVALID_VALUE
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: enum
extend: true
typed_etors: true
desc: "Extension enums to $x_device_info_t to support arch specific launch properties."
name: $x_device_info_t
etors:
    - name: CLUSTER_LAUNCH_EXP
      value: "0x1111"
      desc: "[$x_bool_t] return true if enqueue Cluster Launch is supported"
