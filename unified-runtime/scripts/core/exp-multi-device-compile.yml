#
# Copyright (C) 2023 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime Experimental APIs for multi-device compile"
ordinal: "99"
--- #--------------------------------------------------------------------------
type: enum
extend: true
typed_etors: true
desc: "Extension enums for $x_device_info_t to support multi device compile."
name: $x_device_info_t
etors:
    - name: MULTI_DEVICE_COMPILE_SUPPORT_EXP
      value: "0x6000"
      desc: "[$x_bool_t] Returns true if the device supports the multi device compile experimental feature."
--- #--------------------------------------------------------------------------
type: enum
desc: "Program operation behavior control flags"
class: $xProgram
name: $x_exp_program_flags_t
etors:
    - name: ALLOW_UNRESOLVED_SYMBOLS
      desc: "Allow unresolved symbols in the program resulting from the corresponding operation"
      value: "$X_BIT(0)"
--- #--------------------------------------------------------------------------
type: function
desc: "Produces an executable program from one program, negates need for the linking step."
class: $xProgram
name: BuildExp
ordinal: "2"
decl: static
analogue:
    - "**clBuildProgram**"
details:
    - "The application may call this function from simultaneous threads."
    - "Following a successful call to this entry point, the program passed will contain a binary of the $X_PROGRAM_BINARY_TYPE_EXECUTABLE type for each device in `phDevices`."
params:
    - type: $x_program_handle_t
      name: hProgram
      desc: "[in] Handle of the program to build."
    - type: uint32_t
      name: numDevices
      desc: "[in] number of devices"
    - type: $x_device_handle_t*
      name: phDevices
      desc: "[in][range(0, numDevices)] pointer to array of device handles"
    - type: $x_exp_program_flags_t
      name: flags
      desc: "[in] program information flags"
    - type: const char*
      name: pOptions
      desc: "[in][optional] pointer to build options null-terminated string."
returns:
    - $X_RESULT_ERROR_INVALID_PROGRAM:
      - "If `hProgram` isn't a valid program object."
    - $X_RESULT_ERROR_PROGRAM_BUILD_FAILURE:
      - "If an error occurred when building `hProgram`."

--- #--------------------------------------------------------------------------
type: function
desc: "Produces an executable program from one or more programs."
class: $xProgram
name: CompileExp
decl: static
ordinal: "3"
analogue:
    - "**clCompileProgram**"
details:
    - "The application may call this function from simultaneous threads."
    - "Following a successful call to this entry point `hProgram` will contain a binary of the $X_PROGRAM_BINARY_TYPE_COMPILED_OBJECT type for each device in `phDevices`."
params:
    - type: $x_program_handle_t
      name: hProgram
      desc: "[in][out] handle of the program to compile."
    - type: uint32_t
      name: numDevices
      desc: "[in] number of devices"
    - type: $x_device_handle_t*
      name: phDevices
      desc: "[in][range(0, numDevices)] pointer to array of device handles"
    - type: $x_exp_program_flags_t
      name: flags
      desc: "[in] program information flags"
    - type: const char*
      name: pOptions
      desc: "[in][optional] pointer to build options null-terminated string."
returns:
    - $X_RESULT_ERROR_INVALID_PROGRAM:
      - "If `hProgram` isn't a valid program object."
    - $X_RESULT_ERROR_PROGRAM_BUILD_FAILURE:
      - "If an error occurred while compiling `hProgram`."

--- #--------------------------------------------------------------------------
type: function
desc: "Produces an executable program from one or more programs."
class: $xProgram
name: LinkExp
decl: static
ordinal: "4"
analogue:
    - "**clLinkProgram**"
details:
    - "The application may call this function from simultaneous threads."
    - "Following a successful call to this entry point the program returned in `phProgram` will contain a binary of the $X_PROGRAM_BINARY_TYPE_EXECUTABLE type for each device in `phDevices`."
    - "If a non-success code is returned, adapters may store a program in `phProgram`. This program should only be used with `$xProgramGetBuildInfo` to get the build log for the failure. Adapters which do not do not support producing build logs must set this value to `nullptr`."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context instance."
    - type: uint32_t
      name: numDevices
      desc: "[in] number of devices"
    - type: $x_device_handle_t*
      name: phDevices
      desc: "[in][range(0, numDevices)] pointer to array of device handles"
    - type: $x_exp_program_flags_t
      name: flags
      desc: "[in] program information flags"
    - type: uint32_t
      name: count
      desc: "[in] number of program handles in `phPrograms`."
    - type: const $x_program_handle_t*
      name: phPrograms
      desc: "[in][range(0, count)] pointer to array of program handles."
    - type: const char*
      name: pOptions
      desc: "[in][optional] pointer to linker options null-terminated string."
    - type: $x_program_handle_t*
      name: phProgram
      desc: "[out][alloc] pointer to handle of program object created."
returns:
    - $X_RESULT_ERROR_INVALID_PROGRAM:
      - "If one of the programs in `phPrograms` isn't a valid program object."
    - $X_RESULT_ERROR_INVALID_SIZE:
      - "`count == 0`"
    - $X_RESULT_ERROR_PROGRAM_LINK_FAILURE:
      - "If an error occurred while linking `phPrograms`."
