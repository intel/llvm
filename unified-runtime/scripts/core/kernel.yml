#
# Copyright (C) 2022 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime APIs for Program"
ordinal: "7"
--- #--------------------------------------------------------------------------
type: function
desc: "Create kernel object from a program."
class: $xKernel
name: Create
decl: static
ordinal: "0"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_program_handle_t
      name: hProgram
      desc: "[in] handle of the program instance"
    - type: const char*
      name: pKernelName
      desc: "[in] pointer to null-terminated string."
    - type: $x_kernel_handle_t*
      name: phKernel
      desc: "[out][alloc] pointer to handle of kernel object created."
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_NAME:
        - "If `pKernelName` wasn't found in `hProgram`."
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetArgValue."
class: $xKernel
name: $x_kernel_arg_value_properties_t
base: $x_base_properties_t
members: []
--- #--------------------------------------------------------------------------
type: function
desc: "Set kernel argument to a value."
class: $xKernel
name: SetArgValue
details:
    - "The application may call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of argument type"
    - type: "const $x_kernel_arg_value_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to value properties."
    - type: "const void*"
      name: pArgValue
      desc: |
         [in] argument value represented as matching arg type.
         The data pointed to will be copied and therefore can be reused on return.
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetArgLocal."
class: $xKernel
name: $x_kernel_arg_local_properties_t
base: $x_base_properties_t
members: []
--- #--------------------------------------------------------------------------
type: function
desc: "Set kernel argument to a local buffer."
class: $xKernel
name: SetArgLocal
details:
    - "The application may call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "size_t"
      name: argSize
      desc: "[in] size of the local buffer to be allocated by the runtime"
    - type: "const $x_kernel_arg_local_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to local buffer properties."
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE
--- #--------------------------------------------------------------------------
type: enum
desc: "Get Kernel object information"
class: $xKernel
name: $x_kernel_info_t
typed_etors: True
etors:
    - name: FUNCTION_NAME
      desc: "[char[]] Return null-terminated kernel function name."
    - name: NUM_ARGS
      desc: "[uint32_t] Return Kernel number of arguments."
    - name: REFERENCE_COUNT
      desc: |
            [uint32_t] Reference count of the kernel object.
            The reference count returned should be considered immediately stale.
            It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.
    - name: CONTEXT
      desc: "[$x_context_handle_t] Return Context object associated with Kernel."
    - name: PROGRAM
      desc: "[$x_program_handle_t] Return Program object associated with Kernel."
    - name: ATTRIBUTES
      desc: "[char[]] Return null-terminated kernel attributes string."
    - name: NUM_REGS
      desc: "[uint32_t][optional-query] Return the number of registers used by the compiled kernel."
    - name: SPILL_MEM_SIZE
      desc: | 
            [uint32_t[]][optional-query] Return the spill memory size allocated by the compiler.
            The returned values correspond to the associated devices.
            The order of the devices is guaranteed (i.e., the same as queried by `urDeviceGet`)
            by the UR within a single application even if the runtime is reinitialized.
--- #--------------------------------------------------------------------------
type: enum
desc: "Get Kernel Work Group information"
class: $xKernel
name: $x_kernel_group_info_t
typed_etors: True
etors:
    - name: GLOBAL_WORK_SIZE
      desc: "[size_t[3]][optional-query] Return Work Group maximum global size"
    - name: WORK_GROUP_SIZE
      desc: "[size_t] Return maximum Work Group size"
    - name: COMPILE_WORK_GROUP_SIZE
      desc: "[size_t[3]] Return Work Group size required by the source code, such as __attribute__((required_work_group_size(X,Y,Z)), or (0, 0, 0) if unspecified"
    - name: LOCAL_MEM_SIZE
      desc: "[size_t] Return local memory required by the Kernel"
    - name: PREFERRED_WORK_GROUP_SIZE_MULTIPLE
      desc: "[size_t] Return preferred multiple of Work Group size for launch"
    - name: PRIVATE_MEM_SIZE
      desc: "[size_t] Return minimum amount of private memory in bytes used by each work item in the Kernel"
    - name: COMPILE_MAX_WORK_GROUP_SIZE
      desc: |
            [size_t[3]][optional-query] Return the maximum Work Group size guaranteed
            by the source code, or (0, 0, 0) if unspecified
    - name: COMPILE_MAX_LINEAR_WORK_GROUP_SIZE
      desc: |
            [size_t][optional-query] Return the maximum linearized Work Group size
            (X * Y * Z) guaranteed by the source code, or 0 if unspecified
--- #--------------------------------------------------------------------------
type: enum
desc: "Get Kernel SubGroup information"
class: $xKernel
name: $x_kernel_sub_group_info_t
typed_etors: True
etors:
    - name: MAX_SUB_GROUP_SIZE
      desc: "[uint32_t] Return maximum SubGroup size"
    - name: MAX_NUM_SUB_GROUPS
      desc: "[uint32_t] Return maximum number of SubGroup"
    - name: COMPILE_NUM_SUB_GROUPS
      desc: "[uint32_t] Return number of SubGroup required by the source code or 0 if unspecified"
    - name: SUB_GROUP_SIZE_INTEL
      desc: "[uint32_t] Return SubGroup size required by Intel"
--- #--------------------------------------------------------------------------
type: enum
desc: "Kernel Cache Configuration."
class: $xKernel
name: $x_kernel_cache_config_t
etors:
    - name: DEFAULT
      desc: "No preference for SLM or data cache."
    - name: LARGE_SLM
      desc: "Large Shared Local Memory (SLM) size."
    - name: LARGE_DATA
      desc: "Large General Data size."
--- #--------------------------------------------------------------------------
type: enum
desc: "Set additional Kernel execution information"
class: $xKernel
name: $x_kernel_exec_info_t
typed_etors: True
etors:
    - name: USM_INDIRECT_ACCESS
      desc: "[$x_bool_t] Kernel might access data through USM pointer."
    - name: USM_PTRS
      desc: "[void *[]] Provide an explicit array of USM pointers that the kernel will access."
    - name: CACHE_CONFIG
      desc: "[$x_kernel_cache_config_t] Provide the preferred cache configuration"
--- #--------------------------------------------------------------------------
type: function
desc: "Query information about a Kernel object"
class: $xKernel
name: GetInfo
ordinal: "0"
analogue:
    - "**clGetKernelInfo**"
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the Kernel object"
    - type: $x_kernel_info_t
      name: propName
      desc: "[in] name of the Kernel property to query"
    - type: "size_t"
      name: propSize
      desc: |
            [in] the size of the Kernel property value.
    - type: "void*"
      name: pPropValue
      desc: |
            [in,out][optional][typename(propName, propSize)] array of bytes holding the kernel info property.
            If propSize is not equal to or greater than the real number of bytes needed to return
            the info then the $X_RESULT_ERROR_INVALID_SIZE error is returned and pPropValue is not used.
    - type: "size_t*"
      name: "pPropSizeRet"
      desc: |
            [out][optional] pointer to the actual size in bytes of data being queried by propName.
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_ENUMERATION:
        - "If `propName` is not supported by the adapter."
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`propSize == 0 && pPropValue != NULL`"
        - "If `propSize` is less than the real number of bytes needed to return the info."
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "`propSize != 0 && pPropValue == NULL`"
        - "`pPropValue == NULL && pPropSizeRet == NULL`"
    - $X_RESULT_ERROR_INVALID_KERNEL
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Query work Group information about a Kernel object"
class: $xKernel
name: GetGroupInfo
ordinal: "0"
analogue:
    - "**clGetKernelWorkGroupInfo**"
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the Kernel object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the Device object"
    - type: $x_kernel_group_info_t
      name: propName
      desc: "[in] name of the work Group property to query"
    - type: "size_t"
      name: propSize
      desc: "[in] size of the Kernel Work Group property value"
    - type: "void*"
      name: pPropValue
      desc: "[in,out][optional][typename(propName, propSize)] value of the Kernel Work Group property."
    - type: "size_t*"
      name: "pPropSizeRet"
      desc: "[out][optional] pointer to the actual size in bytes of data being queried by propName."
--- #--------------------------------------------------------------------------
type: function
desc: "Query SubGroup information about a Kernel object"
class: $xKernel
name: GetSubGroupInfo
ordinal: "0"
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the Kernel object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the Device object"
    - type: $x_kernel_sub_group_info_t
      name: propName
      desc: "[in] name of the SubGroup property to query"
    - type: "size_t"
      name: propSize
      desc: "[in] size of the Kernel SubGroup property value"
    - type: "void*"
      name: pPropValue
      desc: "[in,out][optional][typename(propName, propSize)] value of the Kernel SubGroup property."
    - type: "size_t*"
      name: pPropSizeRet
      desc: |
            [out][optional] pointer to the actual size in bytes of data being queried by propName.
--- #--------------------------------------------------------------------------
type: function
desc: "Get a reference to the Kernel object."
class: $xKernel
name: Retain
decl: static
ordinal: "0"
analogue:
    - "**clRetainKernel**"
details:
    - "Get a reference to the Kernel object handle. Increment its reference count"
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in][retain] handle for the Kernel to retain"
--- #--------------------------------------------------------------------------
type: function
desc: "Release Kernel."
class: $xKernel
name: Release
decl: static
ordinal: "0"
analogue:
    - "**clReleaseKernel**"
details:
    - "Decrement reference count and destroy the Kernel if reference count becomes zero."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in][release] handle for the Kernel to release"
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetArgPointer."
class: $xKernel
name: $x_kernel_arg_pointer_properties_t
base: $x_base_properties_t
members: []
--- #--------------------------------------------------------------------------
type: function
desc: "Set a USM pointer as the argument value of a Kernel."
class: $xKernel
name: SetArgPointer
analogue:
    - "**clSetKernelArgSVMPointer**"
details:
    - "The application may call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "const $x_kernel_arg_pointer_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to USM pointer properties."
    - type: "const void*"
      name: pArgValue
      desc: "[in][optional] Pointer obtained by USM allocation or virtual memory mapping operation. If null then argument value is considered null."
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetExecInfo."
class: $xKernel
name: $x_kernel_exec_info_properties_t
base: $x_base_properties_t
members: []
--- #--------------------------------------------------------------------------
type: function
desc: "Set additional Kernel execution attributes."
class: $xKernel
name: SetExecInfo
analogue:
    - "**clSetKernelExecInfo**"
details:
    - "The application must **not** call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "$x_kernel_exec_info_t"
      name: propName
      desc: "[in] name of the execution attribute"
    - type: "size_t"
      name: propSize
      desc: "[in] size in byte the attribute value"
    - type: "const $x_kernel_exec_info_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to execution info properties."
    - type: "const void*"
      name: pPropValue
      desc: "[in][typename(propName, propSize)] pointer to memory location holding the property value."
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetArgSampler."
class: $xKernel
name: $x_kernel_arg_sampler_properties_t
base: $x_base_properties_t
members: []
--- #--------------------------------------------------------------------------
type: function
desc: "Set a Sampler object as the argument value of a Kernel."
class: $xKernel
name: SetArgSampler
details:
    - "The application may call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "const $x_kernel_arg_sampler_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to sampler properties."
    - type: "$x_sampler_handle_t"
      name: hArgValue
      desc: "[in] handle of Sampler object."
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelSetArgMemObj."
class: $xKernel
name: $x_kernel_arg_mem_obj_properties_t
base: $x_base_properties_t
members:
    - type: $x_mem_flags_t
      name: memoryAccess
      desc: "[in] Memory access flag. Allowed values are: $X_MEM_FLAG_READ_WRITE, $X_MEM_FLAG_WRITE_ONLY, $X_MEM_FLAG_READ_ONLY."
--- #--------------------------------------------------------------------------
type: function
desc: "Set a Memory object as the argument value of a Kernel."
class: $xKernel
name: SetArgMemObj
details:
    - "The application may call this function from simultaneous threads with the same kernel handle."
    - "The implementation of this function should be lock-free."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: "uint32_t"
      name: argIndex
      desc: "[in] argument index in range [0, num args - 1]"
    - type: "const $x_kernel_arg_mem_obj_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to Memory object properties."
    - type: "$x_mem_handle_t"
      name: hArgValue
      desc: "[in][optional] handle of Memory object."
returns:
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
--- #--------------------------------------------------------------------------
type: function
desc: "Set an array of specialization constants on a Kernel."
class: $xKernel
name: SetSpecializationConstants
details:
    - "This entry point is optional, the application should query for support with device query $X_DEVICE_INFO_KERNEL_SET_SPECIALIZATION_CONSTANTS passed to $xDeviceGetInfo."
    - "Adapters which are capable of setting specialization constants immediately prior to $xEnqueueKernelLaunch with low overhead should implement this entry point."
    - "Otherwise, if setting specialization constants late requires recompiling or linking a program, adapters should not implement this entry point."
    - "The application may call this function from simultaneous threads for the same device."
    - "The implementation of this function should be thread-safe."
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: uint32_t
      name: count
      desc: "[in] the number of elements in the pSpecConstants array"
    - type: const $x_specialization_constant_info_t*
      name: pSpecConstants
      desc: "[in] array of specialization constant value descriptions"
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`count == 0`"
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If $X_DEVICE_INFO_KERNEL_SET_SPECIALIZATION_CONSTANTS query is false"
    - $X_RESULT_ERROR_INVALID_VALUE:
        - "A pSpecConstant entry contains a size that does not match that of the specialization constant in the module."
        - "A pSpecConstant entry contains a nullptr pValue."
    - $X_RESULT_ERROR_INVALID_SPEC_ID:
        - "Any id specified in a pSpecConstant entry is not a valid specialization constant identifier."
--- #--------------------------------------------------------------------------
type: function
desc: "Return platform native kernel handle."
class: $xKernel
name: GetNativeHandle
decl: static
ordinal: "0"
details:
    - "Retrieved native handle can be used for direct interaction with the native platform driver."
    - "Use interoperability platform extensions to convert native handle to native type."
    - "The application may call this function from simultaneous threads for the same context."
    - "The implementation of this function should be thread-safe."
params:
    - type: "$x_kernel_handle_t"
      name: hKernel
      desc: |
            [in] handle of the kernel.
    - type: $x_native_handle_t*
      name: phNativeKernel
      desc: |
            [out] a pointer to the native handle of the kernel.
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the adapter has no underlying equivalent handle."
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties for for $xKernelCreateWithNativeHandle."
class: $xKernel
name: $x_kernel_native_properties_t
base: $x_base_properties_t
members:
    - type: bool
      name: isNativeHandleOwned
      desc: |
            [in] If true then ownership of the native handle is transferred to
            the resultant object. This means the object will be responsible for
            releasing the native resources at the end of its lifetime.
--- #--------------------------------------------------------------------------
type: function
desc: "Create runtime kernel object from native kernel handle."
class: $xKernel
name: CreateWithNativeHandle
decl: static
ordinal: "0"
details:
    - "Creates runtime kernel handle from native driver kernel handle."
    - "The application may call this function from simultaneous threads for the same context."
    - "The implementation of this function should be thread-safe."
    - "The implementation may require a valid program handle to return the native kernel handle"
params:
    - type: $x_native_handle_t
      name: hNativeKernel
      desc: |
            [in][nocheck] the native handle of the kernel.
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_program_handle_t
      name: hProgram
      desc: "[in][optional] handle of the program associated with the kernel"
    - type: "const $x_kernel_native_properties_t*"
      name: pProperties
      desc: "[in][optional] pointer to native kernel properties struct"
    - type: "$x_kernel_handle_t*"
      name: phKernel
      desc: |
            [out][alloc] pointer to the handle of the kernel object created.
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the adapter has no underlying equivalent handle."
    - $X_RESULT_ERROR_INVALID_NULL_HANDLE:
        - "If `hProgram == NULL` and the implementation requires a valid program."
--- #--------------------------------------------------------------------------
type: function
desc: "Get the suggested local work size for a kernel."
class: $xKernel
name: GetSuggestedLocalWorkSize
ordinal: "0"
details:
    - "Query a suggested local work size for a kernel given a global size for each dimension."
    - "The application may call this function from simultaneous threads for the same context."
params:
    - type: $x_kernel_handle_t
      name: hKernel
      desc: |
            [in] handle of the kernel
    - type: $x_queue_handle_t
      name: hQueue
      desc: |
            [in] handle of the queue object
    - type: uint32_t
      name: numWorkDim
      desc: |
            [in] number of dimensions, from 1 to 3, to specify the global
            and work-group work-items
    - type: const size_t*
      name: pGlobalWorkOffset
      desc: |
            [in] pointer to an array of numWorkDim unsigned values that specify
            the offset used to calculate the global ID of a work-item
    - type: const size_t*
      name: pGlobalWorkSize
      desc: |
            [in] pointer to an array of numWorkDim unsigned values that specify
            the number of global work-items in workDim that will execute the
            kernel function
    - type: size_t*
      name: pSuggestedLocalWorkSize
      desc: |
            [out] pointer to an array of numWorkDim unsigned values that specify
            suggested local work size that will contain the result of the query
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE
