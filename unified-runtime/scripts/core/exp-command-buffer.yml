#
# Copyright (C) 2022 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime Experimental APIs for Command-Buffers"
ordinal: "99"
--- #--------------------------------------------------------------------------
type: enum
extend: true
typed_etors: true
desc: "Extension enums to $x_device_info_t to support command-buffers."
name: $x_device_info_t
etors:
    - name: COMMAND_BUFFER_SUPPORT_EXP
      value: "0x1000"
      desc: "[$x_bool_t] Returns true if the device supports the use of command-buffers."
    - name: COMMAND_BUFFER_UPDATE_CAPABILITIES_EXP
      desc: "[$x_device_command_buffer_update_capability_flags_t] Command-buffer update capabilities of the device"
      value: "0x1001"
    - name: COMMAND_BUFFER_EVENT_SUPPORT_EXP
      value: "0x1002"
      desc: "[$x_bool_t] Returns true if the device supports using event objects for command synchronization outside of a command-buffer."
--- #--------------------------------------------------------------------------
type: enum
desc: "Device kernel execution capability"
class: $xDevice
name: $x_device_command_buffer_update_capability_flags_t
etors:
    - name: KERNEL_ARGUMENTS
      value: "$X_BIT(0)"
      desc: "Device supports updating the kernel arguments in command-buffer commands."
    - name: LOCAL_WORK_SIZE
      value: "$X_BIT(1)"
      desc: "Device supports updating the local work-group size in command-buffer commands."
    - name: GLOBAL_WORK_SIZE
      value: "$X_BIT(2)"
      desc: "Device supports updating the global work-group size in command-buffer commands."
    - name: GLOBAL_WORK_OFFSET
      value: "$X_BIT(3)"
      desc: "Device supports updating the global work offset in command-buffer commands."
    - name: KERNEL_HANDLE
      value: "$X_BIT(4)"
      desc: "Device supports updating the kernel handle in command-buffer commands."
    - name: EVENTS
      value: "$X_BIT(5)"
      desc: "Device supports updating the event parameters in command-buffer commands."
--- #--------------------------------------------------------------------------
type: enum
extend: true
desc: "Experimental Command Buffer result type enums."
name: $x_result_t
etors:
    - name: ERROR_INVALID_COMMAND_BUFFER_EXP
      value: "0x1000"
      desc: "Invalid Command-Buffer"
    - name: ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
      value: "0x1001"
      desc: "Sync point is not valid for the command-buffer"
    - name: ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP
      value: "0x1002"
      desc: "Sync point wait list is invalid"
    - name: ERROR_INVALID_COMMAND_BUFFER_COMMAND_HANDLE_EXP
      value: "0x1003"
      desc: "Handle to command-buffer command is invalid"
--- #--------------------------------------------------------------------------
type: enum
extend: true
desc: "Extend enumeration of Command Buffer Structure Type."
name: $x_structure_type_t
etors:
    - name: EXP_COMMAND_BUFFER_DESC
      desc: $x_exp_command_buffer_desc_t
      value: "0x1000"
    - name: EXP_COMMAND_BUFFER_UPDATE_KERNEL_LAUNCH_DESC
      desc: $x_exp_command_buffer_update_kernel_launch_desc_t
      value: "0x1001"
    - name: EXP_COMMAND_BUFFER_UPDATE_MEMOBJ_ARG_DESC
      desc: $x_exp_command_buffer_update_memobj_arg_desc_t
      value: "0x1002"
    - name: EXP_COMMAND_BUFFER_UPDATE_POINTER_ARG_DESC
      desc: $x_exp_command_buffer_update_pointer_arg_desc_t
      value: "0x1003"
    - name: EXP_COMMAND_BUFFER_UPDATE_VALUE_ARG_DESC
      desc: $x_exp_command_buffer_update_value_arg_desc_t
      value: "0x1004"
--- #--------------------------------------------------------------------------
type: enum
extend: true
desc: "Extend command type enumeration for Command-Buffer experimental feature."
name: $x_command_t
etors:
    - name: COMMAND_BUFFER_ENQUEUE_EXP
      desc: Event created by $xCommandBufferEnqueueExp
      value: "0x1000"
--- #--------------------------------------------------------------------------
type: enum
desc: "Command-buffer query information type"
class: $xCommandBuffer
name: $x_exp_command_buffer_info_t
typed_etors: True
etors:
    - name: REFERENCE_COUNT
      desc: |
            [uint32_t] Reference count of the command-buffer object.
            The reference count returned should be considered immediately stale.
            It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.
    - name: DESCRIPTOR
      desc: |
            [$x_exp_command_buffer_desc_t] Returns a $x_exp_command_buffer_desc_t
            with the properties of the command-buffer. Returned values may differ
            from those passed on construction if the property was ignored by the
            adapter.
--- #--------------------------------------------------------------------------
type: enum
desc: "Command-buffer command query information type"
class: $xCommandBuffer
name: $x_exp_command_buffer_command_info_t
typed_etors: True
etors:
    - name: REFERENCE_COUNT
      desc: |
            [uint32_t] Reference count of the command-buffer object.
            The reference count returned should be considered immediately stale.
            It is unsuitable for general use in applications. This feature is provided for identifying memory leaks.
--- #--------------------------------------------------------------------------
type: macro
desc: "The extension string which defines support for command-buffers which is returned when querying device extensions."
name: $X_COMMAND_BUFFER_EXTENSION_STRING_EXP
value: "\"$x_exp_command_buffer\""
--- #--------------------------------------------------------------------------
type: struct
desc: "Command-Buffer Descriptor Type"
name: $x_exp_command_buffer_desc_t
base: $x_base_desc_t
members:
    - type: $x_bool_t
      name: isUpdatable
      desc: "[in] Commands in a finalized command-buffer can be updated."
    - type: $x_bool_t
      name: isInOrder
      desc: "[in] Commands in a command-buffer may be executed in-order without explicit dependencies."
    - type: $x_bool_t
      name: enableProfiling
      desc: "[in] Command-buffer profiling is enabled."
--- #--------------------------------------------------------------------------
type: struct
desc: "Descriptor type for updating a kernel command memobj argument."
base: $x_base_desc_t
name: $x_exp_command_buffer_update_memobj_arg_desc_t
members:
    - type: uint32_t
      name: argIndex
      desc: "[in] Argument index."
    - type: "const ur_kernel_arg_mem_obj_properties_t *"
      name: pProperties
      desc: "[in][optional] Pointer to memory object properties."
    - type: $x_mem_handle_t
      name: hNewMemObjArg
      desc: "[in][optional] Handle of memory object to set at argument index."
--- #--------------------------------------------------------------------------
type: struct
desc: "Descriptor type for updating a kernel command pointer argument."
base: $x_base_desc_t
name: $x_exp_command_buffer_update_pointer_arg_desc_t
members:
    - type: uint32_t
      name: argIndex
      desc: "[in] Argument index."
    - type: "const ur_kernel_arg_pointer_properties_t *"
      name: pProperties
      desc: "[in][optional] Pointer to USM pointer properties."
    - type: "const void *"
      name: pNewPointerArg
      desc: "[in][optional] USM pointer to memory location holding the argument value to set at argument index."
--- #--------------------------------------------------------------------------
type: struct
desc: "Descriptor type for updating a kernel command value argument."
base: $x_base_desc_t
name: $x_exp_command_buffer_update_value_arg_desc_t
members:
    - type: uint32_t
      name: argIndex
      desc: "[in] Argument index."
    - type: size_t
      name: argSize
      desc: "[in] Argument size."
    - type: "const ur_kernel_arg_value_properties_t *"
      name: pProperties
      desc: "[in][optional] Pointer to value properties."
    - type: "const void *"
      name: pNewValueArg
      desc: "[in][optional] Argument value representing matching kernel arg type to set at argument index."
--- #--------------------------------------------------------------------------
type: struct
desc: "Descriptor type for updating a kernel launch command."
base: $x_base_desc_t
name: $x_exp_command_buffer_update_kernel_launch_desc_t
members:
    - type: $x_kernel_handle_t
      name: hNewKernel
      desc: |
        [in][optional] The new kernel handle. If this parameter is nullptr, the current kernel handle in `hCommand`
        will be used. If a kernel handle is passed, it must be a valid kernel alternative as defined in
        $xCommandBufferAppendKernelLaunchExp.
    - type: uint32_t
      name: numNewMemObjArgs
      desc: "[in] Length of pNewMemObjArgList."
    - type: uint32_t
      name: numNewPointerArgs
      desc: "[in] Length of pNewPointerArgList."
    - type: uint32_t
      name: numNewValueArgs
      desc: "[in] Length of pNewValueArgList."
    - type: uint32_t
      name: newWorkDim
      desc: "[in] Number of work dimensions in the kernel ND-range, from 1-3."
    - type: "const $x_exp_command_buffer_update_memobj_arg_desc_t*"
      name: pNewMemObjArgList
      desc: "[in][optional][range(0, numNewMemObjArgs)] An array describing the new kernel mem obj arguments for the command."
    - type: "const $x_exp_command_buffer_update_pointer_arg_desc_t*"
      name: pNewPointerArgList
      desc: "[in][optional][range(0, numNewPointerArgs)] An array describing the new kernel pointer arguments for the command."
    - type: "const $x_exp_command_buffer_update_value_arg_desc_t*"
      name: pNewValueArgList
      desc: "[in][optional][range(0, numNewValueArgs)] An array describing the new kernel value arguments for the command."
    - type: "size_t*"
      name: pNewGlobalWorkOffset
      desc: |
        [in][optional][range(0, newWorkDim)] Array of newWorkDim unsigned values that describe the offset used
        to calculate the global ID. If this parameter is nullptr, the current global work offset will be used. This parameter is required if `newWorkDim` is different from the current work dimensions
        in the command.
    - type: "size_t*"
      name: pNewGlobalWorkSize
      desc: |
        [in][optional][range(0, newWorkDim)] Array of newWorkDim unsigned values that describe the number of
        global work-items. If this parameter is nullptr, the current global work size in `hCommand` will be used.
        This parameter is required if `newWorkDim` is different from the current work dimensions in the command.
    - type: "size_t*"
      name: pNewLocalWorkSize
      desc: |
        [in][optional][range(0, newWorkDim)] Array of newWorkDim unsigned values that describe the number of
        work-items that make up a work-group. If `pNewGlobalWorkSize` is set and `pNewLocalWorkSize` is nullptr,
        then the runtime implementation will choose the local work size. If `pNewGlobalWorkSize` is nullptr and
        `pNewLocalWorkSize` is nullptr, the current local work size in the command will be used.
--- #--------------------------------------------------------------------------
type: typedef
desc: "A value that identifies a command inside of a command-buffer, used for defining dependencies between commands in the same command-buffer."
class: $xCommandBuffer
name: $x_exp_command_buffer_sync_point_t
value: uint32_t
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of Command-Buffer object"
class: $xCommandBuffer
name: "$x_exp_command_buffer_handle_t"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of a Command-Buffer command"
class: $xCommandBuffer
name: "$x_exp_command_buffer_command_handle_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Create a Command-Buffer object"
class: $xCommandBuffer
name: CreateExp
decl: static
details:
    - "Create a command-buffer object."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] Handle of the context object."
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] Handle of the device object."
    - type: "const $x_exp_command_buffer_desc_t*"
      name: pCommandBufferDesc
      desc: "[in][optional] command-buffer descriptor."
    - type: "$x_exp_command_buffer_handle_t*"
      name: phCommandBuffer
      desc: "[out][alloc] Pointer to command-Buffer handle."
returns:
    - $X_RESULT_ERROR_INVALID_CONTEXT
    - $X_RESULT_ERROR_INVALID_DEVICE
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If `pCommandBufferDesc->isUpdatable` is true and `hDevice` returns 0
        for the $X_DEVICE_INFO_COMMAND_BUFFER_UPDATE_CAPABILITIES_EXP query."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Increment the command-buffer object's reference count."
class: $xCommandBuffer
name: RetainExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in][retain] Handle of the command-buffer object."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Decrement the command-buffer object's reference count and delete the command-buffer object if the reference count becomes zero."
class: $xCommandBuffer
name: ReleaseExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in][release] Handle of the command-buffer object."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Stop recording on a command-buffer object such that no more commands can be appended and make it ready to enqueue."
class: $xCommandBuffer
name: FinalizeExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_OPERATION
        - "If `hCommandBuffer` has already been finalized"
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a kernel execution command to a command-buffer object."
class: $xCommandBuffer
name: AppendKernelLaunchExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] Kernel to append."
    - type: uint32_t
      name: workDim
      desc: "[in] Dimension of the kernel execution."
    - type: "const size_t*"
      name: pGlobalWorkOffset
      desc: "[in] Offset to use when executing kernel."
    - type: "const size_t*"
      name: pGlobalWorkSize
      desc: "[in] Global work size to use when executing kernel."
    - type: "const size_t*"
      name: pLocalWorkSize
      desc: "[in][optional] Local work size to use when executing kernel. If this parameter is nullptr, then a local work size will be generated by the implementation."
    - type: uint32_t
      name: "numKernelAlternatives"
      desc: "[in] The number of kernel alternatives provided in phKernelAlternatives."
    - type: $x_kernel_handle_t*
      name: "phKernelAlternatives"
      desc: |
            [in][optional][range(0, numKernelAlternatives)] List of kernel handles that might be used to update the kernel in this
            command after the command-buffer is finalized. The default kernel `hKernel` is implicitly marked as an alternative. It's
            invalid to specify it as part of this list.
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command. Only available if the
      command-buffer is updatable."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_KERNEL
    - $X_RESULT_ERROR_INVALID_WORK_DIMENSION
    - $X_RESULT_ERROR_INVALID_WORK_GROUP_SIZE
    - $X_RESULT_ERROR_INVALID_VALUE:
        - "`phKernelAlternatives == NULL && numKernelAlternatives > 0`"
        - "`phKernelAlternatives != NULL && numKernelAlternatives == 0`"
        - "If `phKernelAlternatives` contains `hKernel`"
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
    - $X_RESULT_ERROR_INVALID_OPERATION
        - "phCommand is not NULL and hCommandBuffer is not updatable."
--- #--------------------------------------------------------------------------
type: function
desc: "Append a USM memcpy command to a command-buffer object."
class: $xCommandBuffer
name: AppendUSMMemcpyExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: "void*"
      name: pDst
      desc: "[in] Location the data will be copied to."
    - type: "const void*"
      name: pSrc
      desc: "[in] The data to be copied."
    - type: "size_t"
      name: size
      desc: "[in] The number of bytes to copy."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`size == 0`"
        - "If `size` is higher than the allocation size of `pSrc` or `pDst`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a USM fill command to a command-buffer object."
class: $xCommandBuffer
name: AppendUSMFillExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] handle of the command-buffer object."
    - type: "void*"
      name: pMemory
      desc: "[in] pointer to USM allocated memory to fill."
    - type: "const void*"
      name: pPattern
      desc: "[in] pointer to the fill pattern."
    - type: "size_t"
      name: patternSize
      desc: "[in] size in bytes of the pattern."
    - type: "size_t"
      name: size
      desc: "[in] fill size in bytes, must be a multiple of patternSize."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`patternSize == 0 || size == 0`"
        - "`patternSize > size`"
        - "`size % patternSize != 0`"
        - "If `size` is higher than the allocation size of `ptr`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a memory copy command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferCopyExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hSrcMem
      desc: "[in] The data to be copied."
    - type: $x_mem_handle_t
      name: hDstMem
      desc: "[in] The location the data will be copied to."
    - type: "size_t"
      name: srcOffset
      desc: "[in] Offset into the source memory."
    - type: "size_t"
      name: dstOffset
      desc: "[in] Offset into the destination memory"
    - type: "size_t"
      name: size
      desc: "[in] The number of bytes to be copied."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a memory write command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferWriteExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hBuffer
      desc: "[in] Handle of the buffer object."
    - type: "size_t"
      name: offset
      desc: "[in] Offset in bytes in the buffer object."
    - type: "size_t"
      name: size
      desc: "[in] Size in bytes of data being written."
    - type: "const void*"
      name: pSrc
      desc: "[in] Pointer to host memory where data is to be written from."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a memory read command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferReadExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hBuffer
      desc: "[in] Handle of the buffer object."
    - type: "size_t"
      name: offset
      desc: "[in] Offset in bytes in the buffer object."
    - type: "size_t"
      name: size
      desc: "[in] Size in bytes of data being written."
    - type: "void*"
      name: pDst
      desc: "[in] Pointer to host memory where data is to be written to."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a rectangular memory copy command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferCopyRectExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hSrcMem
      desc: "[in] The data to be copied."
    - type: $x_mem_handle_t
      name: hDstMem
      desc: "[in] The location the data will be copied to."
    - type: $x_rect_offset_t
      name: srcOrigin
      desc: "[in] Origin for the region of data to be copied from the source."
    - type: $x_rect_offset_t
      name: dstOrigin
      desc: "[in] Origin for the region of data to be copied to in the destination."
    - type: $x_rect_region_t
      name: region
      desc: "[in] The extents describing the region to be copied."
    - type: "size_t"
      name: srcRowPitch
      desc: "[in] Row pitch of the source memory."
    - type: "size_t"
      name: srcSlicePitch
      desc: "[in] Slice pitch of the source memory."
    - type: "size_t"
      name: dstRowPitch
      desc: "[in] Row pitch of the destination memory."
    - type: "size_t"
      name: dstSlicePitch
      desc: "[in] Slice pitch of the destination memory."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: $x_exp_command_buffer_sync_point_t*
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a rectangular memory write command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferWriteRectExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hBuffer
      desc: "[in] Handle of the buffer object."
    - type: $x_rect_offset_t
      name: bufferOffset
      desc: "[in] 3D offset in the buffer."
    - type: $x_rect_offset_t
      name: hostOffset
      desc: "[in] 3D offset in the host region."
    - type: $x_rect_region_t
      name: region
      desc: "[in] 3D rectangular region descriptor: width, height, depth."
    - type: "size_t"
      name: bufferRowPitch
      desc: "[in] Length of each row in bytes in the buffer object."
    - type: "size_t"
      name: bufferSlicePitch
      desc: "[in] Length of each 2D slice in bytes in the buffer object being written."
    - type: "size_t"
      name: hostRowPitch
      desc: "[in] Length of each row in bytes in the host memory region pointed to by pSrc."
    - type: "size_t"
      name: hostSlicePitch
      desc: "[in] Length of each 2D slice in bytes in the host memory region pointed to by pSrc."
    - type: "void*"
      name: pSrc
      desc: "[in] Pointer to host memory where data is to be written from."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: $x_exp_command_buffer_sync_point_t*
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a rectangular memory read command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferReadRectExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hBuffer
      desc: "[in] Handle of the buffer object."
    - type: $x_rect_offset_t
      name: bufferOffset
      desc: "[in] 3D offset in the buffer."
    - type: $x_rect_offset_t
      name: hostOffset
      desc: "[in] 3D offset in the host region."
    - type: $x_rect_region_t
      name: region
      desc: "[in] 3D rectangular region descriptor: width, height, depth."
    - type: "size_t"
      name: bufferRowPitch
      desc: "[in] Length of each row in bytes in the buffer object."
    - type: "size_t"
      name: bufferSlicePitch
      desc: "[in] Length of each 2D slice in bytes in the buffer object being read."
    - type: "size_t"
      name: hostRowPitch
      desc: "[in] Length of each row in bytes in the host memory region pointed to by pDst."
    - type: "size_t"
      name: hostSlicePitch
      desc: "[in] Length of each 2D slice in bytes in the host memory region pointed to by pDst."
    - type: "void*"
      name: pDst
      desc: "[in] Pointer to host memory where data is to be read into."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: $x_exp_command_buffer_sync_point_t*
      name: pSyncPoint
      desc: "[out][optional] Sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a memory fill command to a command-buffer object."
class: $xCommandBuffer
name: AppendMemBufferFillExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] handle of the command-buffer object."
    - type: $x_mem_handle_t
      name: hBuffer
      desc: "[in] handle of the buffer object."
    - type: "const void*"
      name: pPattern
      desc: "[in] pointer to the fill pattern."
    - type: "size_t"
      name: patternSize
      desc: "[in] size in bytes of the pattern."
    - type: "size_t"
      name: offset
      desc: "[in] offset into the buffer."
    - type: "size_t"
      name: size
      desc: "[in] fill size in bytes, must be a multiple of patternSize."
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: $x_exp_command_buffer_sync_point_t*
      name: pSyncPoint
      desc: "[out][optional] sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "If `offset + size` results in an out-of-bounds access."
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a USM Prefetch command to a command-buffer object."
class: $xCommandBuffer
name: AppendUSMPrefetchExp
details:
    - "Prefetching may not be supported for all devices or allocation types. If
    memory prefetching is not supported, the prefetch hint will be ignored."
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] handle of the command-buffer object."
    - type: "const void*"
      name: pMemory
      desc: "[in] pointer to USM allocated memory to prefetch."
    - type: "size_t"
      name: size
      desc: "[in] size in bytes to be fetched."
    - type: $x_usm_migration_flags_t
      name: flags
      desc: "[in] USM prefetch flags"
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`size == 0`"
        - "If `size` is higher than the allocation size of `pMemory`"
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Append a USM Advise command to a command-buffer object."
class: $xCommandBuffer
name: AppendUSMAdviseExp
details:
    - "Not all memory advice hints may be supported for all devices or
    allocation types. If a memory advice hint is not supported, it will be
    ignored."
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] handle of the command-buffer object."
    - type: "const void*"
      name: pMemory
      desc: "[in] pointer to the USM memory object."
    - type: "size_t"
      name: size
      desc: "[in] size in bytes to be advised."
    - type: $x_usm_advice_flags_t
      name: advice
      desc: "[in] USM memory advice"
    - type: uint32_t
      name: numSyncPointsInWaitList
      desc: "[in] The number of sync points in the provided dependency list."
    - type: "const $x_exp_command_buffer_sync_point_t*"
      name: pSyncPointWaitList
      desc: "[in][optional] A list of sync points that this command depends on.
      May be ignored if command-buffer is in-order."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
    - type: "$x_exp_command_buffer_sync_point_t*"
      name: pSyncPoint
      desc: "[out][optional] sync point associated with this command."
    - type: $x_event_handle_t*
      name: phEvent
      desc: "[out][optional][alloc] return an event object that will be signaled by the completion of this command in the next execution of the command-buffer."
    - type: "$x_exp_command_buffer_command_handle_t*"
      name: phCommand
      desc: "[out][optional][alloc] Handle to this command."
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_EXP
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_SYNC_POINT_WAIT_LIST_EXP:
        - "`pSyncPointWaitList == NULL && numSyncPointsInWaitList > 0`"
        - "`pSyncPointWaitList != NULL && numSyncPointsInWaitList == 0`"
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`size == 0`"
        - "If `size` is higher than the allocation size of `pMemory`"
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If the device associated with `hCommandBuffer` does not support UR_DEVICE_INFO_COMMAND_BUFFER_EVENT_SUPPORT_EXP and either `phEvent` or `phEventWaitList` are not NULL."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Submit a command-buffer for execution on a queue."
class: $xCommandBuffer
name: EnqueueExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] Handle of the command-buffer object."
    - type: $x_queue_handle_t
      name: hQueue
      desc: "[in] The queue to submit this command-buffer for execution."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: |
            [in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command-buffer execution.
            If nullptr, the numEventsInWaitList must be 0, indicating no wait events.
    - type: $x_event_handle_t*
      name: phEvent
      desc: |
            [out][optional][alloc] return an event object that identifies this particular command-buffer execution instance. If phEventWaitList and phEvent are not NULL, phEvent must not refer to an element of the phEventWaitList array.
returns:
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_INVALID_QUEUE
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Update a kernel launch command in a finalized command-buffer."
details: "This entry-point is synchronous and may block if the command-buffer is executing when the entry-point is called."
class: $xCommandBuffer
name: UpdateKernelLaunchExp
params:
    - type: $x_exp_command_buffer_command_handle_t
      name: hCommand
      desc: "[in] Handle of the command-buffer kernel command to update."
    - type: "const $x_exp_command_buffer_update_kernel_launch_desc_t*"
      name: pUpdateKernelLaunch
      desc: "[in] Struct defining how the kernel command is to be updated."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_KERNEL_ARGUMENTS is not supported by the device, but any of `pUpdateKernelLaunch->numNewMemObjArgs`, `pUpdateKernelLaunch->numNewPointerArgs`, or `pUpdateKernelLaunch->numNewValueArgs` are not zero."
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_LOCAL_WORK_SIZE is not supported by the device but `pUpdateKernelLaunch->pNewLocalWorkSize` is not nullptr."
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_LOCAL_WORK_SIZE is not supported by the device but `pUpdateKernelLaunch->pNewLocalWorkSize` is nullptr and `pUpdateKernelLaunch->pNewGlobalWorkSize` is not nullptr."
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_GLOBAL_WORK_SIZE is not supported by the device but `pUpdateKernelLaunch->pNewGlobalWorkSize` is not nullptr"
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_GLOBAL_WORK_OFFSET is not supported by the device but `pUpdateKernelLaunch->pNewGlobalWorkOffset` is not nullptr."
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_KERNEL_HANDLE is not supported by the device but `pUpdateKernelLaunch->hNewKernel` is not nullptr."
    - $X_RESULT_ERROR_INVALID_OPERATION:
        - "If $x_exp_command_buffer_desc_t::isUpdatable was not set to true on creation of the command-buffer `hCommand` belongs to."
        - "If the command-buffer `hCommand` belongs to has not been finalized."
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_COMMAND_HANDLE_EXP:
        - "If `hCommand` is not a kernel execution command."
    - $X_RESULT_ERROR_INVALID_MEM_OBJECT
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX
    - $X_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE
    - $X_RESULT_ERROR_INVALID_ENUMERATION
    - $X_RESULT_ERROR_INVALID_WORK_DIMENSION:
        - "`pUpdateKernelLaunch->newWorkDim < 1 || pUpdateKernelLaunch->newWorkDim > 3`"
    - $X_RESULT_ERROR_INVALID_WORK_GROUP_SIZE
    - $X_RESULT_ERROR_INVALID_VALUE:
        - "If `pUpdateKernelLaunch->hNewKernel` was not passed to the `hKernel` or `phKernelAlternatives` parameters of $xCommandBufferAppendKernelLaunchExp when this command was created."
        - "If `pUpdateKernelLaunch->newWorkDim` is different from the current workDim in `hCommand` and, `pUpdateKernelLaunch->pNewGlobalWorkSize`, or `pUpdateKernelLaunch->pNewGlobalWorkOffset` are nullptr."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Get a new event that will be signaled the next time the command in the command-buffer executes."
details: "It is the users responsibility to release the returned `phSignalEvent`."
class: $xCommandBuffer
name: UpdateSignalEventExp
params:
    - type: $x_exp_command_buffer_command_handle_t
      name: hCommand
      desc: "[in] Handle of the command-buffer command to update."
    - type: "$x_event_handle_t*"
      name: phSignalEvent
      desc: "[out][alloc] Event to be signaled."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_EVENTS is not supported by the device associated with `hCommand`."
    - $X_RESULT_ERROR_INVALID_OPERATION:
        - "If $x_exp_command_buffer_desc_t::isUpdatable was not set to true on creation of the command-buffer `hCommand` belongs to."
        - "If the command-buffer `hCommand` belongs to has not been finalized."
        - "If no `phEvent` parameter was set on creation of the command associated with `hCommand`."
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_COMMAND_HANDLE_EXP
    - $X_RESULT_ERROR_INVALID_VALUE
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Set the list of wait events for a command to depend on to a list of new events."
class: $xCommandBuffer
name: UpdateWaitEventsExp
params:
    - type: $x_exp_command_buffer_command_handle_t
      name: hCommand
      desc: "[in] Handle of the command-buffer command to update."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] Size of the event wait list."
    - type: "const $x_event_handle_t*"
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the command execution. If nullptr, the numEventsInWaitList must be 0, indicating no wait events."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "If $X_DEVICE_COMMAND_BUFFER_UPDATE_CAPABILITY_FLAG_EVENTS is not supported by the device associated with `hCommand`."
    - $X_RESULT_ERROR_INVALID_OPERATION:
        - "If $x_exp_command_buffer_desc_t::isUpdatable was not set to true on creation of the command-buffer `hCommand` belongs to."
        - "If the command-buffer `hCommand` belongs to has not been finalized."
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_COMMAND_HANDLE_EXP
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "`phEventWaitList == NULL && numEventsInWaitList > 0`"
        - "`phEventWaitList != NULL && numEventsInWaitList == 0`"
        - "If event objects in phEventWaitList are not valid events."
        - "If `numEventsInWaitList` does not match the number of wait events set when the command associated with `hCommand` was created."
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
--- #--------------------------------------------------------------------------
type: function
desc: "Get command-buffer object information."
class: $xCommandBuffer
name: GetInfoExp
params:
    - type: $x_exp_command_buffer_handle_t
      name: hCommandBuffer
      desc: "[in] handle of the command-buffer object"
    - type: $x_exp_command_buffer_info_t
      name: propName
      desc: "[in] the name of the command-buffer property to query"
    - type: size_t
      name: propSize
      desc: "[in] size in bytes of the command-buffer property value"
    - type: void*
      name: pPropValue
      desc: "[out][optional][typename(propName, propSize)] value of the command-buffer property"
    - type: size_t*
      name: pPropSizeRet
      desc: "[out][optional] bytes returned in command-buffer property"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_ENUMERATION:
        - "If `propName` is not supported by the adapter."
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`propSize == 0 && pPropValue != NULL`"
        - "If `propSize` is less than the real number of bytes needed to return the info."
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "`propSize != 0 && pPropValue == NULL`"
        - "`pPropValue == NULL && pPropSizeRet == NULL`"
    - $X_RESULT_ERROR_INVALID_COMMAND_BUFFER_EXP
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
