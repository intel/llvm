#
# Copyright (C) 2023 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime Experimental APIs for USM P2P"
ordinal: "99"
--- #--------------------------------------------------------------------------
type: macro
desc: "The extension string that defines support for USM P2P which is returned when querying device extensions."
name: $X_USM_P2P_EXTENSION_STRING_EXP
value: "\"$x_exp_usm_p2p\""
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported peer info"
class: $xUsmP2P
name: $x_exp_peer_info_t
typed_etors: True
etors:
    - name: UR_PEER_ACCESS_SUPPORTED
      desc: "[int] 1 if P2P access is supported otherwise P2P access is not supported."
    - name: UR_PEER_ATOMICS_SUPPORTED
      desc: "[int] 1 if atomic operations are supported over the P2P link, otherwise such operations are not supported."
--- #--------------------------------------------------------------------------
type: function
desc: "Enable access to peer device memory"
class: $xUsmP2P
name: EnablePeerAccessExp
ordinal: "0"
analogue:
    - "**cuCtxEnablePeerAccess**"
details:
    - "Enables the command device to access and write device memory allocations located on the peer device, provided that a P2P link between the two devices is available."
    - "When Peer Access is successfully enabled, P2P memory accesses are guaranteed to be allowed on the peer device until $xUsmP2PDisablePeerAccessExp is called."
    - "Note that the function operands may, but aren't guaranteed to, commute for a given adapter: the peer device is not guaranteed to have access to device memory allocations located on the command device."
    - "It is not guaranteed that the commutation relations of the function arguments are identical for peer access and peer copies: For example, for a given adapter the peer device may be able to copy data from the command device, but not access and write the same data on the command device."
    - "Consult the appropriate adapter driver documentation for details of adapter specific behavior and native error codes that may be returned."
params:
    - type: $x_device_handle_t
      name: commandDevice
      desc: "[in] handle of the command device object"
    - type: $x_device_handle_t
      name: peerDevice
      desc: "[in] handle of the peer device object"
returns:
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_ADAPTER_SPECIFIC
--- #--------------------------------------------------------------------------
type: function
desc: "Disable access to peer device memory"
class: $xUsmP2P
name: DisablePeerAccessExp
ordinal: "0"
analogue:
    - "**cuCtxDisablePeerAccess**"
details:
    - "Disables the ability of the command device to access and write device memory allocations located on the peer device, provided that a P2P link between the two devices was enabled prior to the call."
    - "Note that the function operands may, but aren't guaranteed to, commute for a given adapter. If, prior to the function call, the peer device had access to device memory allocations on the command device, it is not guaranteed to still have such access following the function return."
    - "It is not guaranteed that the commutation relations of the function arguments are identical for peer access and peer copies: For example for a given adapter, if, prior to the call, the peer device had access to device memory allocations on the command device, the peer device may still, following the function call, be able to copy data from the command device, but not access and write the same data on the command device."
    - "Consult the appropriate adapter driver documentation for details of adapter specific behavior and native error codes that may be returned."
params:
    - type: $x_device_handle_t
      name: commandDevice
      desc: "[in] handle of the command device object"
    - type: $x_device_handle_t
      name: peerDevice
      desc: "[in] handle of the peer device object"
returns:
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_ADAPTER_SPECIFIC
--- #--------------------------------------------------------------------------
type: function
desc: "Disable access to peer device memory"
class: $xUsmP2P
name: PeerAccessGetInfoExp
ordinal: "0"
analogue:
    - "**cuDeviceGetP2PAttribute**"
details:
    - "Queries the peer access capabilities from the command device to the peer device according to the query `propName`."
params:
    - type: $x_device_handle_t
      name: commandDevice
      desc: "[in] handle of the command device object"
    - type: $x_device_handle_t
      name: peerDevice
      desc: "[in] handle of the peer device object"
    - type: $x_exp_peer_info_t
      name: propName
      desc: "[in] type of the info to retrieve"
    - type: "size_t"
      name: propSize
      desc: |
            [in] the number of bytes pointed to by pPropValue.
    - type: "void*"
      name: pPropValue
      desc: |
            [out][optional][typename(propName, propSize)] array of bytes holding the info.
            If propSize is not equal to or greater than the real number of bytes needed to return the info
            then the $X_RESULT_ERROR_INVALID_SIZE error is returned and pPropValue is not used.
    - type: "size_t*"
      name: pPropSizeRet
      desc: |
            [out][optional] pointer to the actual size in bytes of the queried propName.
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_ENUMERATION:
        - "If `propName` is not supported by the adapter."
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`propSize == 0 && pPropValue != NULL`"
        - "If `propSize` is less than the real number of bytes needed to return the info."
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "`propSize != 0 && pPropValue == NULL`"
        - "`pPropValue == NULL && pPropSizeRet == NULL`"
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_ADAPTER_SPECIFIC
