---
name: Build - Adapters on HW - Reusable

on:
  workflow_call:
    inputs:
      adapter_name:
        required: true
        type: string
      other_adapter_name:
        required: false
        type: string
        default: ""
      runner_name:
        required: true
        type: string
      platform:
        description: "Platform string, `UR_CTS_ADAPTER_PLATFORM` will be set to this."
        required: false
        type: string
        default: ""
      static_loader:
        required: false
        type: string
        default: OFF
      static_adapter:
        required: false
        type: string
        default: OFF

permissions:
  contents: read

env:
  UR_LOG_CUDA: "level:error;flush:error"
  UR_LOG_HIP: "level:error;flush:error"
  UR_LOG_LEVEL_ZERO: "level:error;flush:error"
  UR_LOG_NATIVE_CPU: "level:error;flush:error"
  UR_LOG_OPENCL: "level:error;flush:error"

jobs:
  adapter-build-hw:
    name: Build & CTS
    if: github.repository == 'oneapi-src/unified-runtime'  # run only on upstream; forks won't have the HW
    strategy:
      matrix:
        adapter: [
          {
            name: "${{inputs.adapter_name}}",
            other_name: "${{inputs.other_adapter_name}}",
            platform: "${{inputs.platform}}",
            static_Loader: "${{inputs.static_loader}}",
            static_adapter: "${{inputs.static_loader}}"
          }
        ]
        build_type: [Release]
        compiler: [{c: gcc, cxx: g++}]

    runs-on: ${{inputs.runner_name}}

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install pip packages
      run: pip install -r third_party/requirements.txt

    - name: Download DPC++
      run: |
        wget -O ${{github.workspace}}/dpcpp_compiler.tar.gz https://github.com/intel/llvm/releases/download/nightly-2024-12-12/sycl_linux.tar.gz
        mkdir dpcpp_compiler
        tar -xvf ${{github.workspace}}/dpcpp_compiler.tar.gz -C dpcpp_compiler

    - name: Configure CMake
      run: >
        cmake
        -B${{github.workspace}}/build
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
        -DUR_ENABLE_TRACING=ON
        -DUR_DEVELOPER_MODE=ON
        -DUR_BUILD_TESTS=ON
        -DUR_BUILD_ADAPTER_${{matrix.adapter.name}}=ON
        -DUR_CONFORMANCE_TEST_LOADER=${{ matrix.adapter.other_name != '' && 'ON' || 'OFF' }}
        ${{ matrix.adapter.other_name != '' && format('-DUR_BUILD_ADAPTER_{0}=ON', matrix.adapter.other_name) || '' }}
        -DUR_STATIC_LOADER=${{matrix.adapter.static_Loader}}
        -DUR_STATIC_ADAPTER_${{matrix.adapter.name}}=${{matrix.adapter.static_adapter}}
        -DUR_DPCXX=${{github.workspace}}/dpcpp_compiler/bin/clang++
        -DUR_SYCL_LIBRARY_DIR=${{github.workspace}}/dpcpp_compiler/lib
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install
        ${{ matrix.adapter.name == 'HIP' && '-DUR_CONFORMANCE_AMD_ARCH=gfx1030' || '' }}
        ${{ matrix.adapter.name == 'HIP' && '-DUR_HIP_PLATFORM=AMD' || '' }}

    - name: Build
      # This is so that device binaries can find the sycl runtime library
      run: cmake --build ${{github.workspace}}/build -j $(nproc)

    - name: Install
      # This is to check that install command does not fail
      run: cmake --install ${{github.workspace}}/build

    - name: Test adapter specific
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure -L "adapter-specific" -E "memcheck" --timeout 180
      # Don't run adapter specific tests when building multiple adapters
      if: ${{ matrix.adapter.other_name == '' }}

    - name: Test adapters
      working-directory: ${{github.workspace}}/build
      run: env UR_CTS_ADAPTER_PLATFORM="${{matrix.adapter.platform}}" ctest -C ${{matrix.build_type}} --output-on-failure -L "conformance" --timeout 180

    - name: Get information about platform
      if: ${{ always() }}
      run: .github/scripts/get_system_info.sh
