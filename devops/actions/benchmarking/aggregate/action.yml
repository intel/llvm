name: 'Aggregate compute-benchmark results and produce historical averages'

# The benchmarking workflow in sycl-linux-run-tests.yml passes or fails based on
# how the benchmark results compare to a historical average: This historical
# average is calculated in this composite workflow, which aggregates historical
# data and produces measures of central tendency (median in this case) used for
# this purpose.
#
# This action assumes that /devops has been checked out in ./devops. This action
# also assumes that GITHUB_TOKEN was properly set in env, because according to
# Github, that's apparently the recommended way to pass a secret into a github
# action:
#
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#accessing-your-secrets
#

inputs:
  lookback_days:
    type: number
    required: true

runs:
  using: "composite"
  steps:
  - name: Obtain oldest timestamp allowed for data in aggregation
    shell: bash
    run: |
      # DO NOT use inputs.lookback_days directly, only use SANITIZED_TIMESTAMP.
      SANITIZED_LOOKBACK_DAYS="$(echo '${{ inputs.lookback_days }}' | grep -oE '^[0-9]+$')"
      if [ -z "$SANITIZED_LOOKBACK_DAYS" ]; then
        echo "Please ensure inputs.lookback_days is a number."
        exit 1
      fi
      SANITIZED_TIMESTAMP="$(date -d "$SANITIZED_LOOKBACK_DAYS days ago" +%Y%m%d_%H%M%S)"
      if [ -z "$(echo "$SANITIZED_TIMESTAMP" | grep -oE '^[0-9]{8}_[0-9]{6}$' )" ]; then
        echo "Invalid timestamp generated: is inputs.lookback_days valid?"
        exit 1
      fi
      echo "SANITIZED_TIMESTAMP=$SANITIZED_TIMESTAMP" >> $GITHUB_ENV
  - name: Load benchmarking configuration
    shell: bash
    run: |
      $(python ./devops/scripts/benchmarking/load_config.py ./devops constants)
      echo "SANITIZED_PERF_RES_GIT_REPO=$SANITIZED_PERF_RES_GIT_REPO" >> $GITHUB_ENV
      echo "SANITIZED_PERF_RES_GIT_BRANCH=$SANITIZED_PERF_RES_GIT_BRANCH" >> $GITHUB_ENV
  - name: Checkout historical performance results repository
    shell: bash
    run: |
      if [ ! -d ./llvm-ci-perf-results ]; then
        git clone -b "$SANITIZED_PERF_RES_GIT_BRANCH" "https://github.com/$SANITIZED_PERF_RES_GIT_REPO" ./llvm-ci-perf-results
      fi
  - name: Run aggregator on historical results
    shell: bash
    run: |
      # The current format of the historical results respository is:
      #
      # /<ONEAPI_DEVICE_SELECTOR>/<runner>/<test name>
      #
      # Thus, a min/max depth of 3 is used to enumerate all test cases in the
      # repository. Test name is also derived from here.
      find ./llvm-ci-perf-results -mindepth 3 -maxdepth 3 -type d ! -path '*.git*' |
      while read -r dir; do
        test_name="$(basename "$dir")"
        python ./devops/scripts/benchmarking/aggregate.py ./devops "$test_name" "$dir" "$SANITIZED_TIMESTAMP"
      done
  - name: Upload average to the repo
    shell: bash
    run: |
      cd ./llvm-ci-perf-results
      git config user.name "SYCL Benchmarking Bot"
      git config user.email "sys_sycl_benchmarks@intel.com"
      git pull
      # Make sure changes have been made
      if git diff --quiet && git diff --cached --quiet; then
        echo "No changes to median, skipping push."
      else
        git add .
        git commit -m "[GHA] Aggregate median data from $SANITIZED_TIMESTAMP to $(date +%Y%m%d_%H%M%S)"
        git push "https://$GITHUB_TOKEN@github.com/$SANITIZED_PERF_RES_GIT_REPO.git" "$SANITIZED_PERF_RES_GIT_BRANCH"
      fi
  - name: Find aggregated average results artifact here
    if: always()
    shell: bash
    run: |
      cat << EOF
      #
      # Artifact link for aggregated averages here:
      #
      EOF
  - name: Archive new medians
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: llvm-ci-perf-results new medians
      path: ./llvm-ci-perf-results/**/*-median.csv
