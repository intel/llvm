name: 'Run SYCL End-to-End testing'
description: 'Run SYCL End-to-End testing'
inputs:
  sycl_artifact:
    description: 'Name of the artifact, that contains compiler toolchain'
    required: true
  sycl_archive:
    description: 'Name of SYCL toolchain archive file'
    required: false
    default: 'llvm_sycl.tar.zst'
  targets:
    description: 'List of SYCL backends with set of target devices per each to be tested iteratively'
    required: true
  cmake_args:
    description: 'Extra arguments to cmake command'
    required: false

post-if: false
runs:
  using: "composite"
  steps:
  - run: |
      cp -r /actions .
    shell: bash
  - name: Download compiler toolchain
    uses: actions/download-artifact@v3
    with:
      name: ${{ inputs.sycl_artifact }}
  - name: Extract SYCL toolchain
    shell: bash
    run: |
      mkdir toolchain
      tar -I 'zstd -d' -xf ${{ inputs.sycl_archive }} -C toolchain
      rm -f ${{ inputs.sycl_archive }}
  - name: Configure
    shell: bash
    run: |
      echo "::group::CMake configuration"
      export PATH=$PWD/toolchain/bin/:$PATH
      cmake -GNinja -B./build-e2e -S./llvm/sycl/test-e2e -DSYCL_TEST_E2E_TARGETS="${{ inputs.targets }}" -DCMAKE_CXX_COMPILER="$PWD/toolchain/bin/clang++" -DLLVM_LIT="$PWD/llvm/llvm/utils/lit/lit.py" ${{ inputs.cmake_args }}
      echo "::endgroup::"
  - name: Run testing
    shell: bash
    run: |
      export LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH
      export PATH=$PWD/toolchain/bin/:$PATH
      # TODO make this part of container build
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/rocm/hip/lib/:/opt/rocm/lib
      export LIT_OPTS="-v --no-progress-bar --show-unsupported --max-time 3600 --time-tests"
      if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
        source /runtimes/oneapi-tbb/env/vars.sh;
      elif [ -e /opt/runtimes/oneapi-tbb/env/vars.sh ]; then
        source /opt/runtimes/oneapi-tbb/env/vars.sh;
      else
        echo "no TBB vars in /opt/runtimes or /runtimes";
      fi
      # TODO remove workaround of FPGA emu bug
      mkdir -p icd
      echo /usr/lib/x86_64-linux-gnu/intel-opencl/libigdrcl.so > icd/gpu.icd
      echo /runtimes/oclcpu/x64/libintelocl.so > icd/cpu.icd
      echo /opt/runtimes/oclcpu/x64/libintelocl.so > icd/cpu2.icd
      export OCL_ICD_VENDORS=$PWD/icd
      echo "::group::sycl-ls --verbose"
      sycl-ls --verbose
      echo "::endgroup::"
      echo "::group::SYCL_PI_TRACE=-1 sycl-ls"
      echo $LD_LIBRARY_PATH
      SYCL_PI_TRACE=-1 sycl-ls
      echo "::endgroup::"
      ninja -C build-e2e check-sycl-e2e
  - name: Cleanup
    shell: bash
    if: always()
    run: |
      rm -rf toolchain
      rm -rf build-e2e
