name: 'Run khronos_sycl_cts testing'
description: 'Run SYCL tests from khronos_sycl_cts'
inputs:
  test_ref:
    description: 'commit-ish identifier for test repo'
    required: true
    default: 'SYCL-2020'
  sycl_artifact:
    description: 'Name of the artifact, that contains compiler toolchain'
    required: true
  sycl_archive:
    description: 'Name of SYCL toolchain archive file'
    required: false
    default: 'llvm_sycl.tar.xz'
  sycl_device_filter:
    description: 'List of SYCL backends with set of target devices per each to be tested iteratively'
    required: true
  cmake_args:
    description: 'Extra arguments to cmake command'
    required: false

post-if: false
runs:
  using: "composite"
  steps:
  - run: |
      cp -r /actions .
      git config --global --add safe.directory /__w/repo_cache/KhronosGroup/SYCL-CTS
    shell: bash
  - run: apt update && apt install -yqq opencl-headers ocl-icd-opencl-dev
    shell: bash
  - name: Checkout SYCL CTS
    uses: ./actions/cached_checkout
    with:
      path: khronos_sycl_cts
      repository: 'KhronosGroup/SYCL-CTS'
      ref: ${{ inputs.test_ref }}
      default_branch: 'SYCL-2020'
      cache_path: "/__w/repo_cache/"
  - run: |
      cd khronos_sycl_cts
      git submodule update --init
    shell: bash
  - name: Download compiler toolchain
    uses: actions/download-artifact@v3
    with:
      name: ${{ inputs.sycl_artifact }}
  - name: Extract SYCL toolchain
    shell: bash
    run: |
      mkdir toolchain
      tar -xf ${{ inputs.sycl_archive }} -C toolchain
      rm -f ${{ inputs.sycl_archive }}
  - name: Build SYCL-CTS
    shell: bash
    run: |
      echo "::group::CMake configuration"
      export LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH
      mkdir build
      cmake  -GNinja -B./build -S./khronos_sycl_cts -DSYCL_IMPLEMENTATION=DPCPP \
      -DCMAKE_CXX_COMPILER="$PWD/toolchain/bin/clang++" \
      -DSYCL_CTS_EXCLUDE_TEST_CATEGORIES="$PWD/llvm/devops/cts_exclude_filter" \
      -DSYCL_CTS_ENABLE_OPENCL_INTEROP_TESTS=OFF \
      -DSYCL_CTS_MEASURE_BUILD_TIMES=ON \
      -DDPCPP_INSTALL_DIR="$PWD/toolchain" \
      ${{ inputs.cmake_args }}
      echo "::endgroup::"
      echo "::group::Bulid testing"
      cd build
      ninja
      echo "::endgroup::"
  - name: Run SYCL-CTS
    shell: bash
    run: |
      echo "::group::Configure execution environment"
      export PATH=$PWD/toolchain/bin/:$PATH
      export LD_LIBRARY_PATH=$PWD/toolchain/lib/:$LD_LIBRARY_PATH
      # TODO make this part of container build
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/rocm/hip/lib/:/opt/rocm/lib
      if [ -e /runtimes/oneapi-tbb/env/vars.sh ]; then
        source /runtimes/oneapi-tbb/env/vars.sh;
      elif [ -e /opt/runtimes/oneapi-tbb/env/vars.sh ]; then
        source /opt/runtimes/oneapi-tbb/env/vars.sh;
      else
        echo "no TBB vars in /opt/runtimes or /runtimes";
      fi
      # TODO remove workaround of FPGA emu bug
      mkdir -p icd
      echo /usr/lib/x86_64-linux-gnu/intel-opencl/libigdrcl.so > icd/gpu.icd
      echo /runtimes/oclcpu/x64/libintelocl.so > icd/cpu.icd
      echo /opt/runtimes/oclcpu/x64/libintelocl.so > icd/cpu2.icd
      export OCL_ICD_VENDORS=$PWD/icd
      echo "::endgroup::"
      echo "::group::sycl-ls --verbose"
      sycl-ls --verbose
      echo "::endgroup::"
      echo "::group::SYCL_PI_TRACE=-1 sycl-ls"
      echo $LD_LIBRARY_PATH
      SYCL_PI_TRACE=-1 sycl-ls
      echo "::endgroup::"
      echo "::group::Run testing"
      export SYCL_PI_CUDA_ENABLE_IMAGE_SUPPORT=1
      export SYCL_DEVICE_FILTER=${{ matrix.sycl_device_filter }}
      ./build/bin/test_all --list-devices
      ./build/bin/test_all
      echo "::endgroup::"
  - name: Cleanup
    shell: bash
    if: always()
    run: |
      rm -rf toolchain
      rm -rf build
      rm -rf khronos_sycl_cts
