name: 'Run benchmarks'

# This action assumes the following prerequisites:
#
# - SYCL is placed in ./toolchain -- TODO change this
# - /devops has been checked out in ./devops.
# - env.GITHUB_TOKEN was properly set, because according to Github, that's
#   apparently the recommended way to pass a secret into a github action:

#   https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#accessing-your-secrets
#
# - env.RUNNER_TAG set to the runner tag used to run this workflow: Currently,
#   only specific runners are fully supported.

inputs:
  target_devices:
    type: string
    required: True
  upload_results:
    type: string
    required: True
  build_hash:
    type: string
    required: False
    default: ''

runs:
  using: "composite"
  steps:
  - name: Check specified runner type / target backend
    shell: bash
    env:
      TARGET_DEVICE: ${{ inputs.target_devices }}
      RUNNER_NAME: ${{ runner.name }}
    run: |
      case "$RUNNER_TAG" in
        '["PVC_PERF"]' ) ;;
        *)
          echo "#"
          echo "# WARNING: Only specific tuned runners are fully supported."
          echo "# This workflow is not guaranteed to work with other runners."
          echo "#" ;;
      esac

      # Ensure runner name has nothing injected
      # TODO: in terms of security, is this overkill?
      if [ -z "$(printf '%s' "$RUNNER_NAME" | grep -oE '^[a-zA-Z0-9_-]+$')" ]; then
          echo "Bad runner name, please ensure runner name is [a-zA-Z0-9_-]."
          exit 1
      fi
      echo "RUNNER_NAME=$RUNNER_NAME" >> $GITHUB_ENV 

      # input.target_devices is not directly used, as this allows code injection
      case "$TARGET_DEVICE" in
        level_zero:*) ;;
        *)
          echo "#"
          echo "# WARNING: Only level_zero backend is fully supported."
          echo "# This workflow is not guaranteed to work with other backends."
          echo "#" ;;
      esac
      echo "ONEAPI_DEVICE_SELECTOR=$TARGET_DEVICE" >> $GITHUB_ENV 

  - name: Compute CPU core range to run benchmarks on
    shell: bash
    run: |
      # Compute the core range for the first NUMA node; second node is used by
      # UMF. Skip the first 4 cores as the kernel is likely to schedule more
      # work on these.
      CORES="$(lscpu | awk '
        /NUMA node0 CPU|On-line CPU/ {line=$0}
        END {
          split(line, a, " ")
          split(a[4], b, ",")
          sub(/^0/, "4", b[1])
          print b[1]
        }')"
      echo "CPU core range to use: $CORES"
      echo "CORES=$CORES" >> $GITHUB_ENV

      ZE_AFFINITY_MASK=0
      echo "ZE_AFFINITY_MASK=$ZE_AFFINITY_MASK" >> $GITHUB_ENV
  - name: Checkout results repo
    shell: bash
    run: |
      git clone -b unify-ci https://github.com/intel/llvm-ci-perf-results
  - name: Run compute-benchmarks
    env:
      BUILD_HASH: ${{ inputs.build_hash }}
    shell: bash
    run: |
      # TODO generate summary + display helpful message here
      export CMPLR_ROOT=./toolchain
      echo "-----"
      sycl-ls
      echo "-----"
      pip install --user --break-system-packages -r ./devops/scripts/benchmarks/requirements.txt
      echo "-----"
      mkdir -p "./llvm-ci-perf-results/$RUNNER_NAME"

      # TODO accomodate for different GPUs and backends
      SAVE_NAME="Baseline_PVC_L0"
      SAVE_TIMESTAMP="$(date +'%Y%m%d_%H%M%S')"
      if [ -n "$BUILD_HASH" ]; then
          SAVE_NAME="Commit_PVC_$BUILD_HASH"
      fi

      taskset -c "$CORES" ./devops/scripts/benchmarks/main.py \
        "$(realpath ./llvm_test_workdir)" \
        --sycl "$(realpath ./toolchain)" \
        --save "$SAVE_NAME" \
        --output-html remote \
        --results-dir "./llvm-ci-perf-results/$RUNNER_NAME" \
        --output-dir "./llvm-ci-perf-results/$RUNNER_NAME" \
        --preset Minimal \
        --timestamp-override "$SAVE_TIMESTAMP"
      echo "-----"
      python3 ./devops/scripts/benchmarks/compare.py to_hist \
        --name Baseline_PVC_L0 \
        --compare-file "./llvm-ci-perf-results/$RUNNER_NAME/results/$SAVE_NAME_$SAVE_TIMESTAMP.json" \
        --results-dir "./llvm-ci-perf-results/$RUNNER_NAME/results/"

  - name: Push compute-benchmarks results
    if: inputs.upload_results == 'true' && always()
    shell: bash
    run: |
      cd "./llvm-ci-perf-results"
      git config user.name "SYCL Benchmarking Bot"
      git config user.email "sys_sycl_benchmarks@intel.com"
      git pull
      git add .
      # Make sure changes have been made
      if git diff --quiet && git diff --cached --quiet; then
        echo "No new results added, skipping push."
      else
        git commit -m "[GHA] Upload compute-benchmarks results from https://github.com/intel/llvm/actions/runs/${{ github.run_id }}"
        git push "https://$GITHUB_TOKEN@github.com/intel/llvm-ci-perf-results.git" unify-ci
      fi

