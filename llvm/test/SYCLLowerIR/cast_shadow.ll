; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -LowerWGScope -verify -S | FileCheck %s

target triple = "nvptx64-nvidia-cuda-sycldevice"

%struct.baz = type { i8 }
%struct.spam = type { %struct.wobble, %struct.wobble, %struct.wobble, %struct.wombat.0 }
%struct.wobble = type { %struct.wombat }
%struct.wombat = type { [1 x i64] }
%struct.wombat.0 = type { %struct.wombat }
%struct.quux = type { i8 }

; CHECK: @[[SHADOW:[a-zA-Z0-9]+]] = internal unnamed_addr addrspace(3) global %struct.spam undef

define internal void @wobble(%struct.baz* %arg, %struct.spam* byval(%struct.spam) %arg1) !work_group_scope !0 {
; CHECK:    [[TMP10:%.*]] = bitcast %struct.spam* [[ARG1:%.*]] to i8*
; CHECK:    call void @llvm.memcpy.p3i8.p0i8.i64(i8 addrspace(3)* align 16 bitcast (%struct.spam addrspace(3)* @[[SHADOW]] to i8 addrspace(3)*), i8* [[TMP10]], i64 32, i1 false)
; CHECK:    call void @_Z22__spirv_ControlBarrierjjj(i32 2, i32 2, i32 272) #0
; CHECK:    [[TMP11:%.*]] = bitcast %struct.spam* %arg1 to i8*
; CHECK:    call void @llvm.memcpy.p0i8.p3i8.i64(i8* [[TMP11:%.*]], i8 addrspace(3)* align 16 bitcast (%struct.spam addrspace(3)* @[[SHADOW]] to i8
; CHECK:    call void @widget(%struct.spam* %arg1, %struct.quux* byval(%struct.quux) [[TMP2:%.*]])
;
bb:
  %tmp = alloca %struct.baz*
  %tmp2 = alloca %struct.quux
  store %struct.baz* %arg, %struct.baz** %tmp
  %tmp3 = load %struct.baz*, %struct.baz** %tmp
  call void @widget(%struct.spam* %arg1, %struct.quux* byval(%struct.quux) %tmp2)
  ret void
}

define internal void @widget(%struct.spam* %arg, %struct.quux* byval(%struct.quux) %arg1) !work_item_scope !0 !parallel_for_work_item !0 {
bb:
  ret void
}

!0 = !{}
