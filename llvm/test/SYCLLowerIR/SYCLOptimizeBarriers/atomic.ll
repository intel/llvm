; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=sycl-optimize-barriers -S < %s | FileCheck %s

; Tests that atomic instructions are classified for region memory scope and
; allow barrier optimization.

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spirv64-unknown-unknown"

@L = external addrspace(3) global i32

declare spir_func void @foo()

define spir_kernel void @spv_atomic_local() {
; CHECK-LABEL: @spv_atomic_local(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call spir_func void @foo()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 2, i32 400)
; CHECK-NEXT:    call spir_func void @_Z19__spirv_AtomicStorePU3AS3iN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEi(ptr addrspace(3) @L, i32 2, i32 258, i32 0)
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
; CHECK-NEXT:    call spir_func void @foo()
; CHECK-NEXT:    ret void
;
entry:
  call spir_func void @foo()
  call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
  call spir_func void @_Z19__spirv_AtomicStorePU3AS3iN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEi(ptr addrspace(3) @L, i32 2, i32 258, i32 0)
  call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
  call spir_func void @foo()
  ret void
}

define spir_kernel void @llvm_atomic_local(ptr addrspace(3) %p) {
; CHECK-LABEL: @llvm_atomic_local(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call spir_func void @foo()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 2, i32 400)
; CHECK-NEXT:    [[TMP0:%.*]] = atomicrmw add ptr addrspace(3) [[P:%.*]], i32 1 syncscope("workgroup") seq_cst, align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
; CHECK-NEXT:    call spir_func void @foo()
; CHECK-NEXT:    ret void
;
entry:
  call spir_func void @foo()
  call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
  atomicrmw add ptr addrspace(3) %p, i32 1 syncscope("workgroup") seq_cst
  call void @_Z22__spirv_ControlBarrieriii(i32 1, i32 1, i32 912)
  call spir_func void @foo()
  ret void
}

declare void @_Z22__spirv_ControlBarrieriii(i32, i32, i32)
declare spir_func void @_Z19__spirv_AtomicStorePU3AS3iN5__spv5Scope4FlagENS1_19MemorySemanticsMask4FlagEi(ptr addrspace(3), i32, i32, i32)
