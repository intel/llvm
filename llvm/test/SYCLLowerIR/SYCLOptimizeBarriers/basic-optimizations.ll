; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=sycl-optimize-barriers -S < %s | FileCheck %s

; The test for various barrier optimizations performed by the
; sycl-optimize-barriers pass.

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spirv64-unknown-unknown"

@GV = external addrspace(1) global i32

@__spirv_BuiltInWorkgroupId = external addrspace(1) global <3 x i32>

define spir_kernel void @bb_remove() {
; CHECK-LABEL: define spir_kernel void @bb_remove() {
; CHECK-NEXT:    ret void
;
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  ret void
}

define spir_kernel void @bb_remove_get_id() {
; CHECK-LABEL: define spir_kernel void @bb_remove_get_id() {
; CHECK-NEXT:    [[ID1:%.*]] = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId, align 16
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    [[ID2:%.*]] = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId, align 16
; CHECK-NEXT:    [[ID3:%.*]] = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId, align 16
; CHECK-NEXT:    ret void
;
  %id1 = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  %id2 = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  %id3 = load <3 x i32>, ptr addrspace(1) @__spirv_BuiltInWorkgroupId
  ret void
}

define spir_kernel void @bb_private_access() {
; CHECK-LABEL: define spir_kernel void @bb_private_access() {
; CHECK-NEXT:    [[TMP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 1, ptr [[TMP]], align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    [[V:%.*]] = load i32, ptr [[TMP]], align 4
; CHECK-NEXT:    ret void
;
  %tmp = alloca i32
  store i32 1, ptr %tmp
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  %v = load i32, ptr %tmp
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  ret void
}

define spir_kernel void @bb_generic_alloca_access() {
; CHECK-LABEL: define spir_kernel void @bb_generic_alloca_access() {
; CHECK-NEXT:    [[TMP:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP_CAST:%.*]] = addrspacecast ptr [[TMP]] to ptr addrspace(4)
; CHECK-NEXT:    store i32 1, ptr addrspace(4) [[TMP_CAST]], align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    [[V:%.*]] = load i32, ptr addrspace(4) [[TMP_CAST]], align 4
; CHECK-NEXT:    ret void
;
  %tmp = alloca i32
  %tmp_cast = addrspacecast ptr %tmp to ptr addrspace(4)
  store i32 1, ptr addrspace(4) %tmp_cast
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  %v = load i32, ptr addrspace(4) %tmp_cast
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  ret void
}

define spir_kernel void @cfg_remove(i1 %cond) {
; CHECK-LABEL: define spir_kernel void @cfg_remove(
; CHECK-SAME: i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    br i1 [[COND]], label %[[BB1:.*]], label %[[BB1]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    ret void
;
entry:
  call void @unknown()
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  br i1 %cond, label %bb1, label %bb1
bb1:
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  ret void
}

define spir_kernel void @downgrade_global(ptr addrspace(3) %p) {
; CHECK-LABEL: define spir_kernel void @downgrade_global(
; CHECK-SAME: ptr addrspace(3) [[P:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4
; CHECK-NEXT:    store i32 [[TMP1]], ptr addrspace(3) [[P]], align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 2, i32 noundef 400)
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr addrspace(3) [[P]], align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
; CHECK-NEXT:    br label %[[BB2:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    ret void
;
entry:
  %0 = alloca i32
  store i32 0, ptr %0
  %1 = load i32, ptr %0
  store i32 %1, ptr addrspace(3) %p
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
  br label %bb1
bb1:
  %2 = load i32, ptr addrspace(3) %p
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
  br label %bb2
bb2:
  ret void
}

define spir_kernel void @unknown_scope(i32 %exec, i32 %mem) {
; CHECK-LABEL: define spir_kernel void @unknown_scope(
; CHECK-SAME: i32 [[EXEC:%.*]], i32 [[MEM:%.*]]) {
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 [[EXEC]], i32 [[MEM]], i32 noundef 0)
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    ret void
;
  call void @unknown()
  call void @_Z22__spirv_ControlBarrieriii(i32 %exec, i32 %mem, i32 noundef 0)
  call void @unknown()
  ret void
}

define spir_kernel void @unknown_memory() {
; CHECK-LABEL: define spir_kernel void @unknown_memory() {
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    ret void
;
  call void @unknown()
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  call void @unknown()
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 0)
  call void @unknown()
  ret void
}

define spir_kernel void @no_downgrade(ptr addrspace(1) %p) {
; CHECK-LABEL: define spir_kernel void @no_downgrade(
; CHECK-SAME: ptr addrspace(1) [[P:%.*]]) {
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
; CHECK-NEXT:    store i32 0, ptr addrspace(1) [[P]], align 4
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
; CHECK-NEXT:    call void @unknown()
; CHECK-NEXT:    ret void
;
  call void @unknown()
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
  store i32 0, ptr addrspace(1) %p, align 4
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 1, i32 noundef 1, i32 noundef 912)
  call void @unknown()
  ret void
}

define spir_func void @cfg_remove_sem_subsume(i1 %cond) {
; CHECK-LABEL: define spir_func void @cfg_remove_sem_subsume(
; CHECK-SAME: i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 912)
; CHECK-NEXT:    br i1 [[COND]], label %[[BB1:.*]], label %[[BB1]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 400)
; CHECK-NEXT:    ret void
;
entry:
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 912)
  br i1 %cond, label %bb1, label %bb1
bb1:
  call void @_Z22__spirv_ControlBarrieriii(i32 noundef 2, i32 noundef 2, i32 noundef 400)
  ret void
}

declare void @unknown()

declare void @_Z22__spirv_ControlBarrieriii(i32 noundef, i32 noundef, i32 noundef)

