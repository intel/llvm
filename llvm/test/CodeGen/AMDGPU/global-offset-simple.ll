; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --include-generated-funcs --version 5
; RUN: opt -bugpoint-enable-legacy-pm -globaloffset %s -S -o - | FileCheck %s
; ModuleID = 'global-offset-simple.bc'
source_filename = "global-offset-simple.ll"

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

; This test checks that the transformation is applied in the basic case.

declare ptr addrspace(5) @llvm.amdgcn.implicit.offset()

define i64 @_ZTS14other_function() {
  %1 = tail call ptr addrspace(5) @llvm.amdgcn.implicit.offset()
  %2 = getelementptr inbounds i32, ptr addrspace(5) %1, i64 2
  %3 = load i32, ptr addrspace(5) %2, align 4
  %4 = zext i32 %3 to i64
  ret i64 %4
}


define amdgpu_kernel void @_ZTS14example_kernel() {
entry:
  %0 = call i64 @_ZTS14other_function()
  ret void
}


!llvm.module.flags = !{!0}

!0 = !{i32 1, !"sycl-device", i32 1}
; CHECK-LABEL: define i64 @_ZTS14other_function() {
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 0 to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
;
; CHECK-LABEL: define i64 @_ZTS14other_function_with_offset(
; CHECK-SAME: ptr addrspace(5) [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i32, ptr addrspace(5) [[TMP0]], i64 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr addrspace(5) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    ret i64 [[TMP4]]
;
;
; CHECK-LABEL: define amdgpu_kernel void @_ZTS14example_kernel() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call i64 @_ZTS14other_function()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define amdgpu_kernel void @_ZTS14example_kernel_with_offset(
; CHECK-SAME: ptr byref([3 x i32]) [[TMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [3 x i32], align 4, addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = addrspacecast ptr [[TMP0]] to ptr addrspace(4)
; CHECK-NEXT:    call void @llvm.memcpy.p5.p4.i64(ptr addrspace(5) align 4 [[TMP1]], ptr addrspace(4) align 1 [[TMP2]], i64 12, i1 false)
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @_ZTS14other_function_with_offset(ptr addrspace(5) [[TMP1]])
; CHECK-NEXT:    ret void
;
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
;.
; CHECK: [[META0:![0-9]+]] = !{i32 1, !"sycl-device", i32 1}
;.
