; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --include-generated-funcs --version 5
; RUN: opt -bugpoint-enable-legacy-pm -globaloffset %s -S -o - | FileCheck %s

; Check that debug record that points to the caller (not the function that
; holds it) is correctly updated.

target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

define void @main_func(ptr %this, ptr %group) !dbg !5 {
entry:
  call void @call_1()
  ret void
}

define void @call_1() {
entry:
    #dbg_declare(ptr null, !9, !DIExpression(), !20)
  %0 = call ptr @llvm.nvvm.implicit.offset()
  ret void
}

; Function Attrs: nounwind speculatable memory(none)
declare ptr @llvm.nvvm.implicit.offset() #0

attributes #0 = { nounwind speculatable memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 0.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, nameTableKind: None)
!1 = !DIFile(filename: "test.cpp", directory: "/")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = distinct !DISubprogram(name: "operator()", linkageName: "main_func", scope: !6, file: !1, line: 26, type: !7, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, declaration: !8, retainedNodes: !2)
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, file: !1, line: 26, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !2)
!7 = distinct !DISubroutineType(types: !2)
!8 = !DISubprogram(name: "operator()", scope: !6, file: !1, line: 26, type: !7, scopeLine: 26, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagLocalToUnit)
!9 = !DILocalVariable(name: "Func", arg: 2, scope: !10, file: !11, line: 180, type: !19)
!10 = distinct !DISubprogram(name: "parallel_for_work_item<(lambda at test.cpp:28:19)>", linkageName: "call_1", scope: !12, file: !11, line: 180, type: !15, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, templateParams: !2, declaration: !16, retainedNodes: !2)
!11 = !DIFile(filename: "header.hpp", directory: "/")
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "group<2>", scope: !13, file: !11, line: 103, size: 512, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !2, templateParams: !2, identifier: "_ZTSN4sycl3_V15groupILi2EEE")
!13 = !DINamespace(name: "_V1", scope: !14, exportSymbols: true)
!14 = !DINamespace(name: "sycl", scope: null)
!15 = distinct !DISubroutineType(types: !2)
!16 = !DISubprogram(name: "parallel_for_work_item<(lambda at test.cpp:28:19)>", linkageName: "call_1", scope: !12, file: !11, line: 180, type: !15, scopeLine: 180, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagLocalToUnit, templateParams: !17)
!17 = !{!18}
!18 = !DITemplateTypeParameter(name: "WorkItemFunctionT", type: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_class_type, scope: !5, file: !1, line: 28, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: !2)
!20 = !DILocation(line: 180, column: 49, scope: !10)
; CHECK-LABEL: define void @main_func(
; CHECK-SAME: ptr [[THIS:%.*]], ptr [[GROUP:%.*]]) !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @call_1()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @main_func_with_offset(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]]) !dbg [[DBG9:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @call_1_with_offset(ptr [[TMP2]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @call_1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_declare(ptr null, [[META10:![0-9]+]], !DIExpression(), [[META21:![0-9]+]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @call_1_with_offset(
; CHECK-SAME: ptr [[TMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_declare(ptr null, [[META10]], !DIExpression(), [[META21]])
; CHECK-NEXT:    ret void
;
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}}", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: [[META2:![0-9]+]], nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "test.cpp", directory: {{.*}})
; CHECK: [[META2]] = !{}
; CHECK: [[META3:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[META4:![0-9]+]] = !{i32 1, !"sycl-device", i32 1}
; CHECK: [[DBG5]] = distinct !DISubprogram(name: "operator()", linkageName: "main_func", scope: [[META6:![0-9]+]], file: [[META1]], line: 26, type: [[META7:![0-9]+]], scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: [[META0]], declaration: [[META8:![0-9]+]], retainedNodes: [[META2]])
; CHECK: [[META6]] = distinct !DICompositeType(tag: DW_TAG_class_type, file: [[META1]], line: 26, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: [[META2]])
; CHECK: [[META7]] = distinct !DISubroutineType(types: [[META2]])
; CHECK: [[META8]] = !DISubprogram(name: "operator()", scope: [[META6]], file: [[META1]], line: 26, type: [[META7]], scopeLine: 26, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagLocalToUnit)
; CHECK: [[DBG9]] = distinct !DISubprogram(name: "operator()", linkageName: "main_func", scope: [[META6]], file: [[META1]], line: 26, type: [[META7]], scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: [[META0]], declaration: [[META8]], retainedNodes: [[META2]])
; CHECK: [[META10]] = !DILocalVariable(name: "Func", arg: 2, scope: [[META11:![0-9]+]], file: [[META12:![0-9]+]], line: 180, type: [[META20:![0-9]+]])
; CHECK: [[META11]] = distinct !DISubprogram(name: "parallel_for_work_item<(lambda at test.cpp:28:19)>", linkageName: "call_1", scope: [[META13:![0-9]+]], file: [[META12]], line: 180, type: [[META16:![0-9]+]], scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: [[META0]], templateParams: [[META2]], declaration: [[META17:![0-9]+]], retainedNodes: [[META2]])
; CHECK: [[META12]] = !DIFile(filename: "header.hpp", directory: {{.*}})
; CHECK: [[META13]] = distinct !DICompositeType(tag: DW_TAG_class_type, name: "group<2>", scope: [[META14:![0-9]+]], file: [[META12]], line: 103, size: 512, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: [[META2]], templateParams: [[META2]], identifier: "_ZTSN4sycl3_V15groupILi2EEE")
; CHECK: [[META14]] = !DINamespace(name: "_V1", scope: [[META15:![0-9]+]], exportSymbols: true)
; CHECK: [[META15]] = !DINamespace(name: "sycl", scope: null)
; CHECK: [[META16]] = distinct !DISubroutineType(types: [[META2]])
; CHECK: [[META17]] = !DISubprogram(name: "parallel_for_work_item<(lambda at test.cpp:28:19)>", linkageName: "call_1", scope: [[META13]], file: [[META12]], line: 180, type: [[META16]], scopeLine: 180, flags: DIFlagPublic | DIFlagPrototyped, spFlags: DISPFlagLocalToUnit, templateParams: [[META18:![0-9]+]])
; CHECK: [[META18]] = !{[[META19:![0-9]+]]}
; CHECK: [[META19]] = !DITemplateTypeParameter(name: "WorkItemFunctionT", type: [[META20]])
; CHECK: [[META20]] = distinct !DICompositeType(tag: DW_TAG_class_type, scope: [[DBG5]], file: [[META1]], line: 28, size: 8, flags: DIFlagTypePassByValue | DIFlagNonTrivial, elements: [[META2]])
; CHECK: [[META21]] = !DILocation(line: 180, column: 49, scope: [[META11]])
;.
