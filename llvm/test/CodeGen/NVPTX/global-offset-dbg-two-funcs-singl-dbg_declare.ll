; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --include-generated-funcs --version 5
; RUN: opt -bugpoint-enable-legacy-pm -globaloffset %s -S -o - | FileCheck %s

; Check that debug data is correctly updated across the call stack.

target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

define void @main_func() {
entry:
  call void @call_1()
  ret void
}

define void @call_1() !dbg !5 {
entry:
  %0 = call ptr @llvm.nvvm.implicit.offset()
    #dbg_declare(!8, !9, !DIExpression(), !11)
  ret void
}

declare ptr @llvm.nvvm.implicit.offset() #0

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !12}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 0.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, nameTableKind: None)
!1 = !DIFile(filename: "test.cpp", directory: "/")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{!"clang version 17.0.0"}
!5 = distinct !DISubprogram(name: "fun", linkageName: "call_1", scope: !1, file: !1, line: 1, type: !6, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
!6 = !DISubroutineType(types: !7)
!7 = !{null}
!8 = !{}
!9 = !DILocalVariable(name: "x", scope: !5, file: !1, line: 1, type: !10)
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocation(line: 1, column: 18, scope: !5)
!12 = !{i32 1, !"sycl-device", i32 1}
; CHECK-LABEL: define void @main_func() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @call_1()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @main_func_with_offset(
; CHECK-SAME: ptr [[TMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @call_1_with_offset(ptr [[TMP0]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @call_1(
; CHECK-SAME: ) !dbg [[DBG6:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_declare([[META9:![0-9]+]], [[META10:![0-9]+]], !DIExpression(), [[META12:![0-9]+]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @call_1_with_offset(
; CHECK-SAME: ptr [[TMP0:%.*]]) !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_declare([[META9]], [[META14:![0-9]+]], !DIExpression(), [[META15:![0-9]+]])
; CHECK-NEXT:    ret void
;
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}}", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "test.cpp", directory: {{.*}})
; CHECK: [[META2:![0-9]+]] = !{i32 7, !"Dwarf Version", i32 5}
; CHECK: [[META3:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[META4:![0-9]+]] = !{i32 1, !"sycl-device", i32 1}
; CHECK: [[META5:![0-9]+]] = !{!"{{.*}}clang version {{.*}}"}
; CHECK: [[DBG6]] = distinct !DISubprogram(name: "fun", linkageName: "call_1", scope: [[META1]], file: [[META1]], line: 1, type: [[META7:![0-9]+]], scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META9]])
; CHECK: [[META7]] = !DISubroutineType(types: [[META8:![0-9]+]])
; CHECK: [[META8]] = !{null}
; CHECK: [[META9]] = !{}
; CHECK: [[META10]] = !DILocalVariable(name: "x", scope: [[DBG6]], file: [[META1]], line: 1, type: [[META11:![0-9]+]])
; CHECK: [[META11]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[META12]] = !DILocation(line: 1, column: 18, scope: [[DBG6]])
; CHECK: [[DBG13]] = distinct !DISubprogram(name: "fun", linkageName: "call_1", scope: [[META1]], file: [[META1]], line: 1, type: [[META7]], scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META9]])
; CHECK: [[META14]] = !DILocalVariable(name: "x", scope: [[DBG13]], file: [[META1]], line: 1, type: [[META11]])
; CHECK: [[META15]] = !DILocation(line: 1, column: 18, scope: [[DBG13]])
;.
