; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc  -O0 -mtriple=mipsel-linux-gnu -global-isel  -verify-machineinstrs %s -o -| FileCheck %s -check-prefixes=MIPS32
define i32 @mul_i32(i32 %x, i32 %y) {
; MIPS32-LABEL: mul_i32:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $2, $4, $5
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %z = mul i32 %x, %y
  ret i32 %z
}

define signext i8 @mul_i8_sext(i8 signext %a, i8 signext %b) {
; MIPS32-LABEL: mul_i8_sext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $4, $5, $4
; MIPS32-NEXT:    sll $4, $4, 24
; MIPS32-NEXT:    sra $2, $4, 24
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i8 %b, %a
  ret i8 %mul
}

define zeroext i8 @mul_i8_zext(i8 zeroext %a, i8 zeroext %b) {
; MIPS32-LABEL: mul_i8_zext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $4, $5, $4
; MIPS32-NEXT:    lui $5, 0
; MIPS32-NEXT:    ori $5, $5, 255
; MIPS32-NEXT:    and $2, $4, $5
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i8 %b, %a
  ret i8 %mul
}

define i8 @mul_i8_aext(i8 %a, i8 %b) {
; MIPS32-LABEL: mul_i8_aext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $2, $5, $4
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i8 %b, %a
  ret i8 %mul
}

define signext i16 @mul_i16_sext(i16 signext %a, i16 signext %b) {
; MIPS32-LABEL: mul_i16_sext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $4, $5, $4
; MIPS32-NEXT:    sll $4, $4, 16
; MIPS32-NEXT:    sra $2, $4, 16
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i16 %b, %a
  ret i16 %mul
}

define zeroext i16 @mul_i16_zext(i16 zeroext %a, i16 zeroext %b) {
; MIPS32-LABEL: mul_i16_zext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $4, $5, $4
; MIPS32-NEXT:    lui $5, 0
; MIPS32-NEXT:    ori $5, $5, 65535
; MIPS32-NEXT:    and $2, $4, $5
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i16 %b, %a
  ret i16 %mul
}

define i16 @mul_i16_aext(i16 %a, i16 %b) {
; MIPS32-LABEL: mul_i16_aext:
; MIPS32:       # %bb.0: # %entry
; MIPS32-NEXT:    mul $2, $5, $4
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
entry:
  %mul = mul i16 %b, %a
  ret i16 %mul
}

declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32)
define void @umul_with_overflow(i32 %lhs, i32 %rhs, i1* %pcarry_flag) {
; MIPS32-LABEL: umul_with_overflow:
; MIPS32:       # %bb.0:
; MIPS32-NEXT:    multu $4, $5
; MIPS32-NEXT:    mfhi $4
; MIPS32-NEXT:    lui $5, 0
; MIPS32-NEXT:    ori $5, $5, 0
; MIPS32-NEXT:    xor $4, $4, $5
; MIPS32-NEXT:    sltu $4, $zero, $4
; MIPS32-NEXT:    lui $5, 0
; MIPS32-NEXT:    ori $5, $5, 1
; MIPS32-NEXT:    and $4, $4, $5
; MIPS32-NEXT:    sb $4, 0($6)
; MIPS32-NEXT:    jr $ra
; MIPS32-NEXT:    nop
  %res = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %lhs, i32 %rhs)
  %carry_flag = extractvalue { i32, i1 } %res, 1
  store i1 %carry_flag, i1* %pcarry_flag
  ret void
}
