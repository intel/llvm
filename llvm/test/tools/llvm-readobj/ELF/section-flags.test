## Check how we dump regular ELF section flags.

# RUN: yaml2obj %s -o %t.o
# RUN: llvm-readobj -S %t.o | FileCheck --check-prefix=LLVM %s
# RUN: llvm-readelf -S %t.o | FileCheck --check-prefix=GNU %s

# LLVM:      Name: allflags
# LLVM-NEXT: Type: SHT_PROGBITS
# LLVM-NEXT: Flags [ (0x80000FF7)
# LLVM-NEXT:   SHF_ALLOC (0x2)
# LLVM-NEXT:   SHF_COMPRESSED (0x800)
# LLVM-NEXT:   SHF_EXCLUDE (0x80000000)
# LLVM-NEXT:   SHF_EXECINSTR (0x4)
# LLVM-NEXT:   SHF_GROUP (0x200)
# LLVM-NEXT:   SHF_INFO_LINK (0x40)
# LLVM-NEXT:   SHF_LINK_ORDER (0x80)
# LLVM-NEXT:   SHF_MERGE (0x10)
# LLVM-NEXT:   SHF_OS_NONCONFORMING (0x100)
# LLVM-NEXT:   SHF_STRINGS (0x20)
# LLVM-NEXT:   SHF_TLS (0x400)
# LLVM-NEXT:   SHF_WRITE (0x1)
# LLVM-NEXT: ]

# LLVM:      Name: noflags
# LLVM-NEXT: Type: SHT_PROGBITS
# LLVM-NEXT: Flags [ (0x0)
# LLVM-NEXT: ]

# GNU: [Nr] Name     Type     Address          Off    Size   ES Flg          Lk Inf Al
# GNU: [ 1] allflags PROGBITS 0000000000000000 000040 000000 00 WAEXMSILoGTx 0   0  0
# GNU: [ 2] noflags  PROGBITS 0000000000000000 000040 000000 00              0   0  0

--- !ELF
FileHeader:
  Class:    ELFCLASS64
  Data:     ELFDATA2LSB
  Type:     ET_REL
  Machine:  EM_X86_64
  Flags:    []
Sections:
  - Name:  allflags
    Type:  SHT_PROGBITS
    Flags: [ SHF_WRITE, SHF_ALLOC, SHF_EXECINSTR, SHF_MERGE,
            SHF_STRINGS, SHF_INFO_LINK, SHF_LINK_ORDER, SHF_OS_NONCONFORMING,
            SHF_GROUP, SHF_TLS, SHF_COMPRESSED, SHF_EXCLUDE ]
  - Name:  noflags
    Type:  SHT_PROGBITS
    Flags: [ ]
