## Here we test how llvm-readelf/llvm-readobj behave when inputs have
## invalid versioning sections.

## In the first case we have a SHT_GNU_versym section that refers to
## a version listed in a SHT_GNU_verneed section. That version has an
## empty name, making it invalid.

# RUN: yaml2obj --docnum=1 %s -o %t1
# RUN: llvm-readelf -V %t1 | FileCheck %s --check-prefix=GNU-VERNEED-NAME
# RUN: llvm-readobj -V %t1 | FileCheck %s --check-prefix=LLVM-VERNEED-NAME

# GNU-VERNEED-NAME:      Version symbols section '.gnu.version' contains 2 entries:
# GNU-VERNEED-NAME-NEXT:  Addr: 0000000000200210  Offset: 0x000040  Link: 5 (.dynsym)
# GNU-VERNEED-NAME-NEXT:   000:   0 (*local*)       2 (*invalid*)

# GNU-VERNEED-NAME:      Version needs section '.gnu.version_r' contains 1 entries:
# GNU-VERNEED-NAME-NEXT:  Addr: 0000000000000000  Offset: 0x000044  Link: 6 (.dynstr)
# GNU-VERNEED-NAME-NEXT:   0x0000: Version: 1  File: somefile  Cnt: 1
# GNU-VERNEED-NAME-NEXT:   0x0010:   Name:   Flags: none  Version: 2

# LLVM-VERNEED-NAME:      VersionSymbols [
# LLVM-VERNEED-NAME:        Symbol {
# LLVM-VERNEED-NAME-NEXT:     Version: 0
# LLVM-VERNEED-NAME-NEXT:     Name:
# LLVM-VERNEED-NAME-NEXT:   }
# LLVM-VERNEED-NAME-NEXT:   Symbol {
# LLVM-VERNEED-NAME-NEXT:     Version: 2
# LLVM-VERNEED-NAME-NEXT:     Name: foo
# LLVM-VERNEED-NAME-NEXT:   }
# LLVM-VERNEED-NAME-NEXT: ]

# LLVM-VERNEED-NAME:      VersionRequirements [
# LLVM-VERNEED-NAME-NEXT:   Dependency {
# LLVM-VERNEED-NAME-NEXT:     Version: 1
# LLVM-VERNEED-NAME-NEXT:     Count: 1
# LLVM-VERNEED-NAME-NEXT:     FileName: somefile
# LLVM-VERNEED-NAME-NEXT:     Entries [
# LLVM-VERNEED-NAME-NEXT:       Entry {
# LLVM-VERNEED-NAME-NEXT:         Hash:  0
# LLVM-VERNEED-NAME-NEXT:         Flags: 0x0
# LLVM-VERNEED-NAME-NEXT:         Index: 2
# LLVM-VERNEED-NAME-NEXT:         Name: {{$}}
# LLVM-VERNEED-NAME-NEXT:       }
# LLVM-VERNEED-NAME-NEXT:     ]
# LLVM-VERNEED-NAME-NEXT:   }
# LLVM-VERNEED-NAME-NEXT: ]

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_EXEC
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version
    Type:    SHT_GNU_versym
    Flags:   [ SHF_ALLOC ]
    Address: 0x200210
    Link:    .dynsym
    Entries: [ 0, 2 ]
  - Name:  .gnu.version_r
    Type:  SHT_GNU_verneed
    Flags: [ SHF_ALLOC ]
    Link:  .dynstr
    Info:  1
    AddressAlign: 4
    Dependencies:
      - Version:   1
        File:      somefile
        Entries:
          - Name:  '' ## invalid name
            Hash:  0
            Flags: 0
            Other: 2
DynamicSymbols:
  - Name:    foo
    Binding: STB_GLOBAL
...

## In this case SHT_GNU_verneed is not linked to a dynamic string table. We check we handle
## this situation properly.

# RUN: yaml2obj --docnum=2 %s -o %t2
# RUN: llvm-readelf -V %t2 | FileCheck %s --check-prefix=GNU-NOLINK
# RUN: llvm-readobj -V %t2 | FileCheck %s --check-prefix=LLVM-NOLINK

# GNU-NOLINK:      Version symbols section '.gnu.version' contains 2 entries:
# GNU-NOLINK-NEXT:  Addr: 0000000000000000  Offset: 0x000040  Link: 5 (.dynsym)
# GNU-NOLINK-NEXT:   000:   0 (*local*)       2 (bar)
# GNU-NOLINK:      Version needs section '.gnu.version_r' contains 1 entries:
# GNU-NOLINK-NEXT:  Addr: 0000000000000000  Offset: 0x000044  Link: 0 ()
# GNU-NOLINK-NEXT:   0x0000: Version: 1  File: <invalid>  Cnt: 1
# GNU-NOLINK-NEXT:   0x0010:   Name: <invalid>  Flags: none Version: 2

# LLVM-NOLINK:      VersionSymbols [
# LLVM-NOLINK:        Symbol {
# LLVM-NOLINK-NEXT:     Version: 0
# LLVM-NOLINK-NEXT:     Name:
# LLVM-NOLINK-NEXT:   }
# LLVM-NOLINK-NEXT:   Symbol {
# LLVM-NOLINK-NEXT:     Version: 2
# LLVM-NOLINK-NEXT:     Name: foo@bar
# LLVM-NOLINK-NEXT:   }
# LLVM-NOLINK-NEXT: ]

# LLVM-NOLINK:      VersionRequirements [
# LLVM-NOLINK-NEXT:   Dependency {
# LLVM-NOLINK-NEXT:     Version: 1
# LLVM-NOLINK-NEXT:     Count: 1
# LLVM-NOLINK-NEXT:     FileName: <invalid>
# LLVM-NOLINK-NEXT:     Entries [
# LLVM-NOLINK-NEXT:       Entry {
# LLVM-NOLINK-NEXT:         Hash: 0
# LLVM-NOLINK-NEXT:         Flags: 0
# LLVM-NOLINK-NEXT:         Index: 2
# LLVM-NOLINK-NEXT:         Name: <invalid>
# LLVM-NOLINK-NEXT:       }
# LLVM-NOLINK-NEXT:     ]
# LLVM-NOLINK-NEXT:   }
# LLVM-NOLINK-NEXT: ]

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_EXEC
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version
    Type:    SHT_GNU_versym
    Flags:   [ SHF_ALLOC ]
    Link:    .dynsym
    Entries: [ 0, 2 ]
  - Name:  .gnu.version_r
    Type:  SHT_GNU_verneed
    Flags: [ SHF_ALLOC ]
    Link:  0
    Info:  1
    AddressAlign: 4
    Dependencies:
      - Version: 1
        File:    somefile
        Entries:
          - Name:  'bar'
            Hash:  0
            Flags: 0
            Other: 2
DynamicSymbols:
  - Name:    foo
    Binding: STB_GLOBAL

## We can't parse misaligned auxiliary version records.
## Here we have a SHT_GNU_verneed section aligned by 1 byte.
## This makes the first auxiliary record offset % 4 be non-zero.

# RUN: yaml2obj --docnum=3 %s -o %t3
# RUN: not llvm-readelf -V %t3 2>&1 | FileCheck %s -DFILE=%t3 --check-prefix=BROKEN-AUX
# RUN: not llvm-readobj -V %t3 2>&1 | FileCheck %s -DFILE=%t3 --check-prefix=BROKEN-AUX

# BROKEN-AUX: error: '[[FILE]]': SHT_GNU_verneed: the vn_aux field of the entry with index 0 references a misaligned auxiliary record

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_EXEC
  Machine: EM_X86_64
Sections:
  - Name:    .gnu.version
    Type:    SHT_GNU_versym
    Flags:   [ SHF_ALLOC ]
    Link:    .dynsym
    Entries: [ 2 ]
  - Name:  .gnu.version_r
    Type:  SHT_GNU_verneed
    Flags: [ SHF_ALLOC ]
    Info:  1
    AddressAlign: 1
    Dependencies:
      - Version: 1
        File:    somefile
        Entries:
          - Name:  'bar'
            Hash:  0
            Flags: 0
            Other: 2
DynamicSymbols:
  - Name: foo

## Here we check that we can properly dump the case when a dependency file name
## and/or a dependency name string offset is equal to the string table size.
##
## We set the version dependency vn_file field to the offset of string 'foo' in
## the .dynstr, which is 1. We create a custom string table .mystrtab of size 1
## and link it with the .gnu.version_r section. For the vna_name we use the same trick.

# RUN: yaml2obj --docnum=4 %s -o %t4
# RUN: llvm-readobj --sections --section-data -V %t4 | FileCheck %s --check-prefix=LLVM-OFFSET-EQ
# RUN: llvm-readelf --sections -V %t4 | FileCheck %s --check-prefix=GNU-OFFSET-EQ

# LLVM-OFFSET-EQ: Name: .mystrtab
# LLVM-OFFSET-EQ: Size:
# LLVM-OFFSET-EQ-SAME:  1

# LLVM-OFFSET-EQ:      Name: .dynstr
# LLVM-OFFSET-EQ:      SectionData (
# LLVM-OFFSET-EQ-NEXT:   0000: 00666F6F 00 |.foo.|
# LLVM-OFFSET-EQ-NEXT: )

# LLVM-OFFSET-EQ:      VersionRequirements [
# LLVM-OFFSET-EQ-NEXT:   Dependency {
# LLVM-OFFSET-EQ-NEXT:     Version: 1
# LLVM-OFFSET-EQ-NEXT:     Count: 1
# LLVM-OFFSET-EQ-NEXT:     FileName: <invalid>
# LLVM-OFFSET-EQ-NEXT:     Entries [
# LLVM-OFFSET-EQ-NEXT:       Entry {
# LLVM-OFFSET-EQ-NEXT:         Hash: 0
# LLVM-OFFSET-EQ-NEXT:         Flags: 0x0
# LLVM-OFFSET-EQ-NEXT:         Index: 0
# LLVM-OFFSET-EQ-NEXT:         Name: <invalid>
# LLVM-OFFSET-EQ-NEXT:       }
# LLVM-OFFSET-EQ-NEXT:     ]
# LLVM-OFFSET-EQ-NEXT:   }
# LLVM-OFFSET-EQ-NEXT: ]

# GNU-OFFSET-EQ:      Version needs section '.gnu.version_r' contains 1 entries:
# GNU-OFFSET-EQ-NEXT:  Addr: 0000000000000000  Offset: 0x000044  Link: 1 (.mystrtab)
# GNU-OFFSET-EQ-NEXT:   0x0000: Version: 1  File: <invalid>  Cnt: 1
# GNU-OFFSET-EQ-NEXT:   0x0010:   Name: <invalid>  Flags: none  Version: 0

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_EXEC
  Machine: EM_X86_64
Sections:
  - Name: .mystrtab
    Type: SHT_STRTAB
    Content: "00"
  - Name:  .gnu.version_r
    Type:  SHT_GNU_verneed
    Flags: [ SHF_ALLOC ]
    Info:  1
    Link:  .mystrtab
    AddressAlign: 4
    Dependencies:
      - Version: 1
        File:    foo
        Entries:
          - Name:  'foo'
            Hash:  0
            Flags: 0
            Other: 0
DynamicSymbols:
  - Name: foo

## Here we check that we can properly dump the case when a dependency file name
## and/or a dependency name string offset is greater than the string table size.
##
# RUN: yaml2obj --docnum=5 %s -o %t5
# RUN: llvm-readobj --sections -V %t5 | FileCheck %s --check-prefix=LLVM-OFFSET-GR
# RUN: llvm-readelf --sections -V %t5 | FileCheck %s --check-prefix=GNU-OFFSET-GR

# LLVM-OFFSET-GR:      VersionRequirements [
# LLVM-OFFSET-GR-NEXT:   Dependency {
# LLVM-OFFSET-GR-NEXT:     Version: 1
# LLVM-OFFSET-GR-NEXT:     Count: 1
# LLVM-OFFSET-GR-NEXT:     FileName: <invalid>
# LLVM-OFFSET-GR-NEXT:     Entries [
# LLVM-OFFSET-GR-NEXT:       Entry {
# LLVM-OFFSET-GR-NEXT:         Hash: 0
# LLVM-OFFSET-GR-NEXT:         Flags: 0x0
# LLVM-OFFSET-GR-NEXT:         Index: 0
# LLVM-OFFSET-GR-NEXT:         Name: <invalid>
# LLVM-OFFSET-GR-NEXT:       }
# LLVM-OFFSET-GR-NEXT:     ]
# LLVM-OFFSET-GR-NEXT:   }
# LLVM-OFFSET-GR-NEXT: ]

# GNU-OFFSET-GR:      Version needs section '.gnu.version_r' contains 1 entries:
# GNU-OFFSET-GR-NEXT:  Addr: 0000000000000000  Offset: 0x000040  Link: 1 (.mystrtab)
# GNU-OFFSET-GR-NEXT:   0x0000: Version: 1  File: <invalid>  Cnt: 1
# GNU-OFFSET-GR-NEXT:   0x0010:   Name: <invalid>  Flags: none  Version: 0

--- !ELF
FileHeader:
  Class:   ELFCLASS64
  Data:    ELFDATA2LSB
  Type:    ET_EXEC
  Machine: EM_X86_64
Sections:
  - Name: .mystrtab
    Type: SHT_STRTAB
    Content: ""
  - Name:  .gnu.version_r
    Type:  SHT_GNU_verneed
    Flags: [ SHF_ALLOC ]
    Info:  1
    Link:  .mystrtab
    AddressAlign: 4
    Dependencies:
      - Version: 1
        File:    foo
        Entries:
          - Name:  'foo'
            Hash:  0
            Flags: 0
            Other: 0
DynamicSymbols:
  - Name: foo
