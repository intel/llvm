; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature
; RUN: echo 'some code we want to preserve' > %t-int_header.h
; RUN: echo 'static constexpr const bool param_omit_table[] = {' >> %t-int_header.h
; RUN: echo '  // OMIT_TABLE_BEGIN' >> %t-int_header.h
; RUN: echo '    // SpirKernel1' >> %t-int_header.h
; RUN: echo '    false, false,' >> %t-int_header.h
; RUN: echo '    // SpirKernel2' >> %t-int_header.h
; RUN: echo '    false, false,' >> %t-int_header.h
; RUN: echo '  // OMIT_TABLE_END' >> %t-int_header.h
; RUN: echo '};' >> %t-int_header.h
; RUN: echo 'some code we want to preserve' >> %t-int_header.h
; RUN: opt < %s -deadargelim -S | FileCheck %s --check-prefixes=CHECK
; RUN: opt < %s -deadargelim-sycl -S -integr-header-file %t-int_header.h | FileCheck %s --check-prefixes=CHECK-SYCL
; RUN: cat %t-int_header.h | FileCheck %s --check-prefixes=CHECK-INT-HEADER

; This test checks eliminating dead arguments
; from SPIR kernel functions in SYCL environment.

target triple = "spir64-unknown-unknown-sycldevice"

define weak_odr spir_kernel void @SpirKernel1(float %arg1, float %arg2) {
; CHECK-LABEL: define {{[^@]+}}@SpirKernel1
; CHECK-SAME: (float [[ARG1:%.*]], float [[ARG2:%.*]])
; CHECK-NEXT:    call void @foo(float [[ARG1]])
; CHECK-NEXT:    ret void
;
; CHECK-SYCL-LABEL: define {{[^@]+}}@SpirKernel1
; CHECK-SYCL-SAME: (float [[ARG1:%.*]])
; CHECK-SYCL-NEXT:    call void @foo(float [[ARG1]])
; CHECK-SYCL-NEXT:    ret void
;
  call void @foo(float %arg1)
  ret void
}

define weak_odr spir_kernel void @SpirKernel2(float %arg1, float %arg2) {
; CHECK-LABEL: define {{[^@]+}}@SpirKernel2
; CHECK-SAME: (float [[ARG1:%.*]], float [[ARG2:%.*]])
; CHECK-NEXT:    call void @foo(float [[ARG2]])
; CHECK-NEXT:    ret void
;
; CHECK-SYCL-LABEL: define {{[^@]+}}@SpirKernel2
; CHECK-SYCL-SAME: (float [[ARG2:%.*]])
; CHECK-SYCL-NEXT:    call void @foo(float [[ARG2]])
; CHECK-SYCL-NEXT:    ret void
;
  call void @foo(float %arg2)
  ret void
}

; CHECK-INT-HEADER: some code we want to preserve
; CHECK-INT-HEADER: static constexpr const bool param_omit_table[] = {
; CHECK-INT-HEADER:   // OMIT_TABLE_BEGIN
; CHECK-INT-HEADER:     // SpirKernel1
; CHECK-INT-HEADER:     false, true,
; CHECK-INT-HEADER:     // SpirKernel2
; CHECK-INT-HEADER:     true, false,
; CHECK-INT-HEADER:   // OMIT_TABLE_END
; CHECK-INT-HEADER: };
; CHECK-INT-HEADER: some code we want to preserve

declare void @foo(float %arg)
