; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=deadargelim -S | FileCheck %s

define internal ptx_kernel void @test1(i32 %v, ptr byval(i32) %DEADARG1, ptr %p) {
; CHECK-LABEL: define internal ptx_kernel void @test1(
; CHECK-SAME: i32 [[V:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:    store i32 [[V]], ptr [[P]], align 4
; CHECK-NEXT:    ret void
;
  store i32 %v, ptr %p
  ret void
}

define internal ptx_kernel void @test2(ptr byval(i32) %DEADARG1, ptr byval(i32) %p) {
; CHECK-LABEL: define internal ptx_kernel void @test2(
; CHECK-SAME: ptr byval(i32) [[P:%.*]]) {
; CHECK-NEXT:    store i32 0, ptr [[P]], align 4
; CHECK-NEXT:    ret void
;
  store i32 0, ptr %p
  ret void
}

define internal ptx_kernel void @test3(ptr byval(i32) %DEADARG1, i32 %v, ptr byval(i32) %p) {
; CHECK-LABEL: define internal ptx_kernel void @test3(
; CHECK-SAME: i32 [[V:%.*]], ptr byval(i32) [[P:%.*]]) {
; CHECK-NEXT:    store i32 [[V]], ptr [[P]], align 4
; CHECK-NEXT:    ret void
;
  store i32 %v, ptr %p
  ret void
}

define internal ptx_kernel void @test4(ptr byval(i32) %p, i32 %v, ptr byval(i32) %DEADARG) {
; CHECK-LABEL: define internal ptx_kernel void @test4(
; CHECK-SAME: ptr byval(i32) [[P:%.*]], i32 [[V:%.*]]) {
; CHECK-NEXT:    store i32 [[V]], ptr [[P]], align 4
; CHECK-NEXT:    ret void
;
  store i32 %v, ptr %p
  ret void
}

define internal ptx_kernel void @test5(ptr byval(i32) %p, i32 %x, ptr byval(i32) %DEADARG1, ptr byval(i32) %DEADARG2, i32 %y, ptr byval(i32) %q) {
; CHECK-LABEL: define internal ptx_kernel void @test5(
; CHECK-SAME: ptr byval(i32) [[P:%.*]], i32 [[X:%.*]], i32 [[Y:%.*]], ptr byval(i32) [[Q:%.*]]) {
; CHECK-NEXT:    [[T:%.*]] = add i32 [[X]], [[Y]]
; CHECK-NEXT:    store i32 [[T]], ptr [[P]], align 4
; CHECK-NEXT:    store i32 [[T]], ptr [[Q]], align 4
; CHECK-NEXT:    ret void
;
  %t = add i32 %x, %y
  store i32 %t, ptr %p
  store i32 %t, ptr %q
  ret void
}

!nvvm.annotations = !{
  !0,
  !2, !4,
  !6, !8,
  !10, !12,
  !14
}

; Note - also test various permutations of the parameter lists, as they are not
; specified to be in any particular order (e.g., consecutive).
!0 = !{ptr @test1, !"grid_constant", !1}
!1 = !{i32 2}

!2 = !{ptr @test2, !"grid_constant", !3}
!3 = !{i32 1, i32 2}
!4 = !{ptr @test2, !"grid_constant", !5}
!5 = !{i32 2, i32 1}

!6 = !{ptr @test3, !"grid_constant", !7}
!7 = !{i32 1, i32 3}
!8 = !{ptr @test3, !"grid_constant", !9}
!9 = !{i32 3, i32 1}

!10 = !{ptr @test4, !"grid_constant", !11}
!11 = !{i32 1, i32 3}
!12 = !{ptr @test4, !"grid_constant", !13}
!13 = !{i32 3, i32 1}

!14 = !{ptr @test5, !"grid_constant", !15, !"grid_constant", !16, !"grid_constant", !17}
!15 = !{i32 1, i32 3, i32 4, i32 6}
!16 = !{i32 3, i32 1, i32 4, i32 6}
!17 = !{i32 3, i32 1, i32 6, i32 4}
;.
; CHECK: [[META1:![0-9]+]] = !{ptr @test1, !"grid_constant", [[META2:![0-9]+]]}
; CHECK: [[META2]] = !{}
; CHECK: [[META4:![0-9]+]] = !{ptr @test2, !"grid_constant", [[META5:![0-9]+]]}
; CHECK: [[META5]] = !{i32 1}
; CHECK: [[META6:![0-9]+]] = distinct !{ptr @test2, !"grid_constant", [[META5]]}
; CHECK: [[META8:![0-9]+]] = !{ptr @test3, !"grid_constant", [[META9:![0-9]+]]}
; CHECK: [[META9]] = !{i32 2}
; CHECK: [[META10:![0-9]+]] = distinct !{ptr @test3, !"grid_constant", [[META9]]}
; CHECK: [[META12:![0-9]+]] = !{ptr @test4, !"grid_constant", [[META5]]}
; CHECK: [[META13:![0-9]+]] = distinct !{ptr @test4, !"grid_constant", [[META5]]}
; CHECK: [[META15:![0-9]+]] = !{ptr @test5, !"grid_constant", [[META16:![0-9]+]], !"grid_constant", [[META16]], !"grid_constant", [[META16]]}
; CHECK: [[META16]] = !{i32 1, i32 4}
;.
