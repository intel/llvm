From 2b6e88d4d01fea816f525fafc71676603f7a8c53 Mon Sep 17 00:00:00 2001
From: Marcos Maronas <marcos.maronas@intel.com>
Date: Fri, 26 Jul 2024 02:43:07 -0700
Subject: [PATCH] Modernize test.

Signed-off-by: Marcos Maronas <marcos.maronas@intel.com>
---
 sycl/test-e2e/NewOffloadDriver/Inputs/aot.cpp | 38 +++++++++----------
 1 file changed, 19 insertions(+), 19 deletions(-)

diff --git a/sycl/test-e2e/NewOffloadDriver/Inputs/aot.cpp b/sycl/test-e2e/NewOffloadDriver/Inputs/aot.cpp
index 4d70401464f4..64e735c3d903 100644
--- a/sycl/test-e2e/NewOffloadDriver/Inputs/aot.cpp
+++ b/sycl/test-e2e/NewOffloadDriver/Inputs/aot.cpp
@@ -14,12 +14,12 @@
 constexpr sycl::access::mode sycl_read = sycl::access::mode::read;
 constexpr sycl::access::mode sycl_write = sycl::access::mode::write;
 
-template <typename T> class SimpleVadd;
+template <typename T> class Vadd;
 
 template <typename T, size_t N>
-void simple_vadd(const std::array<T, N> &VA, const std::array<T, N> &VB,
-                 std::array<T, N> &VC) {
-  sycl::queue deviceQueue([](sycl::exception_list ExceptionList) {
+void vadd(const std::array<T, N> &A, const std::array<T, N> &B,
+                 std::array<T, N> &C) {
+  sycl::queue Queue([](sycl::exception_list ExceptionList) {
     for (std::exception_ptr ExceptionPtr : ExceptionList) {
       try {
         std::rethrow_exception(ExceptionPtr);
@@ -32,21 +32,21 @@ void simple_vadd(const std::array<T, N> &VA, const std::array<T, N> &VB,
   });
 
   sycl::range<1> numOfItems{N};
-  sycl::buffer<T, 1> bufferA(VA.data(), numOfItems);
-  sycl::buffer<T, 1> bufferB(VB.data(), numOfItems);
-  sycl::buffer<T, 1> bufferC(VC.data(), numOfItems);
+  sycl::buffer bufA(A.data(), numOfItems);
+  sycl::buffer bufB(B.data(), numOfItems);
+  sycl::buffer bufC(C.data(), numOfItems);
 
-  deviceQueue.submit([&](sycl::handler &cgh) {
-    auto accessorA = bufferA.template get_access<sycl_read>(cgh);
-    auto accessorB = bufferB.template get_access<sycl_read>(cgh);
-    auto accessorC = bufferC.template get_access<sycl_write>(cgh);
+  Queue.submit([&](sycl::handler &cgh) {
+    sycl::accessor accA{bufA, cgh, sycl::read_only};
+    sycl::accessor accB{bufB, cgh, sycl::read_only};
+    sycl::accessor accC{bufC, cgh, sycl::write_only};
 
-    cgh.parallel_for<class SimpleVadd<T>>(numOfItems, [=](sycl::id<1> wiID) {
-      accessorC[wiID] = accessorA[wiID] + accessorB[wiID];
+    cgh.parallel_for<Vadd<T>>(numOfItems, [=](sycl::id<1> wiID) {
+      accC[wiID] = accA[wiID] + accB[wiID];
     });
   });
 
-  deviceQueue.wait_and_throw();
+  Queue.wait_and_throw();
 }
 
 int main() {
@@ -54,20 +54,20 @@ int main() {
   std::array<int, array_size> A = {{1, 2, 3, 4}}, B = {{1, 2, 3, 4}}, C;
   std::array<float, array_size> D = {{1.f, 2.f, 3.f, 4.f}},
                                 E = {{1.f, 2.f, 3.f, 4.f}}, F;
-  simple_vadd(A, B, C);
-  simple_vadd(D, E, F);
+  vadd(A, B, C);
+  vadd(D, E, F);
   for (unsigned int i = 0; i < array_size; i++) {
     if (C[i] != A[i] + B[i]) {
-      std::cout << "The results are incorrect (element " << i << " is " << C[i]
+      std::cout << "Incorrect result (element " << i << " is " << C[i]
                 << "!\n";
       return 1;
     }
     if (F[i] != D[i] + E[i]) {
-      std::cout << "The results are incorrect (element " << i << " is " << F[i]
+      std::cout << "Incorrect result (element " << i << " is " << F[i]
                 << "!\n";
       return 1;
     }
   }
-  std::cout << "The results are correct!\n";
+  std::cout << "Correct result!\n";
   return 0;
 }
-- 
2.39.1

